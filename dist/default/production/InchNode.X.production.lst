

Microchip Technology PIC PRO Macro Assembler V1.37 build -260352376 
                                                                                               Tue May 09 19:46:36 2017

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	12F1840
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text47,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text51,local,class=CODE,merge=1,delta=2
    16                           	psect	text52,local,class=CODE,merge=1,delta=2
    17                           	psect	text53,local,class=CODE,merge=1,delta=2
    18                           	psect	text54,local,class=CODE,merge=1,delta=2
    19                           	psect	text55,local,class=CODE,merge=1,delta=2
    20                           	psect	pa_nodes,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     	;# 
    23  0001                     	;# 
    24  0002                     	;# 
    25  0003                     	;# 
    26  0004                     	;# 
    27  0005                     	;# 
    28  0006                     	;# 
    29  0007                     	;# 
    30  0008                     	;# 
    31  0009                     	;# 
    32  000A                     	;# 
    33  000B                     	;# 
    34  000C                     	;# 
    35  0011                     	;# 
    36  0012                     	;# 
    37  0015                     	;# 
    38  0016                     	;# 
    39  0016                     	;# 
    40  0017                     	;# 
    41  0018                     	;# 
    42  0019                     	;# 
    43  001A                     	;# 
    44  001B                     	;# 
    45  001C                     	;# 
    46  001E                     	;# 
    47  001F                     	;# 
    48  008C                     	;# 
    49  0091                     	;# 
    50  0092                     	;# 
    51  0095                     	;# 
    52  0096                     	;# 
    53  0097                     	;# 
    54  0098                     	;# 
    55  0099                     	;# 
    56  009A                     	;# 
    57  009B                     	;# 
    58  009B                     	;# 
    59  009C                     	;# 
    60  009D                     	;# 
    61  009E                     	;# 
    62  010C                     	;# 
    63  0111                     	;# 
    64  0112                     	;# 
    65  0115                     	;# 
    66  0116                     	;# 
    67  0117                     	;# 
    68  0118                     	;# 
    69  0119                     	;# 
    70  011A                     	;# 
    71  011B                     	;# 
    72  011D                     	;# 
    73  011D                     	;# 
    74  018C                     	;# 
    75  0191                     	;# 
    76  0191                     	;# 
    77  0192                     	;# 
    78  0193                     	;# 
    79  0193                     	;# 
    80  0193                     	;# 
    81  0194                     	;# 
    82  0195                     	;# 
    83  0196                     	;# 
    84  0197                     	;# 
    85  0199                     	;# 
    86  019A                     	;# 
    87  019B                     	;# 
    88  019B                     	;# 
    89  019B                     	;# 
    90  019B                     	;# 
    91  019C                     	;# 
    92  019C                     	;# 
    93  019D                     	;# 
    94  019E                     	;# 
    95  019F                     	;# 
    96  020C                     	;# 
    97  0211                     	;# 
    98  0211                     	;# 
    99  0212                     	;# 
   100  0212                     	;# 
   101  0213                     	;# 
   102  0213                     	;# 
   103  0214                     	;# 
   104  0214                     	;# 
   105  0215                     	;# 
   106  0215                     	;# 
   107  0215                     	;# 
   108  0216                     	;# 
   109  0216                     	;# 
   110  0217                     	;# 
   111  0217                     	;# 
   112  0291                     	;# 
   113  0291                     	;# 
   114  0292                     	;# 
   115  0293                     	;# 
   116  0294                     	;# 
   117  0295                     	;# 
   118  0295                     	;# 
   119  0296                     	;# 
   120  0391                     	;# 
   121  0392                     	;# 
   122  0393                     	;# 
   123  039A                     	;# 
   124  039C                     	;# 
   125  039D                     	;# 
   126  039E                     	;# 
   127  039F                     	;# 
   128  0FE4                     	;# 
   129  0FE5                     	;# 
   130  0FE6                     	;# 
   131  0FE7                     	;# 
   132  0FE8                     	;# 
   133  0FE9                     	;# 
   134  0FEA                     	;# 
   135  0FEB                     	;# 
   136  0FED                     	;# 
   137  0FEE                     	;# 
   138  0FEF                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  008C                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0095                     	;# 
   169  0096                     	;# 
   170  0097                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  010C                     	;# 
   180  0111                     	;# 
   181  0112                     	;# 
   182  0115                     	;# 
   183  0116                     	;# 
   184  0117                     	;# 
   185  0118                     	;# 
   186  0119                     	;# 
   187  011A                     	;# 
   188  011B                     	;# 
   189  011D                     	;# 
   190  011D                     	;# 
   191  018C                     	;# 
   192  0191                     	;# 
   193  0191                     	;# 
   194  0192                     	;# 
   195  0193                     	;# 
   196  0193                     	;# 
   197  0193                     	;# 
   198  0194                     	;# 
   199  0195                     	;# 
   200  0196                     	;# 
   201  0197                     	;# 
   202  0199                     	;# 
   203  019A                     	;# 
   204  019B                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019C                     	;# 
   209  019C                     	;# 
   210  019D                     	;# 
   211  019E                     	;# 
   212  019F                     	;# 
   213  020C                     	;# 
   214  0211                     	;# 
   215  0211                     	;# 
   216  0212                     	;# 
   217  0212                     	;# 
   218  0213                     	;# 
   219  0213                     	;# 
   220  0214                     	;# 
   221  0214                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0216                     	;# 
   226  0216                     	;# 
   227  0217                     	;# 
   228  0217                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0294                     	;# 
   234  0295                     	;# 
   235  0295                     	;# 
   236  0296                     	;# 
   237  0391                     	;# 
   238  0392                     	;# 
   239  0393                     	;# 
   240  039A                     	;# 
   241  039C                     	;# 
   242  039D                     	;# 
   243  039E                     	;# 
   244  039F                     	;# 
   245  0FE4                     	;# 
   246  0FE5                     	;# 
   247  0FE6                     	;# 
   248  0FE7                     	;# 
   249  0FE8                     	;# 
   250  0FE9                     	;# 
   251  0FEA                     	;# 
   252  0FEB                     	;# 
   253  0FED                     	;# 
   254  0FEE                     	;# 
   255  0FEF                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0006                     	;# 
   263  0007                     	;# 
   264  0008                     	;# 
   265  0009                     	;# 
   266  000A                     	;# 
   267  000B                     	;# 
   268  000C                     	;# 
   269  0011                     	;# 
   270  0012                     	;# 
   271  0015                     	;# 
   272  0016                     	;# 
   273  0016                     	;# 
   274  0017                     	;# 
   275  0018                     	;# 
   276  0019                     	;# 
   277  001A                     	;# 
   278  001B                     	;# 
   279  001C                     	;# 
   280  001E                     	;# 
   281  001F                     	;# 
   282  008C                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0095                     	;# 
   286  0096                     	;# 
   287  0097                     	;# 
   288  0098                     	;# 
   289  0099                     	;# 
   290  009A                     	;# 
   291  009B                     	;# 
   292  009B                     	;# 
   293  009C                     	;# 
   294  009D                     	;# 
   295  009E                     	;# 
   296  010C                     	;# 
   297  0111                     	;# 
   298  0112                     	;# 
   299  0115                     	;# 
   300  0116                     	;# 
   301  0117                     	;# 
   302  0118                     	;# 
   303  0119                     	;# 
   304  011A                     	;# 
   305  011B                     	;# 
   306  011D                     	;# 
   307  011D                     	;# 
   308  018C                     	;# 
   309  0191                     	;# 
   310  0191                     	;# 
   311  0192                     	;# 
   312  0193                     	;# 
   313  0193                     	;# 
   314  0193                     	;# 
   315  0194                     	;# 
   316  0195                     	;# 
   317  0196                     	;# 
   318  0197                     	;# 
   319  0199                     	;# 
   320  019A                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019B                     	;# 
   324  019B                     	;# 
   325  019C                     	;# 
   326  019C                     	;# 
   327  019D                     	;# 
   328  019E                     	;# 
   329  019F                     	;# 
   330  020C                     	;# 
   331  0211                     	;# 
   332  0211                     	;# 
   333  0212                     	;# 
   334  0212                     	;# 
   335  0213                     	;# 
   336  0213                     	;# 
   337  0214                     	;# 
   338  0214                     	;# 
   339  0215                     	;# 
   340  0215                     	;# 
   341  0215                     	;# 
   342  0216                     	;# 
   343  0216                     	;# 
   344  0217                     	;# 
   345  0217                     	;# 
   346  0291                     	;# 
   347  0291                     	;# 
   348  0292                     	;# 
   349  0293                     	;# 
   350  0294                     	;# 
   351  0295                     	;# 
   352  0295                     	;# 
   353  0296                     	;# 
   354  0391                     	;# 
   355  0392                     	;# 
   356  0393                     	;# 
   357  039A                     	;# 
   358  039C                     	;# 
   359  039D                     	;# 
   360  039E                     	;# 
   361  039F                     	;# 
   362  0FE4                     	;# 
   363  0FE5                     	;# 
   364  0FE6                     	;# 
   365  0FE7                     	;# 
   366  0FE8                     	;# 
   367  0FE9                     	;# 
   368  0FEA                     	;# 
   369  0FEB                     	;# 
   370  0FED                     	;# 
   371  0FEE                     	;# 
   372  0FEF                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  008C                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  010C                     	;# 
   414  0111                     	;# 
   415  0112                     	;# 
   416  0115                     	;# 
   417  0116                     	;# 
   418  0117                     	;# 
   419  0118                     	;# 
   420  0119                     	;# 
   421  011A                     	;# 
   422  011B                     	;# 
   423  011D                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0194                     	;# 
   433  0195                     	;# 
   434  0196                     	;# 
   435  0197                     	;# 
   436  0199                     	;# 
   437  019A                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019C                     	;# 
   443  019C                     	;# 
   444  019D                     	;# 
   445  019E                     	;# 
   446  019F                     	;# 
   447  020C                     	;# 
   448  0211                     	;# 
   449  0211                     	;# 
   450  0212                     	;# 
   451  0212                     	;# 
   452  0213                     	;# 
   453  0213                     	;# 
   454  0214                     	;# 
   455  0214                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0216                     	;# 
   460  0216                     	;# 
   461  0217                     	;# 
   462  0217                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0294                     	;# 
   468  0295                     	;# 
   469  0295                     	;# 
   470  0296                     	;# 
   471  0391                     	;# 
   472  0392                     	;# 
   473  0393                     	;# 
   474  039A                     	;# 
   475  039C                     	;# 
   476  039D                     	;# 
   477  039E                     	;# 
   478  039F                     	;# 
   479  0FE4                     	;# 
   480  0FE5                     	;# 
   481  0FE6                     	;# 
   482  0FE7                     	;# 
   483  0FE8                     	;# 
   484  0FE9                     	;# 
   485  0FEA                     	;# 
   486  0FEB                     	;# 
   487  0FED                     	;# 
   488  0FEE                     	;# 
   489  0FEF                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0008                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  001E                     	;# 
   515  001F                     	;# 
   516  008C                     	;# 
   517  0091                     	;# 
   518  0092                     	;# 
   519  0095                     	;# 
   520  0096                     	;# 
   521  0097                     	;# 
   522  0098                     	;# 
   523  0099                     	;# 
   524  009A                     	;# 
   525  009B                     	;# 
   526  009B                     	;# 
   527  009C                     	;# 
   528  009D                     	;# 
   529  009E                     	;# 
   530  010C                     	;# 
   531  0111                     	;# 
   532  0112                     	;# 
   533  0115                     	;# 
   534  0116                     	;# 
   535  0117                     	;# 
   536  0118                     	;# 
   537  0119                     	;# 
   538  011A                     	;# 
   539  011B                     	;# 
   540  011D                     	;# 
   541  011D                     	;# 
   542  018C                     	;# 
   543  0191                     	;# 
   544  0191                     	;# 
   545  0192                     	;# 
   546  0193                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020C                     	;# 
   565  0211                     	;# 
   566  0211                     	;# 
   567  0212                     	;# 
   568  0212                     	;# 
   569  0213                     	;# 
   570  0213                     	;# 
   571  0214                     	;# 
   572  0214                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0216                     	;# 
   577  0216                     	;# 
   578  0217                     	;# 
   579  0217                     	;# 
   580  0291                     	;# 
   581  0291                     	;# 
   582  0292                     	;# 
   583  0293                     	;# 
   584  0294                     	;# 
   585  0295                     	;# 
   586  0295                     	;# 
   587  0296                     	;# 
   588  0391                     	;# 
   589  0392                     	;# 
   590  0393                     	;# 
   591  039A                     	;# 
   592  039C                     	;# 
   593  039D                     	;# 
   594  039E                     	;# 
   595  039F                     	;# 
   596  0FE4                     	;# 
   597  0FE5                     	;# 
   598  0FE6                     	;# 
   599  0FE7                     	;# 
   600  0FE8                     	;# 
   601  0FE9                     	;# 
   602  0FEA                     	;# 
   603  0FEB                     	;# 
   604  0FED                     	;# 
   605  0FEE                     	;# 
   606  0FEF                     	;# 
   607  0000                     	;# 
   608  0001                     	;# 
   609  0002                     	;# 
   610  0003                     	;# 
   611  0004                     	;# 
   612  0005                     	;# 
   613  0006                     	;# 
   614  0007                     	;# 
   615  0008                     	;# 
   616  0009                     	;# 
   617  000A                     	;# 
   618  000B                     	;# 
   619  000C                     	;# 
   620  0011                     	;# 
   621  0012                     	;# 
   622  0015                     	;# 
   623  0016                     	;# 
   624  0016                     	;# 
   625  0017                     	;# 
   626  0018                     	;# 
   627  0019                     	;# 
   628  001A                     	;# 
   629  001B                     	;# 
   630  001C                     	;# 
   631  001E                     	;# 
   632  001F                     	;# 
   633  008C                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0098                     	;# 
   640  0099                     	;# 
   641  009A                     	;# 
   642  009B                     	;# 
   643  009B                     	;# 
   644  009C                     	;# 
   645  009D                     	;# 
   646  009E                     	;# 
   647  010C                     	;# 
   648  0111                     	;# 
   649  0112                     	;# 
   650  0115                     	;# 
   651  0116                     	;# 
   652  0117                     	;# 
   653  0118                     	;# 
   654  0119                     	;# 
   655  011A                     	;# 
   656  011B                     	;# 
   657  011D                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  0191                     	;# 
   661  0191                     	;# 
   662  0192                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0193                     	;# 
   666  0194                     	;# 
   667  0195                     	;# 
   668  0196                     	;# 
   669  0197                     	;# 
   670  0199                     	;# 
   671  019A                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019C                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020C                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0213                     	;# 
   688  0214                     	;# 
   689  0214                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0216                     	;# 
   694  0216                     	;# 
   695  0217                     	;# 
   696  0217                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0294                     	;# 
   702  0295                     	;# 
   703  0295                     	;# 
   704  0296                     	;# 
   705  0391                     	;# 
   706  0392                     	;# 
   707  0393                     	;# 
   708  039A                     	;# 
   709  039C                     	;# 
   710  039D                     	;# 
   711  039E                     	;# 
   712  039F                     	;# 
   713  0FE4                     	;# 
   714  0FE5                     	;# 
   715  0FE6                     	;# 
   716  0FE7                     	;# 
   717  0FE8                     	;# 
   718  0FE9                     	;# 
   719  0FEA                     	;# 
   720  0FEB                     	;# 
   721  0FED                     	;# 
   722  0FEE                     	;# 
   723  0FEF                     	;# 
   724  0000                     	;# 
   725  0001                     	;# 
   726  0002                     	;# 
   727  0003                     	;# 
   728  0004                     	;# 
   729  0005                     	;# 
   730  0006                     	;# 
   731  0007                     	;# 
   732  0008                     	;# 
   733  0009                     	;# 
   734  000A                     	;# 
   735  000B                     	;# 
   736  000C                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  001E                     	;# 
   749  001F                     	;# 
   750  008C                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0095                     	;# 
   754  0096                     	;# 
   755  0097                     	;# 
   756  0098                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  0111                     	;# 
   766  0112                     	;# 
   767  0115                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  0118                     	;# 
   771  0119                     	;# 
   772  011A                     	;# 
   773  011B                     	;# 
   774  011D                     	;# 
   775  011D                     	;# 
   776  018C                     	;# 
   777  0191                     	;# 
   778  0191                     	;# 
   779  0192                     	;# 
   780  0193                     	;# 
   781  0193                     	;# 
   782  0193                     	;# 
   783  0194                     	;# 
   784  0195                     	;# 
   785  0196                     	;# 
   786  0197                     	;# 
   787  0199                     	;# 
   788  019A                     	;# 
   789  019B                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019C                     	;# 
   794  019C                     	;# 
   795  019D                     	;# 
   796  019E                     	;# 
   797  019F                     	;# 
   798  020C                     	;# 
   799  0211                     	;# 
   800  0211                     	;# 
   801  0212                     	;# 
   802  0212                     	;# 
   803  0213                     	;# 
   804  0213                     	;# 
   805  0214                     	;# 
   806  0214                     	;# 
   807  0215                     	;# 
   808  0215                     	;# 
   809  0215                     	;# 
   810  0216                     	;# 
   811  0216                     	;# 
   812  0217                     	;# 
   813  0217                     	;# 
   814  0291                     	;# 
   815  0291                     	;# 
   816  0292                     	;# 
   817  0293                     	;# 
   818  0294                     	;# 
   819  0295                     	;# 
   820  0295                     	;# 
   821  0296                     	;# 
   822  0391                     	;# 
   823  0392                     	;# 
   824  0393                     	;# 
   825  039A                     	;# 
   826  039C                     	;# 
   827  039D                     	;# 
   828  039E                     	;# 
   829  039F                     	;# 
   830  0FE4                     	;# 
   831  0FE5                     	;# 
   832  0FE6                     	;# 
   833  0FE7                     	;# 
   834  0FE8                     	;# 
   835  0FE9                     	;# 
   836  0FEA                     	;# 
   837  0FEB                     	;# 
   838  0FED                     	;# 
   839  0FEE                     	;# 
   840  0FEF                     	;# 
   841                           
   842                           	psect	stringtext
   843  01CF                     __pstringtext:	
   844  01CF                     _dpowers:	
   845  01CF  3401               	retlw	1
   846  01D0  3400               	retlw	0
   847  01D1  340A               	retlw	10
   848  01D2  3400               	retlw	0
   849  01D3  3464               	retlw	100
   850  01D4  3400               	retlw	0
   851  01D5  34E8               	retlw	232
   852  01D6  3403               	retlw	3
   853  01D7  3410               	retlw	16
   854  01D8  3427               	retlw	39
   855  01D9                     __end_of_dpowers:	
   856  01D9                     STR_2:	
   857  01D9  3420               	retlw	32	;' '
   858  01DA  3420               	retlw	32	;' '
   859  01DB  344E               	retlw	78	;'N'
   860  01DC  346F               	retlw	111	;'o'
   861  01DD  342E               	retlw	46	;'.'
   862  01DE  3425               	retlw	37	;'%'
   863  01DF  3432               	retlw	50	;'2'
   864  01E0  3464               	retlw	100	;'d'
   865  01E1  3420               	retlw	32	;' '
   866  01E2  3425               	retlw	37	;'%'
   867  01E3  3434               	retlw	52	;'4'
   868  01E4  3464               	retlw	100	;'d'
   869  01E5  342D               	retlw	45	;'-'
   870  01E6  3425               	retlw	37	;'%'
   871  01E7  3434               	retlw	52	;'4'
   872  01E8  3464               	retlw	100	;'d'
   873  01E9  3420               	retlw	32	;' '
   874  01EA  346D               	retlw	109	;'m'
   875  01EB  346D               	retlw	109	;'m'
   876  01EC  3420               	retlw	32	;' '
   877  01ED  347B               	retlw	123	;'{'
   878  01EE  3420               	retlw	32	;' '
   879  01EF  3425               	retlw	37	;'%'
   880  01F0  3435               	retlw	53	;'5'
   881  01F1  3464               	retlw	100	;'d'
   882  01F2  3420               	retlw	32	;' '
   883  01F3  342C               	retlw	44	;','
   884  01F4  3420               	retlw	32	;' '
   885  01F5  3425               	retlw	37	;'%'
   886  01F6  3435               	retlw	53	;'5'
   887  01F7  3464               	retlw	100	;'d'
   888  01F8  3420               	retlw	32	;' '
   889  01F9  347D               	retlw	125	;'}'
   890  01FA  342C               	retlw	44	;','
   891  01FB  340D               	retlw	13
   892  01FC  340A               	retlw	10
   893  01FD  3400               	retlw	0
   894  01FE                     STR_1:	
   895  01FE  3454               	retlw	84	;'T'
   896  01FF  3468               	retlw	104	;'h'
   897  0200  3465               	retlw	101	;'e'
   898  0201  3420               	retlw	32	;' '
   899  0202  346F               	retlw	111	;'o'
   900  0203  3472               	retlw	114	;'r'
   901  0204  3469               	retlw	105	;'i'
   902  0205  3467               	retlw	103	;'g'
   903  0206  3469               	retlw	105	;'i'
   904  0207  346E               	retlw	110	;'n'
   905  0208  3461               	retlw	97	;'a'
   906  0209  346C               	retlw	108	;'l'
   907  020A  3420               	retlw	32	;' '
   908  020B  3461               	retlw	97	;'a'
   909  020C  346E               	retlw	110	;'n'
   910  020D  3464               	retlw	100	;'d'
   911  020E  3420               	retlw	32	;' '
   912  020F  3461               	retlw	97	;'a'
   913  0210  3463               	retlw	99	;'c'
   914  0211  3474               	retlw	116	;'t'
   915  0212  3475               	retlw	117	;'u'
   916  0213  3461               	retlw	97	;'a'
   917  0214  346C               	retlw	108	;'l'
   918  0215  3420               	retlw	32	;' '
   919  0216  3476               	retlw	118	;'v'
   920  0217  3461               	retlw	97	;'a'
   921  0218  346C               	retlw	108	;'l'
   922  0219  3475               	retlw	117	;'u'
   923  021A  3465               	retlw	101	;'e'
   924  021B  3420               	retlw	32	;' '
   925  021C  3461               	retlw	97	;'a'
   926  021D  3472               	retlw	114	;'r'
   927  021E  3465               	retlw	101	;'e'
   928  021F  343A               	retlw	58	;':'
   929  0220  340D               	retlw	13
   930  0221  340A               	retlw	10
   931  0222  3400               	retlw	0
   932  0223                     STR_4:	
   933  0223  3441               	retlw	65	;'A'
   934  0224  3444               	retlw	68	;'D'
   935  0225  343A               	retlw	58	;':'
   936  0226  3420               	retlw	32	;' '
   937  0227  3425               	retlw	37	;'%'
   938  0228  3464               	retlw	100	;'d'
   939  0229  3420               	retlw	32	;' '
   940  022A  3441               	retlw	65	;'A'
   941  022B  3444               	retlw	68	;'D'
   942  022C  344C               	retlw	76	;'L'
   943  022D  3469               	retlw	105	;'i'
   944  022E  346E               	retlw	110	;'n'
   945  022F  3465               	retlw	101	;'e'
   946  0230  3461               	retlw	97	;'a'
   947  0231  3472               	retlw	114	;'r'
   948  0232  343A               	retlw	58	;':'
   949  0233  3420               	retlw	32	;' '
   950  0234  3425               	retlw	37	;'%'
   951  0235  3464               	retlw	100	;'d'
   952  0236  3420               	retlw	32	;' '
   953  0237  344C               	retlw	76	;'L'
   954  0238  3465               	retlw	101	;'e'
   955  0239  346E               	retlw	110	;'n'
   956  023A  3467               	retlw	103	;'g'
   957  023B  3474               	retlw	116	;'t'
   958  023C  3468               	retlw	104	;'h'
   959  023D  343A               	retlw	58	;':'
   960  023E  3420               	retlw	32	;' '
   961  023F  3425               	retlw	37	;'%'
   962  0240  3464               	retlw	100	;'d'
   963  0241  3420               	retlw	32	;' '
   964  0242  346D               	retlw	109	;'m'
   965  0243  346D               	retlw	109	;'m'
   966  0244  340D               	retlw	13
   967  0245  340A               	retlw	10
   968  0246  3400               	retlw	0
   969  0247                     STR_3:	
   970  0247  3454               	retlw	84	;'T'
   971  0248  3468               	retlw	104	;'h'
   972  0249  3465               	retlw	101	;'e'
   973  024A  3420               	retlw	32	;' '
   974  024B  3443               	retlw	67	;'C'
   975  024C  3461               	retlw	97	;'a'
   976  024D  346C               	retlw	108	;'l'
   977  024E  3469               	retlw	105	;'i'
   978  024F  3420               	retlw	32	;' '
   979  0250  3476               	retlw	118	;'v'
   980  0251  3461               	retlw	97	;'a'
   981  0252  346C               	retlw	108	;'l'
   982  0253  3475               	retlw	117	;'u'
   983  0254  3465               	retlw	101	;'e'
   984  0255  3420               	retlw	32	;' '
   985  0256  3469               	retlw	105	;'i'
   986  0257  3473               	retlw	115	;'s'
   987  0258  343A               	retlw	58	;':'
   988  0259  3420               	retlw	32	;' '
   989  025A  3425               	retlw	37	;'%'
   990  025B  3464               	retlw	100	;'d'
   991  025C  3420               	retlw	32	;' '
   992  025D  346D               	retlw	109	;'m'
   993  025E  346D               	retlw	109	;'m'
   994  025F  340D               	retlw	13
   995  0260  340A               	retlw	10
   996  0261  3400               	retlw	0
   997                           
   998                           ; #config settings
   999  0000                     
  1000                           	psect	nvBANK0
  1001  0067                     __pnvBANK0:	
  1002  0067                     _TMR0_InterruptHandler:	
  1003  0067                     	ds	2
  1004  0069                     _eusartTxBufferRemaining:	
  1005  0069                     	ds	1
  1006  006A                     _timer0ReloadVal:	
  1007  006A                     	ds	1
  1008  000B                     _INTCONbits	set	11
  1009  0011                     _PIR1bits	set	17
  1010  000C                     _PORTAbits	set	12
  1011  0015                     _TMR0	set	21
  1012  0018                     _CARRY	set	24
  1013  005F                     _GIE	set	95
  1014  0095                     _OPTION_REG	set	149
  1015  0095                     _OPTION_REGbits	set	149
  1016  0099                     _OSCCON	set	153
  1017  0098                     _OSCTUNE	set	152
  1018  0091                     _PIE1bits	set	145
  1019  008C                     _TRISA	set	140
  1020  008C                     _TRISAbits	set	140
  1021  0097                     _WDTCON	set	151
  1022  011D                     _APFCON	set	285
  1023  010C                     _LATA	set	268
  1024  010C                     _LATAbits	set	268
  1025  0191                     _EEADR	set	401
  1026  018C                     _ANSELA	set	396
  1027  019F                     _BAUDCON	set	415
  1028  0195                     _EECON1	set	405
  1029  0196                     _EECON2	set	406
  1030  0193                     _EEDATA	set	403
  1031  0199                     _RCREG	set	409
  1032  019D                     _RCSTA	set	413
  1033  019D                     _RCSTAbits	set	413
  1034  019C                     _SPBRGH	set	412
  1035  019B                     _SPBRGL	set	411
  1036  019A                     _TXREG	set	410
  1037  019E                     _TXSTA	set	414
  1038  0CA8                     _RD	set	3240
  1039  0CA9                     _WR	set	3241
  1040  0CAA                     _WREN	set	3242
  1041  020C                     _WPUA	set	524
  1042                           
  1043                           	psect	bssBANK0
  1044  0020                     __pbssBANK0:	
  1045  0020                     _UartRecBuf:	
  1046  0020                     	ds	8
  1047  0028                     _ADCDelayCnt:	
  1048  0028                     	ds	2
  1049  002A                     _ADC_Value:	
  1050  002A                     	ds	2
  1051  002C                     _ADLinearVal:	
  1052  002C                     	ds	2
  1053  002E                     _ActualLength:	
  1054  002E                     	ds	2
  1055  0030                     _LedTimerCnt:	
  1056  0030                     	ds	2
  1057  0032                     _Length:	
  1058  0032                     	ds	2
  1059  0034                     _SendTmr:	
  1060  0034                     	ds	2
  1061  0036                     _m_bitShift:	
  1062  0036                     	ds	2
  1063  0038                     _m_gain:	
  1064  0038                     	ds	2
  1065  003A                     _m_i2cAddress:	
  1066  003A                     	ds	2
  1067  003C                     SendDataToMainBoardProcess@SendCount:	
  1068  003C                     	ds	1
  1069  003D                     _ADCStep:	
  1070  003D                     	ds	1
  1071  003E                     _CaliTabSendFlag:	
  1072  003E                     	ds	1
  1073  003F                     _CaliTabSize:	
  1074  003F                     	ds	1
  1075  0040                     _CalibratingFlag:	
  1076  0040                     	ds	1
  1077  0041                     _SendDataToMainBoardStep:	
  1078  0041                     	ds	1
  1079  0042                     _UartByteToBeSendCnt:	
  1080  0042                     	ds	1
  1081  0043                     _UartRecCnt:	
  1082  0043                     	ds	1
  1083  0044                     _UartSendCnt:	
  1084  0044                     	ds	1
  1085  0045                     _eusartRxCount:	
  1086  0045                     	ds	1
  1087  0046                     _eusartRxHead:	
  1088  0046                     	ds	1
  1089  0047                     _eusartRxTail:	
  1090  0047                     	ds	1
  1091  0048                     _eusartTxHead:	
  1092  0048                     	ds	1
  1093  0049                     _eusartTxTail:	
  1094  0049                     	ds	1
  1095                           
  1096                           	psect	bssBANK1
  1097  00A0                     __pbssBANK1:	
  1098  00A0                     _CaliBuf:	
  1099  00A0                     	ds	64
  1100  00E0                     _UartSendBuf:	
  1101  00E0                     	ds	8
  1102  00E8                     _eusartTxBuffer:	
  1103  00E8                     	ds	8
  1104                           
  1105                           	psect	bssBANK2
  1106  0120                     __pbssBANK2:	
  1107  0120                     _eusartRxBuffer:	
  1108  0120                     	ds	8
  1109  0128                     _CaliTab:	
  1110  0128                     	ds	68
  1111                           
  1112                           	psect	clrtext
  1113  02A6                     clear_ram0:	
  1114                           ;	Called with FSR0 containing the base address, and
  1115                           ;	WREG with the size to clear
  1116                           
  1117  02A6  0064               	clrwdt	;clear the watchdog before getting into this loop
  1118  02A7                     clrloop0:	
  1119  02A7  0180               	clrf	0	;clear RAM location pointed to by FSR
  1120  02A8  3101               	addfsr 0,1
  1121  02A9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1122  02AA  2AA7               	goto	clrloop0	;have we reached the end yet?
  1123  02AB  3400               	retlw	0	;all done for this memory range, return
  1124                           
  1125                           	psect	cstackCOMMON
  1126  0070                     __pcstackCOMMON:	
  1127  0070                     ?_isdigit:	
  1128  0070                     ?_PIN_MANAGER_Initialize:	
  1129                           ; 1 bit 
  1130                           
  1131  0070                     ??_PIN_MANAGER_Initialize:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  0070                     ?_OSCILLATOR_Initialize:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  0070                     ??_OSCILLATOR_Initialize:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  0070                     ?_WDT_Initialize:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  0070                     ??_WDT_Initialize:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  0070                     ?_TMR0_Initialize:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  0070                     ?_EUSART_Initialize:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ??_EUSART_Initialize:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ?_TMR0_ISR:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ??_TMR0_ISR:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ?_EUSART_Transmit_ISR:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ??_EUSART_Transmit_ISR:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ?_EUSART_Receive_ISR:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  0070                     ??_EUSART_Receive_ISR:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  0070                     ?_TMR0_SetInterruptHandler:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176  0070                     ?_TMR0_DefaultInterruptHandler:	
  1177                           ; 1 bytes @ 0x0
  1178                           
  1179  0070                     ??_TMR0_DefaultInterruptHandler:	
  1180                           ; 1 bytes @ 0x0
  1181                           
  1182  0070                     ?_eeprom_read:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185  0070                     ??_eeprom_read:	
  1186                           ; 1 bytes @ 0x0
  1187                           
  1188  0070                     ?_eeprom_write:	
  1189                           ; 1 bytes @ 0x0
  1190                           
  1191  0070                     ?_ads1015_init:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  0070                     ??_ads1015_init:	
  1195                           ; 1 bytes @ 0x0
  1196                           
  1197  0070                     ?_readADC_Differential_0_1_part1:	
  1198                           ; 1 bytes @ 0x0
  1199                           
  1200  0070                     ??_isdigit:	
  1201                           ; 1 bytes @ 0x0
  1202                           
  1203  0070                     ?_SYSTEM_Initialize:	
  1204                           ; 1 bytes @ 0x0
  1205                           
  1206  0070                     ?_INTERRUPT_InterruptManager:	
  1207                           ; 1 bytes @ 0x0
  1208                           
  1209  0070                     ??_INTERRUPT_InterruptManager:	
  1210                           ; 1 bytes @ 0x0
  1211                           
  1212  0070                     ?_EUSART_Read:	
  1213                           ; 1 bytes @ 0x0
  1214                           
  1215  0070                     ??_EUSART_Read:	
  1216                           ; 1 bytes @ 0x0
  1217                           
  1218  0070                     ?_EUSART_Write:	
  1219                           ; 1 bytes @ 0x0
  1220                           
  1221  0070                     ??_EUSART_Write:	
  1222                           ; 1 bytes @ 0x0
  1223                           
  1224  0070                     ?_putch:	
  1225                           ; 1 bytes @ 0x0
  1226                           
  1227  0070                     ?_UpdateCaliBuf:	
  1228                           ; 1 bytes @ 0x0
  1229                           
  1230  0070                     ?_EraseCaliDatabase:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233  0070                     ?_ConstructCaliTab:	
  1234                           ; 1 bytes @ 0x0
  1235                           
  1236  0070                     ?_CaliTabSendProcess:	
  1237                           ; 1 bytes @ 0x0
  1238                           
  1239  0070                     ?_ADCProcess:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242  0070                     ?_UartSend:	
  1243                           ; 1 bytes @ 0x0
  1244                           
  1245  0070                     ??_UartSend:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248  0070                     ?_UartSendProcess:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  0070                     ?_UartDriverRecBufferClr:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  0070                     ?_UartRecProcess:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257  0070                     ?_SendDataToMainBoardProcess:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260  0070                     ?_BaseTimeTickISR:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263  0070                     ??_BaseTimeTickISR:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  0070                     ?_main:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0070                     ?_IIC_Delay:	
  1270                           ; 1 bytes @ 0x0
  1271                           
  1272  0070                     ??_IIC_Delay:	
  1273                           ; 1 bytes @ 0x0
  1274                           
  1275  0070                     ?_IIC_Delay_Half:	
  1276                           ; 1 bytes @ 0x0
  1277                           
  1278  0070                     ??_IIC_Delay_Half:	
  1279                           ; 1 bytes @ 0x0
  1280                           
  1281  0070                     ?_StartRom:	
  1282                           ; 1 bytes @ 0x0
  1283                           
  1284  0070                     ??_StartRom:	
  1285                           ; 1 bytes @ 0x0
  1286                           
  1287  0070                     ?_StopRom:	
  1288                           ; 1 bytes @ 0x0
  1289                           
  1290  0070                     ??_StopRom:	
  1291                           ; 1 bytes @ 0x0
  1292                           
  1293  0070                     ?_mack:	
  1294                           ; 1 bytes @ 0x0
  1295                           
  1296  0070                     ??_mack:	
  1297                           ; 1 bytes @ 0x0
  1298                           
  1299  0070                     ?_IsCharOne:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0070                     ?___wmul:	
  1303                           ; 2 bytes @ 0x0
  1304                           
  1305  0070                     ?___lwdiv:	
  1306                           ; 2 bytes @ 0x0
  1307                           
  1308  0070                     ?___lmul:	
  1309                           ; 2 bytes @ 0x0
  1310                           
  1311  0070                     EUSART_Read@readValue:	
  1312                           ; 4 bytes @ 0x0
  1313                           
  1314  0070                     EUSART_Write@txData:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0070                     UartSend@SendNum:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0070                     eeprom_read@addr:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0070                     eeprom_write@value:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0070                     _isdigit$834:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0070                     ___wmul@multiplier:	
  1333                           ; 2 bytes @ 0x0
  1334                           
  1335  0070                     ___lwdiv@divisor:	
  1336                           ; 2 bytes @ 0x0
  1337                           
  1338  0070                     ___lmul@multiplier:	
  1339                           ; 2 bytes @ 0x0
  1340                           
  1341                           
  1342                           ; 4 bytes @ 0x0
  1343  0070                     	ds	1
  1344  0071                     ??_eeprom_write:	
  1345  0071                     ??_putch:	
  1346                           ; 1 bytes @ 0x1
  1347                           
  1348  0071                     ?_EEpromBufferRead:	
  1349                           ; 1 bytes @ 0x1
  1350                           
  1351  0071                     ??_UartSendProcess:	
  1352                           ; 1 bytes @ 0x1
  1353                           
  1354  0071                     ??_UartDriverRecBufferClr:	
  1355                           ; 1 bytes @ 0x1
  1356                           
  1357  0071                     putch@txData:	
  1358                           ; 1 bytes @ 0x1
  1359                           
  1360  0071                     EEpromBufferRead@ReadAddr:	
  1361                           ; 1 bytes @ 0x1
  1362                           
  1363  0071                     eeprom_write@addr:	
  1364                           ; 1 bytes @ 0x1
  1365                           
  1366  0071                     isdigit@c:	
  1367                           ; 1 bytes @ 0x1
  1368                           
  1369                           
  1370                           ; 1 bytes @ 0x1
  1371  0071                     	ds	1
  1372  0072                     ??_TMR0_Initialize:	
  1373  0072                     ??_TMR0_SetInterruptHandler:	
  1374                           ; 1 bytes @ 0x2
  1375                           
  1376  0072                     ??_SYSTEM_Initialize:	
  1377                           ; 1 bytes @ 0x2
  1378                           
  1379  0072                     ?_EEpromBuffeWirte:	
  1380                           ; 1 bytes @ 0x2
  1381                           
  1382  0072                     ??_EraseCaliDatabase:	
  1383                           ; 1 bytes @ 0x2
  1384                           
  1385  0072                     ??_IsCharOne:	
  1386                           ; 1 bytes @ 0x2
  1387                           
  1388  0072                     EEpromBuffeWirte@WriteAddr:	
  1389                           ; 1 bytes @ 0x2
  1390                           
  1391  0072                     EraseCaliDatabase@i:	
  1392                           ; 1 bytes @ 0x2
  1393                           
  1394  0072                     EEpromBufferRead@NumByteToRead:	
  1395                           ; 1 bytes @ 0x2
  1396                           
  1397  0072                     IsCharOne@retcode:	
  1398                           ; 2 bytes @ 0x2
  1399                           
  1400  0072                     ___wmul@multiplicand:	
  1401                           ; 2 bytes @ 0x2
  1402                           
  1403  0072                     ___lwdiv@dividend:	
  1404                           ; 2 bytes @ 0x2
  1405                           
  1406                           
  1407                           ; 2 bytes @ 0x2
  1408  0072                     	ds	1
  1409  0073                     EEpromBuffeWirte@NumByteToWrite:	
  1410                           
  1411                           ; 2 bytes @ 0x3
  1412  0073                     	ds	1
  1413  0074                     ??_EEpromBufferRead:	
  1414  0074                     ??___wmul:	
  1415                           ; 1 bytes @ 0x4
  1416                           
  1417  0074                     ??___lwdiv:	
  1418                           ; 1 bytes @ 0x4
  1419                           
  1420  0074                     ?_SendToRom:	
  1421                           ; 1 bytes @ 0x4
  1422                           
  1423  0074                     ?_ReceiveFromRom:	
  1424                           ; 2 bytes @ 0x4
  1425                           
  1426  0074                     SendToRom@data:	
  1427                           ; 2 bytes @ 0x4
  1428                           
  1429  0074                     ___wmul@product:	
  1430                           ; 2 bytes @ 0x4
  1431                           
  1432  0074                     ___lwdiv@quotient:	
  1433                           ; 2 bytes @ 0x4
  1434                           
  1435  0074                     ___lmul@multiplicand:	
  1436                           ; 2 bytes @ 0x4
  1437                           
  1438                           
  1439                           ; 4 bytes @ 0x4
  1440  0074                     	ds	1
  1441  0075                     ??_EEpromBuffeWirte:	
  1442                           
  1443                           ; 1 bytes @ 0x5
  1444  0075                     	ds	1
  1445  0076                     ??_SendToRom:	
  1446  0076                     ??_ReceiveFromRom:	
  1447                           ; 1 bytes @ 0x6
  1448                           
  1449  0076                     EEpromBufferRead@pBuffer:	
  1450                           ; 1 bytes @ 0x6
  1451                           
  1452  0076                     ___lwdiv@counter:	
  1453                           ; 1 bytes @ 0x6
  1454                           
  1455  0076                     SendToRom@retcode:	
  1456                           ; 1 bytes @ 0x6
  1457                           
  1458  0076                     ReceiveFromRom@m:	
  1459                           ; 2 bytes @ 0x6
  1460                           
  1461                           
  1462                           ; 2 bytes @ 0x6
  1463  0076                     	ds	1
  1464  0077                     ?___lwmod:	
  1465  0077                     EEpromBufferRead@i:	
  1466                           ; 2 bytes @ 0x7
  1467                           
  1468  0077                     EEpromBuffeWirte@pBuffer:	
  1469                           ; 1 bytes @ 0x7
  1470                           
  1471  0077                     ___lwmod@divisor:	
  1472                           ; 1 bytes @ 0x7
  1473                           
  1474                           
  1475                           ; 2 bytes @ 0x7
  1476  0077                     	ds	1
  1477  0078                     ??_UpdateCaliBuf:	
  1478  0078                     ??___lmul:	
  1479                           ; 1 bytes @ 0x8
  1480                           
  1481  0078                     EEpromBuffeWirte@i:	
  1482                           ; 1 bytes @ 0x8
  1483                           
  1484  0078                     SendToRom@count:	
  1485                           ; 1 bytes @ 0x8
  1486                           
  1487  0078                     ReceiveFromRom@count:	
  1488                           ; 2 bytes @ 0x8
  1489                           
  1490  0078                     UpdateCaliBuf@tmp1:	
  1491                           ; 2 bytes @ 0x8
  1492                           
  1493  0078                     ___lmul@product:	
  1494                           ; 4 bytes @ 0x8
  1495                           
  1496                           
  1497                           ; 4 bytes @ 0x8
  1498  0078                     	ds	1
  1499  0079                     ___lwmod@dividend:	
  1500                           
  1501                           ; 2 bytes @ 0x9
  1502  0079                     	ds	1
  1503  007A                     ??_writeRegister:	
  1504  007A                     ?_readRegister:	
  1505                           ; 1 bytes @ 0xA
  1506                           
  1507  007A                     writeRegister@i:	
  1508                           ; 2 bytes @ 0xA
  1509                           
  1510  007A                     readRegister@i2cAddress:	
  1511                           ; 2 bytes @ 0xA
  1512                           
  1513                           
  1514                           ; 2 bytes @ 0xA
  1515  007A                     	ds	1
  1516  007B                     ??___lwmod:	
  1517  007B                     ___lwmod@counter:	
  1518                           ; 1 bytes @ 0xB
  1519                           
  1520                           
  1521                           ; 1 bytes @ 0xB
  1522  007B                     	ds	1
  1523  007C                     ??_readADC_Differential_0_1_part1:	
  1524  007C                     ??_SendDataToMainBoardProcess:	
  1525                           ; 1 bytes @ 0xC
  1526                           
  1527  007C                     ??___aldiv:	
  1528                           ; 1 bytes @ 0xC
  1529                           
  1530  007C                     ??___lldiv:	
  1531                           ; 1 bytes @ 0xC
  1532                           
  1533  007C                     ?_Cali:	
  1534                           ; 1 bytes @ 0xC
  1535                           
  1536  007C                     ?_ChangeADS1115ValueToResitor:	
  1537                           ; 2 bytes @ 0xC
  1538                           
  1539  007C                     UpdateCaliBuf@i:	
  1540                           ; 2 bytes @ 0xC
  1541                           
  1542  007C                     Cali@InData:	
  1543                           ; 1 bytes @ 0xC
  1544                           
  1545  007C                     ChangeADS1115ValueToResitor@ADC_value:	
  1546                           ; 2 bytes @ 0xC
  1547                           
  1548  007C                     readRegister@reg:	
  1549                           ; 2 bytes @ 0xC
  1550                           
  1551  007C                     readADC_Differential_0_1_part1@config:	
  1552                           ; 2 bytes @ 0xC
  1553                           
  1554                           
  1555                           ; 2 bytes @ 0xC
  1556  007C                     	ds	1
  1557  007D                     ??_CaliTabSendProcess:	
  1558  007D                     ??_UartRecProcess:	
  1559                           ; 1 bytes @ 0xD
  1560                           
  1561                           
  1562                           ; 1 bytes @ 0xD
  1563  007D                     	ds	1
  1564  007E                     ??_readADC_Differential_0_1_part2:	
  1565  007E                     ??_Cali:	
  1566                           ; 1 bytes @ 0xE
  1567                           
  1568  007E                     ??_ADCProcess:	
  1569                           ; 1 bytes @ 0xE
  1570                           
  1571  007E                     ??_main:	
  1572                           ; 1 bytes @ 0xE
  1573                           
  1574  007E                     ??_readRegister:	
  1575                           ; 1 bytes @ 0xE
  1576                           
  1577                           
  1578                           	psect	cstackBANK0
  1579  004A                     __pcstackBANK0:	
  1580                           ; 1 bytes @ 0xE
  1581                           
  1582  004A                     ?_Update2CaliDatabase:	
  1583  004A                     ?_writeRegister:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  004A                     ?_printf:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  004A                     ?___aldiv:	
  1590                           ; 2 bytes @ 0x0
  1591                           
  1592  004A                     ?___lldiv:	
  1593                           ; 4 bytes @ 0x0
  1594                           
  1595  004A                     Update2CaliDatabase@ori_val:	
  1596                           ; 4 bytes @ 0x0
  1597                           
  1598  004A                     writeRegister@i2cAddress:	
  1599                           ; 2 bytes @ 0x0
  1600                           
  1601  004A                     readRegister@ret:	
  1602                           ; 2 bytes @ 0x0
  1603                           
  1604  004A                     printf@f:	
  1605                           ; 2 bytes @ 0x0
  1606                           
  1607  004A                     ___aldiv@divisor:	
  1608                           ; 2 bytes @ 0x0
  1609                           
  1610  004A                     ___lldiv@divisor:	
  1611                           ; 4 bytes @ 0x0
  1612                           
  1613                           
  1614                           ; 4 bytes @ 0x0
  1615  004A                     	ds	2
  1616  004C                     Update2CaliDatabase@ActualValue:	
  1617  004C                     writeRegister@reg:	
  1618                           ; 2 bytes @ 0x2
  1619                           
  1620  004C                     readRegister@i:	
  1621                           ; 2 bytes @ 0x2
  1622                           
  1623                           
  1624                           ; 2 bytes @ 0x2
  1625  004C                     	ds	2
  1626  004E                     ??_Update2CaliDatabase:	
  1627  004E                     ?_readADC_Differential_0_1_part2:	
  1628                           ; 1 bytes @ 0x4
  1629                           
  1630  004E                     writeRegister@value:	
  1631                           ; 2 bytes @ 0x4
  1632                           
  1633  004E                     ___aldiv@dividend:	
  1634                           ; 2 bytes @ 0x4
  1635                           
  1636  004E                     ___lldiv@dividend:	
  1637                           ; 4 bytes @ 0x4
  1638                           
  1639                           
  1640                           ; 4 bytes @ 0x4
  1641  004E                     	ds	2
  1642  0050                     readADC_Differential_0_1_part2@res:	
  1643                           
  1644                           ; 2 bytes @ 0x6
  1645  0050                     	ds	2
  1646  0052                     ___aldiv@counter:	
  1647  0052                     Update2CaliDatabase@tmp:	
  1648                           ; 1 bytes @ 0x8
  1649                           
  1650  0052                     ___lldiv@quotient:	
  1651                           ; 4 bytes @ 0x8
  1652                           
  1653                           
  1654                           ; 4 bytes @ 0x8
  1655  0052                     	ds	1
  1656  0053                     ___aldiv@sign:	
  1657                           
  1658                           ; 1 bytes @ 0x9
  1659  0053                     	ds	1
  1660  0054                     ___aldiv@quotient:	
  1661                           
  1662                           ; 4 bytes @ 0xA
  1663  0054                     	ds	2
  1664  0056                     ??_printf:	
  1665  0056                     ___lldiv@counter:	
  1666                           ; 1 bytes @ 0xC
  1667                           
  1668  0056                     Update2CaliDatabase@OriginalValue:	
  1669                           ; 1 bytes @ 0xC
  1670                           
  1671                           
  1672                           ; 2 bytes @ 0xC
  1673  0056                     	ds	1
  1674  0057                     ??_ChangeADS1115ValueToResitor:	
  1675  0057                     ?_LinearLookUpTab:	
  1676                           ; 1 bytes @ 0xD
  1677                           
  1678  0057                     LinearLookUpTab@TabSiz:	
  1679                           ; 2 bytes @ 0xD
  1680                           
  1681                           
  1682                           ; 1 bytes @ 0xD
  1683  0057                     	ds	1
  1684  0058                     ??_ConstructCaliTab:	
  1685  0058                     Update2CaliDatabase@k:	
  1686                           ; 1 bytes @ 0xE
  1687                           
  1688  0058                     LinearLookUpTab@val:	
  1689                           ; 1 bytes @ 0xE
  1690                           
  1691                           
  1692                           ; 2 bytes @ 0xE
  1693  0058                     	ds	1
  1694  0059                     Update2CaliDatabase@i:	
  1695                           
  1696                           ; 1 bytes @ 0xF
  1697  0059                     	ds	1
  1698  005A                     ??_LinearLookUpTab:	
  1699  005A                     Update2CaliDatabase@m:	
  1700                           ; 1 bytes @ 0x10
  1701                           
  1702  005A                     printf@ap:	
  1703                           ; 1 bytes @ 0x10
  1704                           
  1705                           
  1706                           ; 1 bytes @ 0x10
  1707  005A                     	ds	1
  1708  005B                     Update2CaliDatabase@j:	
  1709  005B                     printf@prec:	
  1710                           ; 1 bytes @ 0x11
  1711                           
  1712  005B                     ChangeADS1115ValueToResitor@tmp:	
  1713                           ; 1 bytes @ 0x11
  1714                           
  1715                           
  1716                           ; 4 bytes @ 0x11
  1717  005B                     	ds	1
  1718  005C                     printf@flag:	
  1719                           
  1720                           ; 1 bytes @ 0x12
  1721  005C                     	ds	1
  1722  005D                     printf@val:	
  1723                           
  1724                           ; 2 bytes @ 0x13
  1725  005D                     	ds	2
  1726  005F                     printf@width:	
  1727  005F                     LinearLookUpTab@ret:	
  1728                           ; 2 bytes @ 0x15
  1729                           
  1730                           
  1731                           ; 4 bytes @ 0x15
  1732  005F                     	ds	2
  1733  0061                     printf@c:	
  1734                           
  1735                           ; 1 bytes @ 0x17
  1736  0061                     	ds	1
  1737  0062                     _CaliTabSendProcess$1116:	
  1738                           
  1739                           ; 2 bytes @ 0x18
  1740  0062                     	ds	1
  1741  0063                     LinearLookUpTab@i:	
  1742                           
  1743                           ; 1 bytes @ 0x19
  1744  0063                     	ds	1
  1745  0064                     LinearLookUpTab@Tab:	
  1746  0064                     ConstructCaliTab@i:	
  1747                           ; 1 bytes @ 0x1A
  1748                           
  1749  0064                     _CaliTabSendProcess$1117:	
  1750                           ; 1 bytes @ 0x1A
  1751                           
  1752                           
  1753                           ; 2 bytes @ 0x1A
  1754  0064                     	ds	1
  1755  0065                     ConstructCaliTab@j:	
  1756                           
  1757                           ; 1 bytes @ 0x1B
  1758  0065                     	ds	1
  1759  0066                     CaliTabSendProcess@i:	
  1760                           
  1761                           ; 1 bytes @ 0x1C
  1762  0066                     	ds	1
  1763                           
  1764                           	psect	text2
  1765  0027                     __ptext2:	
  1766 ;; *************** function _UartRecProcess *****************
  1767 ;; Defined at:
  1768 ;;		line 508 in file "main.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;		None
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;		None
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  1    wreg      void 
  1775 ;; Registers used:
  1776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 1F/0
  1779 ;;		On exit  : 1F/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1782 ;;      Params:         0       0       0       0
  1783 ;;      Locals:         0       0       0       0
  1784 ;;      Temps:          1       0       0       0
  1785 ;;      Totals:         1       0       0       0
  1786 ;;Total ram usage:        1 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    7
  1789 ;; This function calls:
  1790 ;;		_ConstructCaliTab
  1791 ;;		_EUSART_Read
  1792 ;;		_EraseCaliDatabase
  1793 ;;		_UartDriverRecBufferClr
  1794 ;;		_printf
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           
  1801                           ;psect for function _UartRecProcess
  1802  0027                     _UartRecProcess:	
  1803                           
  1804                           ;main.c: 513: if(eusartRxCount > 0)
  1805                           
  1806                           ;incstack = 0
  1807                           ; Regs used in _UartRecProcess: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1808  0027  0845               	movf	_eusartRxCount,w	;volatile
  1809  0028  1903               	btfsc	3,2
  1810  0029  0008               	return
  1811                           
  1812                           ;main.c: 514: {
  1813                           ;main.c: 515: UartRecBuf[UartRecCnt++] = EUSART_Read();
  1814  002A  207D  3180         	fcall	_EUSART_Read
  1815  002C  00FD               	movwf	??_UartRecProcess
  1816  002D  0020               	movlb	0	; select bank0
  1817  002E  0843               	movf	_UartRecCnt,w
  1818  002F  3E20               	addlw	(low (_UartRecBuf| 0))& (0+255)
  1819  0030  0086               	movwf	6
  1820  0031  0187               	clrf	7
  1821  0032  087D               	movf	??_UartRecProcess,w
  1822  0033  0081               	movwf	1
  1823  0034  0AC3               	incf	_UartRecCnt,f
  1824                           
  1825                           ;main.c: 517: if(UartRecCnt == 1)
  1826  0035  0B43               	decfsz	_UartRecCnt,w
  1827  0036  283D               	goto	l2986
  1828                           
  1829                           ;main.c: 518: {
  1830                           ;main.c: 519: if(UartRecBuf[0] != 0xf0)
  1831  0037  30F0               	movlw	240
  1832  0038  0620               	xorwf	_UartRecBuf,w
  1833  0039                     L1:	
  1834  0039  1903               	btfsc	3,2
  1835  003A  0008               	return
  1836  003B                     l2982:	
  1837                           
  1838                           ;main.c: 520: {
  1839                           ;main.c: 521: UartRecCnt = 0;
  1840  003B  01C3               	clrf	_UartRecCnt
  1841                           
  1842                           ;main.c: 522: UartDriverRecBufferClr();
  1843  003C  2876               	ljmp	l2862
  1844  003D                     l2986:	
  1845                           
  1846                           ;main.c: 525: else if(UartRecCnt == 2)
  1847  003D  3002               	movlw	2
  1848  003E  0643               	xorwf	_UartRecCnt,w
  1849  003F  1D03               	btfss	3,2
  1850  0040  2844               	goto	l2994
  1851                           
  1852                           ;main.c: 526: {
  1853                           ;main.c: 527: if(UartRecBuf[1] != 0xf1)
  1854  0041  30F1               	movlw	241
  1855  0042  0621               	xorwf	_UartRecBuf+1,w
  1856  0043  2839               	goto	L1
  1857  0044                     l2994:	
  1858                           ;main.c: 531: }
  1859                           ;main.c: 532: }
  1860                           
  1861                           
  1862                           ;main.c: 534: else if(UartRecCnt == 4)
  1863  0044  3004               	movlw	4
  1864  0045  0643               	xorwf	_UartRecCnt,w
  1865  0046  1D03               	btfss	3,2
  1866  0047  2871               	goto	l3022
  1867                           
  1868                           ;main.c: 535: {
  1869                           ;main.c: 536: UartRecCnt = 0;
  1870  0048  01C3               	clrf	_UartRecCnt
  1871                           
  1872                           ;main.c: 537: UartDriverRecBufferClr();
  1873  0049  2076  3180         	fcall	_UartDriverRecBufferClr
  1874                           
  1875                           ;main.c: 540: if((UartRecBuf[2] == 0xff)&&(UartRecBuf[3] == 0xff))
  1876  004B  0F22               	incfsz	_UartRecBuf+2,w
  1877  004C  2853               	goto	l3008
  1878  004D  0F23               	incfsz	_UartRecBuf+3,w
  1879  004E  2853               	goto	l3008
  1880                           
  1881                           ;main.c: 541: {
  1882                           ;main.c: 542: EraseCaliDatabase();
  1883  004F  318B  231F  3180   	fcall	_EraseCaliDatabase
  1884                           
  1885                           ;main.c: 543: ConstructCaliTab();
  1886  0052  2894               	ljmp	l2678
  1887  0053                     l3008:	
  1888                           ;main.c: 544: }
  1889                           
  1890                           
  1891                           ;main.c: 546: else if((UartRecBuf[2] == 0xfe)&&(UartRecBuf[3] == 0xfe))
  1892  0053  30FE               	movlw	254
  1893  0054  0622               	xorwf	_UartRecBuf+2,w
  1894  0055  1D03               	btfss	3,2
  1895  0056  285E               	goto	l3014
  1896  0057  30FE               	movlw	254
  1897  0058  0623               	xorwf	_UartRecBuf+3,w
  1898  0059  1D03               	btfss	3,2
  1899  005A  285E               	goto	l3014
  1900                           
  1901                           ;main.c: 547: {
  1902                           ;main.c: 548: CaliTabSendFlag = 1;
  1903  005B  01BE               	clrf	_CaliTabSendFlag
  1904  005C  0ABE               	incf	_CaliTabSendFlag,f
  1905                           
  1906                           ;main.c: 549: }
  1907  005D  0008               	return
  1908  005E                     l3014:	
  1909                           
  1910                           ;main.c: 551: else
  1911                           ;main.c: 552: {
  1912                           ;main.c: 554: if(CalibratingFlag == 0)
  1913  005E  0840               	movf	_CalibratingFlag,w
  1914  005F  1D03               	btfss	3,2
  1915  0060  0008               	return
  1916                           
  1917                           ;main.c: 555: {
  1918                           ;main.c: 556: ActualLength = ((uint16_t)UartRecBuf[2] << 8) | ((uint16_t)UartRecBuf[3]);
  1919  0061  0822               	movf	_UartRecBuf+2,w
  1920  0062  00AF               	movwf	_ActualLength+1
  1921  0063  0823               	movf	_UartRecBuf+3,w
  1922  0064  00AE               	movwf	_ActualLength
  1923  0065  3047               	movlw	low (STR_3| (0+32768))
  1924                           
  1925                           ;main.c: 557: CalibratingFlag = 1;
  1926  0066  01C0               	clrf	_CalibratingFlag
  1927  0067  0AC0               	incf	_CalibratingFlag,f
  1928                           
  1929                           ;main.c: 564: printf("The Cali value is: %d mm\r\n",ActualLength);
  1930  0068  00CA               	movwf	printf@f
  1931  0069  3082               	movlw	high (STR_3| (0+32768))
  1932  006A  00CB               	movwf	printf@f+1
  1933  006B  082F               	movf	_ActualLength+1,w
  1934  006C  00CD               	movwf	?_printf+3
  1935  006D  082E               	movf	_ActualLength,w
  1936  006E  00CC               	movwf	?_printf+2
  1937  006F  318B  2B8C         	ljmp	l2714
  1938  0071                     l3022:	
  1939                           
  1940                           ;main.c: 568: else if(UartRecCnt >= 8)
  1941  0071  3008               	movlw	8
  1942  0072  0243               	subwf	_UartRecCnt,w
  1943  0073  1C03               	skipc
  1944  0074  0008               	return
  1945  0075  283B               	goto	l2982
  1946  0076                     __end_of_UartRecProcess:	
  1947  0076                     __ptext3:	
  1948 ;; *************** function _UartDriverRecBufferClr *****************
  1949 ;; Defined at:
  1950 ;;		line 497 in file "main.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  1    wreg      void 
  1957 ;; Registers used:
  1958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 1F/0
  1961 ;;		On exit  : 1F/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1964 ;;      Params:         0       0       0       0
  1965 ;;      Locals:         0       0       0       0
  1966 ;;      Temps:          0       0       0       0
  1967 ;;      Totals:         0       0       0       0
  1968 ;;Total ram usage:        0 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    4
  1971 ;; This function calls:
  1972 ;;		_EUSART_Read
  1973 ;; This function is called by:
  1974 ;;		_UartRecProcess
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           
  1979                           ;psect for function _UartDriverRecBufferClr
  1980  0076                     _UartDriverRecBufferClr:	
  1981  0076                     l2862:	
  1982                           ;main.c: 501: while(eusartRxCount)
  1983                           
  1984                           ;incstack = 0
  1985                           ; Regs used in _UartDriverRecBufferClr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  1986                           
  1987  0076  0020               	movlb	0	; select bank0
  1988  0077  0845               	movf	_eusartRxCount,w	;volatile
  1989  0078  1903               	btfsc	3,2
  1990  0079  0008               	return
  1991                           
  1992                           ;main.c: 502: {
  1993                           ;main.c: 503: EUSART_Read();
  1994  007A  207D  3180         	fcall	_EUSART_Read
  1995  007C  2876               	goto	l2862
  1996  007D                     __end_of_UartDriverRecBufferClr:	
  1997  007D                     __ptext4:	
  1998 ;; *************** function _EUSART_Read *****************
  1999 ;; Defined at:
  2000 ;;		line 112 in file "mcc_generated_files/eusart.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  readValue       1    0[COMMON] unsigned char 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      unsigned char 
  2007 ;; Registers used:
  2008 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2009 ;; Tracked objects:
  2010 ;;		On entry : 1F/0
  2011 ;;		On exit  : 1F/1
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2014 ;;      Params:         0       0       0       0
  2015 ;;      Locals:         1       0       0       0
  2016 ;;      Temps:          0       0       0       0
  2017 ;;      Totals:         1       0       0       0
  2018 ;;Total ram usage:        1 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    3
  2021 ;; This function calls:
  2022 ;;		Nothing
  2023 ;; This function is called by:
  2024 ;;		_UartDriverRecBufferClr
  2025 ;;		_UartRecProcess
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           
  2030                           ;psect for function _EUSART_Read
  2031  007D                     _EUSART_Read:	
  2032  007D                     l2284:	
  2033                           ;eusart.c: 116: while(0 == eusartRxCount)
  2034                           
  2035                           ;incstack = 0
  2036                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  2037                           
  2038  007D  0845               	movf	_eusartRxCount,w	;volatile
  2039  007E  1903               	btfsc	3,2
  2040  007F  287D               	goto	l2284
  2041                           
  2042                           ;eusart.c: 118: }
  2043                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  2044  0080  0847               	movf	_eusartRxTail,w
  2045  0081  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  2046  0082  0086               	movwf	6
  2047  0083  3001               	movlw	1	; select bank2/3
  2048  0084  0087               	movwf	7
  2049  0085  0801               	movf	1,w
  2050  0086  00F0               	movwf	EUSART_Read@readValue
  2051  0087  3008               	movlw	8
  2052  0088  0AC7               	incf	_eusartRxTail,f
  2053                           
  2054                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  2055  0089  0247               	subwf	_eusartRxTail,w
  2056  008A  1803               	btfsc	3,0
  2057                           
  2058                           ;eusart.c: 122: {
  2059                           ;eusart.c: 123: eusartRxTail = 0;
  2060  008B  01C7               	clrf	_eusartRxTail
  2061                           
  2062                           ;eusart.c: 124: }
  2063                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  2064  008C  0021               	movlb	1	; select bank1
  2065  008D  1291               	bcf	17,5	;volatile
  2066                           
  2067                           ;eusart.c: 126: eusartRxCount--;
  2068  008E  0020               	movlb	0	; select bank0
  2069  008F  03C5               	decf	_eusartRxCount,f	;volatile
  2070                           
  2071                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  2072  0090  0021               	movlb	1	; select bank1
  2073  0091  1691               	bsf	17,5	;volatile
  2074                           
  2075                           ;eusart.c: 129: return readValue;
  2076  0092  0870               	movf	EUSART_Read@readValue,w
  2077  0093  0008               	return
  2078  0094                     __end_of_EUSART_Read:	
  2079  0094                     __ptext5:	
  2080 ;; *************** function _ConstructCaliTab *****************
  2081 ;; Defined at:
  2082 ;;		line 313 in file "main.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;		None
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  j               1   27[BANK0 ] unsigned char 
  2087 ;;  i               1   26[BANK0 ] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 1F/0
  2094 ;;		On exit  : 1F/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2097 ;;      Params:         0       0       0       0
  2098 ;;      Locals:         0       2       0       0
  2099 ;;      Temps:          0      12       0       0
  2100 ;;      Totals:         0      14       0       0
  2101 ;;Total ram usage:       14 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    6
  2104 ;; This function calls:
  2105 ;;		_UpdateCaliBuf
  2106 ;;		___aldiv
  2107 ;;		___lmul
  2108 ;; This function is called by:
  2109 ;;		_UartRecProcess
  2110 ;;		_main
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           
  2115                           ;psect for function _ConstructCaliTab
  2116  0094                     _ConstructCaliTab:	
  2117  0094                     l2678:	
  2118                           ;incstack = 0
  2119                           ; Regs used in _ConstructCaliTab: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2120                           
  2121                           
  2122                           ;main.c: 315: uint8_t i, j=0;
  2123  0094  01E5               	clrf	ConstructCaliTab@j
  2124                           
  2125                           ;main.c: 318: UpdateCaliBuf();
  2126  0095  318C  246F  3180   	fcall	_UpdateCaliBuf
  2127                           
  2128                           ;main.c: 320: for(i = 0 ; i < 16 ; i++)
  2129  0098  0020               	movlb	0	; select bank0
  2130  0099  01E4               	clrf	ConstructCaliTab@i
  2131  009A                     l2688:	
  2132                           
  2133                           ;main.c: 321: {
  2134                           ;main.c: 322: if((CaliBuf[i].OriginalValue <= 52800) && (CaliBuf[i].ActualValue <= 1200)
      +                          )
  2135  009A  0864               	movf	ConstructCaliTab@i,w
  2136  009B  318F  2746  3180   	fcall	PL16	;call to abstracted procedure
  2137  009E  3F40               	moviw [0]fsr1
  2138  009F  00D8               	movwf	??_ConstructCaliTab
  2139  00A0  3F41               	moviw [1]fsr1
  2140  00A1  00D9               	movwf	??_ConstructCaliTab+1
  2141  00A2  30CE               	movlw	206
  2142  00A3  0259               	subwf	??_ConstructCaliTab+1,w
  2143  00A4  3041               	movlw	65
  2144  00A5  1903               	skipnz
  2145  00A6  0258               	subwf	??_ConstructCaliTab,w
  2146  00A7  1803               	skipnc
  2147  00A8  28D6               	goto	l2696
  2148  00A9  0864               	movf	ConstructCaliTab@i,w
  2149  00AA  318F  2740  3180   	fcall	PL14	;call to abstracted procedure
  2150  00AD  00D8               	movwf	??_ConstructCaliTab
  2151  00AE  3F41               	moviw [1]fsr1
  2152  00AF  00D9               	movwf	??_ConstructCaliTab+1
  2153  00B0  3004               	movlw	4
  2154  00B1  0259               	subwf	??_ConstructCaliTab+1,w
  2155  00B2  30B1               	movlw	177
  2156  00B3  1903               	skipnz
  2157  00B4  0258               	subwf	??_ConstructCaliTab,w
  2158  00B5  1803               	skipnc
  2159  00B6  28D6               	goto	l2696
  2160                           
  2161                           ;main.c: 323: {
  2162                           ;main.c: 324: CaliTab[j].OriginalValue = CaliBuf[i].OriginalValue;
  2163  00B7  0864               	movf	ConstructCaliTab@i,w
  2164  00B8  0709               	addwf	9,w
  2165  00B9  0709               	addwf	9,w
  2166  00BA  3EA0               	addlw	(low (_CaliBuf| 0))& (0+255)
  2167  00BB  0086               	movwf	6
  2168  00BC  0865               	movf	ConstructCaliTab@j,w
  2169  00BD  0709               	addwf	9,w
  2170  00BE  0709               	addwf	9,w
  2171  00BF  3E28               	addlw	(low (_CaliTab| (0+256)))& (0+255)
  2172  00C0  0084               	movwf	4
  2173  00C1  3001               	movlw	1	; select bank2/3
  2174  00C2  0085               	movwf	5
  2175  00C3  3F40               	moviw [0]fsr1
  2176  00C4  3F80               	movwi [0]fsr0
  2177  00C5  3F41               	moviw [1]fsr1
  2178  00C6  3F81               	movwi [1]fsr0
  2179                           
  2180                           ;main.c: 325: CaliTab[j].ActualValue = CaliBuf[i].ActualValue;
  2181  00C7  0864               	movf	ConstructCaliTab@i,w
  2182  00C8  0709               	addwf	9,w
  2183  00C9  0709               	addwf	9,w
  2184  00CA  3EA2               	addlw	(low ((_CaliBuf| 0+2)))& (0+255)
  2185  00CB  0086               	movwf	6
  2186  00CC  0865               	movf	ConstructCaliTab@j,w
  2187  00CD  0709               	addwf	9,w
  2188  00CE  0709               	addwf	9,w
  2189  00CF  3E2A               	addlw	(low ((_CaliTab| (0+256)+2)))& (0+255)
  2190  00D0  0084               	movwf	4
  2191  00D1  3F40               	moviw [0]fsr1
  2192  00D2  3F80               	movwi [0]fsr0
  2193  00D3  3F41               	moviw [1]fsr1
  2194  00D4  3F81               	movwi [1]fsr0
  2195                           
  2196                           ;main.c: 326: j++;
  2197  00D5  0AE5               	incf	ConstructCaliTab@j,f
  2198  00D6                     l2696:	
  2199  00D6  3010               	movlw	16
  2200  00D7  0AE4               	incf	ConstructCaliTab@i,f
  2201  00D8  0264               	subwf	ConstructCaliTab@i,w
  2202  00D9  1C03               	skipc
  2203  00DA  289A               	goto	l2688
  2204                           
  2205                           ;main.c: 327: }
  2206                           ;main.c: 328: }
  2207                           ;main.c: 331: if(j == 0)
  2208  00DB  0865               	movf	ConstructCaliTab@j,w
  2209  00DC  1D03               	btfss	3,2
  2210  00DD  28E1               	goto	l2704
  2211  00DE                     l2702:	
  2212                           
  2213                           ;main.c: 332: {
  2214                           ;main.c: 333: CaliTabSize = j;
  2215  00DE  0865               	movf	ConstructCaliTab@j,w
  2216  00DF  00BF               	movwf	_CaliTabSize
  2217                           
  2218                           ;main.c: 334: }
  2219  00E0  0008               	return
  2220  00E1                     l2704:	
  2221                           
  2222                           ;main.c: 336: else if(j == 1)
  2223  00E1  0B65               	decfsz	ConstructCaliTab@j,w
  2224  00E2  28E4               	goto	l2708
  2225  00E3  28DE               	goto	l2702
  2226  00E4                     l2708:	
  2227                           
  2228                           ;main.c: 341: else
  2229                           ;main.c: 342: {
  2230                           ;main.c: 343: CaliTabSize = j+1;
  2231  00E4  0865               	movf	ConstructCaliTab@j,w
  2232  00E5  3E01               	addlw	1
  2233  00E6  00BF               	movwf	_CaliTabSize
  2234                           
  2235                           ;main.c: 345: CaliTab[j].OriginalValue = 52800;
  2236  00E7  0865               	movf	ConstructCaliTab@j,w
  2237  00E8  0709               	addwf	9,w
  2238  00E9  0709               	addwf	9,w
  2239  00EA  3E28               	addlw	(low (_CaliTab| (0+256)))& (0+255)
  2240  00EB  0086               	movwf	6
  2241  00EC  3001               	movlw	1	; select bank2/3
  2242  00ED  0087               	movwf	7
  2243  00EE  3040               	movlw	64
  2244  00EF  3FC0               	movwi [0]fsr1
  2245  00F0  30CE               	movlw	206
  2246  00F1  3FC1               	movwi [1]fsr1
  2247                           
  2248                           ;main.c: 346: CaliTab[j].ActualValue = ((CaliTab[j-1].ActualValue-CaliTab[j-2].ActualVal
      +                          ue)*(52800 - CaliTab[j-1].OriginalValue)) /(CaliTab[j-1].OriginalValue - CaliTab[j-2].Or
      +                          iginalValue) + CaliTab[j-1].ActualValue;
  2249  00F2  0865               	movf	ConstructCaliTab@j,w
  2250  00F3  0709               	addwf	9,w
  2251  00F4  0709               	addwf	9,w
  2252  00F5  3E26               	addlw	(low ((_CaliTab| (0+256)+254)))& (0+255)
  2253  00F6  0086               	movwf	6
  2254  00F7  21C9  3180         	fcall	PL44	;call to abstracted procedure
  2255  00F9  3001               	movlw	1	; select bank2/3
  2256  00FA  0085               	movwf	5
  2257  00FB  3F00               	moviw [0]fsr0
  2258  00FC  00D8               	movwf	??_ConstructCaliTab
  2259  00FD  3F01               	moviw [1]fsr0
  2260  00FE  00D9               	movwf	??_ConstructCaliTab+1
  2261  00FF  0865               	movf	ConstructCaliTab@j,w
  2262  0100  0709               	addwf	9,w
  2263  0101  0709               	addwf	9,w
  2264  0102  3E20               	addlw	(low ((_CaliTab| (0+256)+248)))& (0+255)
  2265  0103  0084               	movwf	4
  2266  0104  3F00               	moviw [0]fsr0
  2267  0105  0258               	subwf	??_ConstructCaliTab,w
  2268  0106  00CA               	movwf	___aldiv@divisor
  2269  0107  3F01               	moviw [1]fsr0
  2270  0108  3B59               	subwfb	??_ConstructCaliTab+1,w
  2271  0109  00CB               	movwf	___aldiv@divisor+1
  2272  010A  30CE               	movlw	206
  2273  010B  01CC               	clrf	___aldiv@divisor+2
  2274  010C  01CD               	clrf	___aldiv@divisor+3
  2275  010D  21C3  3180         	fcall	PL40	;call to abstracted procedure
  2276  010F  21C9               	fcall	PL44	;call to abstracted procedure
  2277  0110  3F00               	moviw [0]fsr0
  2278  0111  00DA               	movwf	??_ConstructCaliTab+2
  2279  0112  3F01               	moviw [1]fsr0
  2280  0113  00DB               	movwf	??_ConstructCaliTab+3
  2281  0114  085A               	movf	??_ConstructCaliTab+2,w
  2282  0115  00DC               	movwf	??_ConstructCaliTab+4
  2283  0116  085B               	movf	??_ConstructCaliTab+3,w
  2284  0117  00DD               	movwf	??_ConstructCaliTab+5
  2285  0118  01DE               	clrf	??_ConstructCaliTab+6
  2286  0119  01DF               	clrf	??_ConstructCaliTab+7
  2287  011A  085C               	movf	??_ConstructCaliTab+4,w
  2288  011B  02F4               	subwf	___lmul@multiplicand,f
  2289  011C  085D               	movf	??_ConstructCaliTab+5,w
  2290  011D  3BF5               	subwfb	___lmul@multiplicand+1,f
  2291  011E  085E               	movf	??_ConstructCaliTab+6,w
  2292  011F  3BF6               	subwfb	___lmul@multiplicand+2,f
  2293  0120  085F               	movf	??_ConstructCaliTab+7,w
  2294  0121  3BF7               	subwfb	___lmul@multiplicand+3,f
  2295  0122  0865               	movf	ConstructCaliTab@j,w
  2296  0123  0709               	addwf	9,w
  2297  0124  0709               	addwf	9,w
  2298  0125  3E26               	addlw	(low ((_CaliTab| (0+256)+254)))& (0+255)
  2299  0126  0084               	movwf	4
  2300  0127  3F00               	moviw [0]fsr0
  2301  0128  00E0               	movwf	??_ConstructCaliTab+8
  2302  0129  3F01               	moviw [1]fsr0
  2303  012A  00E1               	movwf	??_ConstructCaliTab+9
  2304  012B  0865               	movf	ConstructCaliTab@j,w
  2305  012C  0709               	addwf	9,w
  2306  012D  0709               	addwf	9,w
  2307  012E  3E22               	addlw	(low ((_CaliTab| (0+256)+250)))& (0+255)
  2308  012F  0084               	movwf	4
  2309  0130  3F00               	moviw [0]fsr0
  2310  0131  0260               	subwf	??_ConstructCaliTab+8,w
  2311  0132  00F0               	movwf	___lmul@multiplier
  2312  0133  3F01               	moviw [1]fsr0
  2313  0134  3B61               	subwfb	??_ConstructCaliTab+9,w
  2314  0135  00F1               	movwf	___lmul@multiplier+1
  2315  0136  01F2               	clrf	___lmul@multiplier+2
  2316  0137  01F3               	clrf	___lmul@multiplier+3
  2317  0138  3189  2175  3180   	fcall	___lmul
  2318  013B  0873               	movf	?___lmul+3,w
  2319  013C  0020               	movlb	0	; select bank0
  2320  013D  00D1               	movwf	___aldiv@dividend+3
  2321  013E  0872               	movf	?___lmul+2,w
  2322  013F  00D0               	movwf	___aldiv@dividend+2
  2323  0140  0871               	movf	?___lmul+1,w
  2324  0141  00CF               	movwf	___aldiv@dividend+1
  2325  0142  0870               	movf	?___lmul,w
  2326  0143  00CE               	movwf	___aldiv@dividend
  2327  0144  2157               	fcall	___aldiv
  2328  0145  3F40               	moviw [0]fsr1
  2329  0146  074A               	addwf	?___aldiv,w
  2330  0147  00E2               	movwf	??_ConstructCaliTab+10
  2331  0148  3F41               	moviw [1]fsr1
  2332  0149  3D4B               	addwfc	?___aldiv+1,w
  2333  014A  00E3               	movwf	??_ConstructCaliTab+11
  2334  014B  0865               	movf	ConstructCaliTab@j,w
  2335  014C  0709               	addwf	9,w
  2336  014D  0709               	addwf	9,w
  2337  014E  3E2A               	addlw	(low ((_CaliTab| (0+256)+2)))& (0+255)
  2338  014F  0086               	movwf	6
  2339  0150  3001               	movlw	1	; select bank2/3
  2340  0151  0087               	movwf	7
  2341  0152  0862               	movf	??_ConstructCaliTab+10,w
  2342  0153  3FC0               	movwi [0]fsr1
  2343  0154  0863               	movf	??_ConstructCaliTab+11,w
  2344  0155  3FC1               	movwi [1]fsr1
  2345  0156  0008               	return
  2346  0157                     __end_of_ConstructCaliTab:	
  2347  0157                     __ptext6:	
  2348 ;; *************** function ___aldiv *****************
  2349 ;; Defined at:
  2350 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  divisor         4    0[BANK0 ] long 
  2353 ;;  dividend        4    4[BANK0 ] long 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  quotient        4   10[BANK0 ] long 
  2356 ;;  sign            1    9[BANK0 ] unsigned char 
  2357 ;;  counter         1    8[BANK0 ] unsigned char 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  4    0[BANK0 ] long 
  2360 ;; Registers used:
  2361 ;;		wreg, status,2, status,0
  2362 ;; Tracked objects:
  2363 ;;		On entry : 1F/0
  2364 ;;		On exit  : 1F/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2367 ;;      Params:         0       8       0       0
  2368 ;;      Locals:         0       6       0       0
  2369 ;;      Temps:          0       0       0       0
  2370 ;;      Totals:         0      14       0       0
  2371 ;;Total ram usage:       14 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    3
  2374 ;; This function calls:
  2375 ;;		Nothing
  2376 ;; This function is called by:
  2377 ;;		_ConstructCaliTab
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           
  2382                           ;psect for function ___aldiv
  2383  0157                     ___aldiv:	
  2384                           
  2385                           ;incstack = 0
  2386                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2387  0157  01D3               	clrf	___aldiv@sign
  2388  0158  1FCD               	btfss	___aldiv@divisor+3,7
  2389  0159  2967               	goto	l746
  2390  015A  09CA               	comf	___aldiv@divisor,f
  2391  015B  09CB               	comf	___aldiv@divisor+1,f
  2392  015C  09CC               	comf	___aldiv@divisor+2,f
  2393  015D  09CD               	comf	___aldiv@divisor+3,f
  2394  015E  0ACA               	incf	___aldiv@divisor,f
  2395  015F  1903               	skipnz
  2396  0160  0ACB               	incf	___aldiv@divisor+1,f
  2397  0161  1903               	skipnz
  2398  0162  0ACC               	incf	___aldiv@divisor+2,f
  2399  0163  1903               	skipnz
  2400  0164  0ACD               	incf	___aldiv@divisor+3,f
  2401  0165  01D3               	clrf	___aldiv@sign
  2402  0166  0AD3               	incf	___aldiv@sign,f
  2403  0167                     l746:	
  2404  0167  1FD1               	btfss	___aldiv@dividend+3,7
  2405  0168  2976               	goto	l2474
  2406  0169  09CE               	comf	___aldiv@dividend,f
  2407  016A  09CF               	comf	___aldiv@dividend+1,f
  2408  016B  09D0               	comf	___aldiv@dividend+2,f
  2409  016C  09D1               	comf	___aldiv@dividend+3,f
  2410  016D  0ACE               	incf	___aldiv@dividend,f
  2411  016E  1903               	skipnz
  2412  016F  0ACF               	incf	___aldiv@dividend+1,f
  2413  0170  1903               	skipnz
  2414  0171  0AD0               	incf	___aldiv@dividend+2,f
  2415  0172  1903               	skipnz
  2416  0173  0AD1               	incf	___aldiv@dividend+3,f
  2417  0174  3001               	movlw	1
  2418  0175  06D3               	xorwf	___aldiv@sign,f
  2419  0176                     l2474:	
  2420  0176  01D4               	clrf	___aldiv@quotient
  2421  0177  01D5               	clrf	___aldiv@quotient+1
  2422  0178  01D6               	clrf	___aldiv@quotient+2
  2423  0179  01D7               	clrf	___aldiv@quotient+3
  2424  017A  084D               	movf	___aldiv@divisor+3,w
  2425  017B  044C               	iorwf	___aldiv@divisor+2,w
  2426  017C  044B               	iorwf	___aldiv@divisor+1,w
  2427  017D  044A               	iorwf	___aldiv@divisor,w
  2428  017E  1903               	skipnz
  2429  017F  29AC               	goto	l2496
  2430  0180  01D2               	clrf	___aldiv@counter
  2431  0181                     L2:	
  2432  0181  0AD2               	incf	___aldiv@counter,f
  2433  0182  1BCD               	btfsc	___aldiv@divisor+3,7
  2434  0183  2989               	goto	l2484
  2435  0184  35CA               	lslf	___aldiv@divisor,f
  2436  0185  0DCB               	rlf	___aldiv@divisor+1,f
  2437  0186  0DCC               	rlf	___aldiv@divisor+2,f
  2438  0187  0DCD               	rlf	___aldiv@divisor+3,f
  2439  0188  2981               	goto	L2
  2440  0189                     l2484:	
  2441  0189  35D4               	lslf	___aldiv@quotient,f
  2442  018A  0DD5               	rlf	___aldiv@quotient+1,f
  2443  018B  0DD6               	rlf	___aldiv@quotient+2,f
  2444  018C  0DD7               	rlf	___aldiv@quotient+3,f
  2445  018D  084D               	movf	___aldiv@divisor+3,w
  2446  018E  0251               	subwf	___aldiv@dividend+3,w
  2447  018F  1D03               	skipz
  2448  0190  299B               	goto	u1785
  2449  0191  084C               	movf	___aldiv@divisor+2,w
  2450  0192  0250               	subwf	___aldiv@dividend+2,w
  2451  0193  1D03               	skipz
  2452  0194  299B               	goto	u1785
  2453  0195  084B               	movf	___aldiv@divisor+1,w
  2454  0196  024F               	subwf	___aldiv@dividend+1,w
  2455  0197  1D03               	skipz
  2456  0198  299B               	goto	u1785
  2457  0199  084A               	movf	___aldiv@divisor,w
  2458  019A  024E               	subwf	___aldiv@dividend,w
  2459  019B                     u1785:	
  2460  019B  1C03               	skipc
  2461  019C  29A6               	goto	l2492
  2462  019D  084A               	movf	___aldiv@divisor,w
  2463  019E  02CE               	subwf	___aldiv@dividend,f
  2464  019F  084B               	movf	___aldiv@divisor+1,w
  2465  01A0  3BCF               	subwfb	___aldiv@dividend+1,f
  2466  01A1  084C               	movf	___aldiv@divisor+2,w
  2467  01A2  3BD0               	subwfb	___aldiv@dividend+2,f
  2468  01A3  084D               	movf	___aldiv@divisor+3,w
  2469  01A4  3BD1               	subwfb	___aldiv@dividend+3,f
  2470  01A5  1454               	bsf	___aldiv@quotient,0
  2471  01A6                     l2492:	
  2472  01A6  36CD               	lsrf	___aldiv@divisor+3,f
  2473  01A7  0CCC               	rrf	___aldiv@divisor+2,f
  2474  01A8  0CCB               	rrf	___aldiv@divisor+1,f
  2475  01A9  0CCA               	rrf	___aldiv@divisor,f
  2476  01AA  0BD2               	decfsz	___aldiv@counter,f
  2477  01AB  2989               	goto	l2484
  2478  01AC                     l2496:	
  2479  01AC  0853               	movf	___aldiv@sign,w
  2480  01AD  1903               	btfsc	3,2
  2481  01AE  29BA               	goto	l2500
  2482  01AF  09D4               	comf	___aldiv@quotient,f
  2483  01B0  09D5               	comf	___aldiv@quotient+1,f
  2484  01B1  09D6               	comf	___aldiv@quotient+2,f
  2485  01B2  09D7               	comf	___aldiv@quotient+3,f
  2486  01B3  0AD4               	incf	___aldiv@quotient,f
  2487  01B4  1903               	skipnz
  2488  01B5  0AD5               	incf	___aldiv@quotient+1,f
  2489  01B6  1903               	skipnz
  2490  01B7  0AD6               	incf	___aldiv@quotient+2,f
  2491  01B8  1903               	skipnz
  2492  01B9  0AD7               	incf	___aldiv@quotient+3,f
  2493  01BA                     l2500:	
  2494  01BA  0857               	movf	___aldiv@quotient+3,w
  2495  01BB  00CD               	movwf	?___aldiv+3
  2496  01BC  0856               	movf	___aldiv@quotient+2,w
  2497  01BD  00CC               	movwf	?___aldiv+2
  2498  01BE  0855               	movf	___aldiv@quotient+1,w
  2499  01BF  00CB               	movwf	?___aldiv+1
  2500  01C0  0854               	movf	___aldiv@quotient,w
  2501  01C1  00CA               	movwf	?___aldiv
  2502  01C2  0008               	return
  2503  01C3                     __end_of___aldiv:	
  2504  01C3                     PL40:	
  2505  01C3  01F7               	clrf	___lmul@multiplicand+3
  2506  01C4  01F6               	clrf	___lmul@multiplicand+2
  2507  01C5  00F5               	movwf	___lmul@multiplicand+1
  2508  01C6  3040               	movlw	64
  2509  01C7  00F4               	movwf	___lmul@multiplicand
  2510  01C8  0008               	return
  2511  01C9                     __end_ofPL40:	
  2512  01C9                     PL44:	
  2513  01C9  0865               	movf	ConstructCaliTab@j,w
  2514  01CA  0709               	addwf	9,w
  2515  01CB  0709               	addwf	9,w
  2516  01CC  3E24               	addlw	(low ((_CaliTab| (0+256)+252)))& (0+255)
  2517  01CD  0084               	movwf	4
  2518  01CE  0008               	return
  2519  01CF                     __end_ofPL44:	
  2520                           
  2521                           	psect	text47
  2522  0801                     __ptext47:	
  2523 ;; *************** function _LinearLookUpTab *****************
  2524 ;; Defined at:
  2525 ;;		line 148 in file "main.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  Tab             1    wreg     PTR struct .
  2528 ;;		 -> CaliTab(68), 
  2529 ;;  TabSiz          1   13[BANK0 ] unsigned char 
  2530 ;;  val             2   14[BANK0 ] unsigned int 
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  Tab             1   26[BANK0 ] PTR struct .
  2533 ;;		 -> CaliTab(68), 
  2534 ;;  ret             4   21[BANK0 ] unsigned long 
  2535 ;;  i               1   25[BANK0 ] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  2   13[BANK0 ] unsigned int 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 1F/0
  2542 ;;		On exit  : 1F/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2545 ;;      Params:         0       3       0       0
  2546 ;;      Locals:         0       6       0       0
  2547 ;;      Temps:          0       5       0       0
  2548 ;;      Totals:         0      14       0       0
  2549 ;;Total ram usage:       14 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    4
  2552 ;; This function calls:
  2553 ;;		___lldiv
  2554 ;;		___lmul
  2555 ;; This function is called by:
  2556 ;;		_Cali
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _LinearLookUpTab
  2562  0801                     _LinearLookUpTab:	
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _LinearLookUpTab: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2566                           ;LinearLookUpTab@Tab stored from wreg
  2567  0801  00E4               	movwf	LinearLookUpTab@Tab
  2568                           
  2569                           ;main.c: 150: uint8_t i;
  2570                           ;main.c: 151: uint32_t ret;
  2571                           ;main.c: 155: if(val < Tab[0].OriginalValue)
  2572  0802  277C  3188         	fcall	PL32	;call to abstracted procedure
  2573  0804  0259               	subwf	LinearLookUpTab@val+1,w
  2574  0805  1D03               	skipz
  2575  0806  2809               	goto	u1545
  2576  0807  085A               	movf	??_LinearLookUpTab,w
  2577  0808  0258               	subwf	LinearLookUpTab@val,w
  2578  0809                     u1545:	
  2579  0809  1803               	skipnc
  2580  080A  282F               	goto	l2318
  2581                           
  2582                           ;main.c: 156: {
  2583                           ;main.c: 157: ret = ((((uint32_t)val - 0) * ((uint32_t)Tab[0].ActualValue - 0)) / ((uint
      +                          32_t)Tab[0].OriginalValue - 0)) + 0;
  2584  080B  0864               	movf	LinearLookUpTab@Tab,w
  2585  080C  277C  3188         	fcall	PL32	;call to abstracted procedure
  2586  080E  085A               	movf	??_LinearLookUpTab,w
  2587  080F  00CA               	movwf	___lldiv@divisor
  2588  0810  085B               	movf	??_LinearLookUpTab+1,w
  2589  0811  00CB               	movwf	___lldiv@divisor+1
  2590  0812  01CC               	clrf	___lldiv@divisor+2
  2591  0813  01CD               	clrf	___lldiv@divisor+3
  2592  0814  0858               	movf	LinearLookUpTab@val,w
  2593  0815  00F0               	movwf	___lmul@multiplier
  2594  0816  0859               	movf	LinearLookUpTab@val+1,w
  2595  0817  00F1               	movwf	___lmul@multiplier+1
  2596  0818  01F2               	clrf	___lmul@multiplier+2
  2597  0819  01F3               	clrf	___lmul@multiplier+3
  2598  081A  0864               	movf	LinearLookUpTab@Tab,w
  2599  081B  3E02               	addlw	2
  2600  081C  0086               	movwf	6
  2601  081D  3F40               	moviw [0]fsr1
  2602  081E  00DC               	movwf	??_LinearLookUpTab+2
  2603  081F  3F41               	moviw [1]fsr1
  2604  0820  00DD               	movwf	??_LinearLookUpTab+3
  2605  0821  085C               	movf	??_LinearLookUpTab+2,w
  2606  0822  00F4               	movwf	___lmul@multiplicand
  2607  0823  085D               	movf	??_LinearLookUpTab+3,w
  2608  0824  00F5               	movwf	___lmul@multiplicand+1
  2609  0825  01F6               	clrf	___lmul@multiplicand+2
  2610  0826  01F7               	clrf	___lmul@multiplicand+3
  2611  0827  2175  3188         	fcall	___lmul
  2612  0829  270F  3188         	fcall	PL6	;call to abstracted procedure
  2613  082B  21ED  3188         	fcall	___lldiv
  2614  082D  2768  3188         	fcall	PL26	;call to abstracted procedure
  2615  082F                     l2318:	
  2616                           
  2617                           ;main.c: 158: }
  2618                           ;main.c: 159: for( i = 0 ; i < TabSiz-1 ; i++)
  2619  082F  01E3               	clrf	LinearLookUpTab@i
  2620  0830                     l2330:	
  2621  0830  0857               	movf	LinearLookUpTab@TabSiz,w
  2622  0831  3EFF               	addlw	255
  2623  0832  00DA               	movwf	??_LinearLookUpTab
  2624  0833  30FF               	movlw	255
  2625  0834  1803               	skipnc
  2626  0835  3000               	movlw	0
  2627  0836  00DB               	movwf	??_LinearLookUpTab+1
  2628  0837  3A80               	xorlw	128
  2629  0838  3C80               	sublw	128
  2630  0839  1D03               	skipz
  2631  083A  283D               	goto	u1575
  2632  083B  085A               	movf	??_LinearLookUpTab,w
  2633  083C  0263               	subwf	LinearLookUpTab@i,w
  2634  083D                     u1575:	
  2635  083D  1803               	btfsc	3,0
  2636  083E  289E               	goto	l2332
  2637                           
  2638                           ;main.c: 160: {
  2639                           ;main.c: 161: if((val >= Tab[i].OriginalValue) && (val < Tab[i+1].OriginalValue))
  2640  083F  0020               	movlb	0	; select bank0
  2641  0840  2776  3188         	fcall	PL30	;call to abstracted procedure
  2642  0842  0086               	movwf	6
  2643  0843  26FA  3188         	fcall	PL2	;call to abstracted procedure
  2644  0845  1C03               	skipc
  2645  0846  289C               	goto	l2328
  2646  0847  2776  3188         	fcall	PL30	;call to abstracted procedure
  2647  0849  3E04               	addlw	4
  2648  084A  0086               	movwf	6
  2649  084B  26FA  3188         	fcall	PL2	;call to abstracted procedure
  2650  084D  1803               	skipnc
  2651  084E  289C               	goto	l2328
  2652                           
  2653                           ;main.c: 162: {
  2654                           ;main.c: 163: ret = (((uint32_t)(val - Tab[i].OriginalValue) * (uint32_t)(Tab[i+1].Actua
      +                          lValue - Tab[i].ActualValue)) / (uint32_t)(Tab[i+1].OriginalValue - Tab[i].OriginalValue
      +                          )) + (uint32_t)Tab[i].ActualValue;
  2655  084F  2776  3188         	fcall	PL30	;call to abstracted procedure
  2656  0851  0086               	movwf	6
  2657  0852  3001               	movlw	1	; select bank2/3
  2658  0853  0087               	movwf	7
  2659  0854  0863               	movf	LinearLookUpTab@i,w
  2660  0855  0709               	addwf	9,w
  2661  0856  0709               	addwf	9,w
  2662  0857  0764               	addwf	LinearLookUpTab@Tab,w
  2663  0858  00DB               	movwf	??_LinearLookUpTab+1
  2664  0859  3E04               	addlw	4
  2665  085A  279D  3188         	fcall	PL46	;call to abstracted procedure
  2666  085C  00CA               	movwf	___lldiv@divisor
  2667  085D  3101               	addfsr 0,1
  2668  085E  3F41               	moviw [1]fsr1
  2669  085F  3B00               	subwfb	0,w
  2670  0860  00CB               	movwf	___lldiv@divisor+1
  2671  0861  01CC               	clrf	___lldiv@divisor+2
  2672  0862  01CD               	clrf	___lldiv@divisor+3
  2673  0863  0863               	movf	LinearLookUpTab@i,w
  2674  0864  0709               	addwf	9,w
  2675  0865  0709               	addwf	9,w
  2676  0866  0764               	addwf	LinearLookUpTab@Tab,w
  2677  0867  00DC               	movwf	??_LinearLookUpTab+2
  2678  0868  0086               	movwf	6
  2679  0869  3001               	movlw	1	; select bank2/3
  2680  086A  0087               	movwf	7
  2681  086B  3F40               	moviw [0]fsr1
  2682  086C  0258               	subwf	LinearLookUpTab@val,w
  2683  086D  00F0               	movwf	___lmul@multiplier
  2684  086E  3F41               	moviw [1]fsr1
  2685  086F  3B59               	subwfb	LinearLookUpTab@val+1,w
  2686  0870  00F1               	movwf	___lmul@multiplier+1
  2687  0871  01F2               	clrf	___lmul@multiplier+2
  2688  0872  01F3               	clrf	___lmul@multiplier+3
  2689  0873  0863               	movf	LinearLookUpTab@i,w
  2690  0874  0709               	addwf	9,w
  2691  0875  0709               	addwf	9,w
  2692  0876  0764               	addwf	LinearLookUpTab@Tab,w
  2693  0877  00DD               	movwf	??_LinearLookUpTab+3
  2694  0878  3E02               	addlw	2
  2695  0879  0086               	movwf	6
  2696  087A  0863               	movf	LinearLookUpTab@i,w
  2697  087B  0709               	addwf	9,w
  2698  087C  0709               	addwf	9,w
  2699  087D  0764               	addwf	LinearLookUpTab@Tab,w
  2700  087E  00DE               	movwf	??_LinearLookUpTab+4
  2701  087F  3E06               	addlw	6
  2702  0880  279D  3188         	fcall	PL46	;call to abstracted procedure
  2703  0882  00F4               	movwf	___lmul@multiplicand
  2704  0883  3101               	addfsr 0,1
  2705  0884  3F41               	moviw [1]fsr1
  2706  0885  3B00               	subwfb	0,w
  2707  0886  00F5               	movwf	___lmul@multiplicand+1
  2708  0887  01F6               	clrf	___lmul@multiplicand+2
  2709  0888  01F7               	clrf	___lmul@multiplicand+3
  2710  0889  2175  3188         	fcall	___lmul
  2711  088B  270F  3188         	fcall	PL6	;call to abstracted procedure
  2712  088D  21ED  3188         	fcall	___lldiv
  2713  088F  2768  3188         	fcall	PL26	;call to abstracted procedure
  2714  0891  2776  3188         	fcall	PL30	;call to abstracted procedure
  2715  0893  3E02               	addlw	2
  2716  0894  2706  3188         	fcall	PL4	;call to abstracted procedure
  2717  0896  07DF               	addwf	LinearLookUpTab@ret,f
  2718  0897  085C               	movf	??_LinearLookUpTab+2,w
  2719  0898  3DE0               	addwfc	LinearLookUpTab@ret+1,f
  2720  0899  3000               	movlw	0
  2721  089A  3DE1               	addwfc	LinearLookUpTab@ret+2,f
  2722  089B  3DE2               	addwfc	LinearLookUpTab@ret+3,f
  2723  089C                     l2328:	
  2724  089C  0AE3               	incf	LinearLookUpTab@i,f
  2725  089D  2830               	goto	l2330
  2726  089E                     l2332:	
  2727                           
  2728                           ;main.c: 165: }
  2729                           ;main.c: 166: }
  2730                           ;main.c: 167: if(val >= Tab[TabSiz-1].OriginalValue)
  2731  089E  0020               	movlb	0	; select bank0
  2732  089F  2797  3188         	fcall	PL42	;call to abstracted procedure
  2733  08A1  3EFC               	addlw	-4
  2734  08A2  0086               	movwf	6
  2735  08A3  26FA  3188         	fcall	PL2	;call to abstracted procedure
  2736  08A5  1C03               	skipc
  2737  08A6  28B0               	goto	l2336
  2738                           
  2739                           ;main.c: 168: {
  2740                           ;main.c: 169: ret = Tab[TabSiz-1].ActualValue;
  2741  08A7  2797  3188         	fcall	PL42	;call to abstracted procedure
  2742  08A9  3EFE               	addlw	-2
  2743  08AA  2706               	fcall	PL4	;call to abstracted procedure
  2744  08AB  00DF               	movwf	LinearLookUpTab@ret
  2745  08AC  085C               	movf	??_LinearLookUpTab+2,w
  2746  08AD  00E0               	movwf	LinearLookUpTab@ret+1
  2747  08AE  01E1               	clrf	LinearLookUpTab@ret+2
  2748  08AF  01E2               	clrf	LinearLookUpTab@ret+3
  2749  08B0                     l2336:	
  2750                           
  2751                           ;main.c: 170: }
  2752                           ;main.c: 172: return (uint16_t)ret;
  2753  08B0  0860               	movf	LinearLookUpTab@ret+1,w
  2754  08B1  00D8               	movwf	?_LinearLookUpTab+1
  2755  08B2  085F               	movf	LinearLookUpTab@ret,w
  2756  08B3  00D7               	movwf	?_LinearLookUpTab
  2757  08B4  0008               	return
  2758  08B5                     __end_of_LinearLookUpTab:	
  2759  08B5                     start_initialization:	
  2760  08B5                     __initialization:	
  2761                           
  2762                           ; Clear objects allocated to BANK0
  2763  08B5  3020               	movlw	low __pbssBANK0
  2764  08B6  0084               	movwf	4
  2765  08B7  3000               	movlw	high __pbssBANK0
  2766  08B8  0085               	movwf	5
  2767  08B9  302A               	movlw	42
  2768  08BA  3182  22A6  3188   	fcall	clear_ram0
  2769                           
  2770                           ; Clear objects allocated to BANK1
  2771  08BD  30A0               	movlw	low __pbssBANK1
  2772  08BE  0084               	movwf	4
  2773  08BF  3000               	movlw	high __pbssBANK1
  2774  08C0  0085               	movwf	5
  2775  08C1  3050               	movlw	80
  2776  08C2  3182  22A6  3188   	fcall	clear_ram0
  2777                           
  2778                           ; Clear objects allocated to BANK2
  2779  08C5  3020               	movlw	low __pbssBANK2
  2780  08C6  0084               	movwf	4
  2781  08C7  3001               	movlw	high __pbssBANK2
  2782  08C8  0085               	movwf	5
  2783  08C9  304C               	movlw	76
  2784  08CA  3182  22A6  3188   	fcall	clear_ram0
  2785  08CD                     end_of_initialization:	
  2786                           ;End of C runtime variable initialization code
  2787                           
  2788  08CD                     __end_of__initialization:	
  2789  08CD  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2790  08CE  0020               	movlb	0
  2791  08CF  28D0               	ljmp	_main	;jump to C main() function
  2792  08D0                     __pmaintext:	
  2793 ;;
  2794 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2795 ;;
  2796 ;; *************** function _main *****************
  2797 ;; Defined at:
  2798 ;;		line 634 in file "main.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  tmp             1    0        unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : B1F/0
  2809 ;;		On exit  : 1F/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2812 ;;      Params:         0       0       0       0
  2813 ;;      Locals:         0       0       0       0
  2814 ;;      Temps:          0       0       0       0
  2815 ;;      Totals:         0       0       0       0
  2816 ;;Total ram usage:        0 bytes
  2817 ;; Hardware stack levels required when called:    8
  2818 ;; This function calls:
  2819 ;;		_ADCProcess
  2820 ;;		_CaliTabSendProcess
  2821 ;;		_ConstructCaliTab
  2822 ;;		_SYSTEM_Initialize
  2823 ;;		_SendDataToMainBoardProcess
  2824 ;;		_TMR0_SetInterruptHandler
  2825 ;;		_UartRecProcess
  2826 ;;		_UartSendProcess
  2827 ;; This function is called by:
  2828 ;;		Startup code after reset
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           
  2833                           ;psect for function _main
  2834  08D0                     _main:	
  2835                           
  2836                           ;main.c: 636: uint8_t tmp;
  2837                           ;main.c: 639: SYSTEM_Initialize();
  2838                           
  2839                           ;incstack = 0
  2840                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2841  08D0  266F  3188         	fcall	_SYSTEM_Initialize
  2842                           
  2843                           ;main.c: 645: (INTCONbits.GIE = 1);
  2844  08D2  178B               	bsf	11,7	;volatile
  2845                           
  2846                           ;main.c: 648: (INTCONbits.PEIE = 1);
  2847  08D3  170B               	bsf	11,6	;volatile
  2848                           
  2849                           ;main.c: 656: TMR0_SetInterruptHandler(BaseTimeTickISR);
  2850  08D4  309C               	movlw	low _BaseTimeTickISR
  2851  08D5  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2852  08D6  3002               	movlw	high _BaseTimeTickISR
  2853  08D7  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2854  08D8  232B               	fcall	_TMR0_SetInterruptHandler
  2855                           
  2856                           ;main.c: 658: ConstructCaliTab();
  2857  08D9  3180  2094  3188   	fcall	_ConstructCaliTab
  2858  08DC                     l3090:	
  2859                           
  2860                           ;main.c: 661: {
  2861                           ;main.c: 662: if(LedTimerCnt >= 1000)
  2862  08DC  3003               	movlw	3
  2863  08DD  0231               	subwf	_LedTimerCnt+1,w
  2864  08DE  30E8               	movlw	232
  2865  08DF  1903               	skipnz
  2866  08E0  0230               	subwf	_LedTimerCnt,w
  2867  08E1  1C03               	skipc
  2868  08E2  28E5               	goto	l3094
  2869                           
  2870                           ;main.c: 663: {
  2871                           ;main.c: 664: LedTimerCnt = 0;
  2872  08E3  01B0               	clrf	_LedTimerCnt
  2873  08E4  01B1               	clrf	_LedTimerCnt+1
  2874  08E5                     l3094:	
  2875                           
  2876                           ;main.c: 671: }
  2877                           ;main.c: 672: UartRecProcess();
  2878  08E5  3180  2027  3188   	fcall	_UartRecProcess
  2879                           
  2880                           ;main.c: 673: UartSendProcess();
  2881  08E8  26E0  3188         	fcall	_UartSendProcess
  2882                           
  2883                           ;main.c: 674: ADCProcess();
  2884  08EA  20F1  3188         	fcall	_ADCProcess
  2885                           
  2886                           ;main.c: 675: CaliTabSendProcess();
  2887  08EC  2331  3188         	fcall	_CaliTabSendProcess
  2888                           
  2889                           ;main.c: 676: SendDataToMainBoardProcess();
  2890  08EE  2690  3188         	fcall	_SendDataToMainBoardProcess
  2891  08F0  28DC               	goto	l3090
  2892  08F1                     __end_of_main:	
  2893  08F1                     __ptext22:	
  2894 ;; *************** function _ADCProcess *****************
  2895 ;; Defined at:
  2896 ;;		line 428 in file "main.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 1F/0
  2907 ;;		On exit  : 1F/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2910 ;;      Params:         0       0       0       0
  2911 ;;      Locals:         0       0       0       0
  2912 ;;      Temps:          0       0       0       0
  2913 ;;      Totals:         0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    7
  2917 ;; This function calls:
  2918 ;;		_Cali
  2919 ;;		_ChangeADS1115ValueToResitor
  2920 ;;		_Update2CaliDatabase
  2921 ;;		_ads1015_init
  2922 ;;		_readADC_Differential_0_1_part1
  2923 ;;		_readADC_Differential_0_1_part2
  2924 ;; This function is called by:
  2925 ;;		_main
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           
  2930                           ;psect for function _ADCProcess
  2931  08F1                     _ADCProcess:	
  2932                           
  2933                           ;main.c: 431: switch(ADCStep)
  2934                           
  2935                           ;incstack = 0
  2936                           ; Regs used in _ADCProcess: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2937  08F1  2933               	goto	l2958
  2938  08F2                     l2928:	
  2939                           
  2940                           ;main.c: 435: ads1015_init();
  2941  08F2  26F1               	fcall	_ads1015_init
  2942  08F3                     l2930:	
  2943                           
  2944                           ;main.c: 436: ADCStep = 1;
  2945  08F3  01BD               	clrf	_ADCStep
  2946  08F4  0ABD               	incf	_ADCStep,f
  2947                           
  2948                           ;main.c: 437: break;
  2949  08F5  0008               	return
  2950  08F6                     l2932:	
  2951                           
  2952                           ;main.c: 440: readADC_Differential_0_1_part1();
  2953  08F6  27BF               	fcall	_readADC_Differential_0_1_part1
  2954                           
  2955                           ;main.c: 441: ADCStep = 2;
  2956  08F7  3002               	movlw	2
  2957  08F8  0020               	movlb	0	; select bank0
  2958  08F9  00BD               	movwf	_ADCStep
  2959                           
  2960                           ;main.c: 442: ADCDelayCnt = 0;
  2961  08FA  01A8               	clrf	_ADCDelayCnt
  2962  08FB  01A9               	clrf	_ADCDelayCnt+1
  2963                           
  2964                           ;main.c: 443: break;
  2965  08FC  0008               	return
  2966  08FD                     l2938:	
  2967                           
  2968                           ;main.c: 446: if(ADCDelayCnt >= 8)
  2969  08FD  3000               	movlw	0
  2970  08FE  0229               	subwf	_ADCDelayCnt+1,w
  2971  08FF  3008               	movlw	8
  2972  0900  1903               	skipnz
  2973  0901  0228               	subwf	_ADCDelayCnt,w
  2974  0902  1C03               	skipc
  2975  0903  0008               	return
  2976                           
  2977                           ;main.c: 448: {
  2978                           ;main.c: 449: ADCStep = 3;
  2979  0904  3003               	movlw	3
  2980  0905  00BD               	movwf	_ADCStep
  2981  0906  0008               	return
  2982  0907                     l2942:	
  2983                           
  2984                           ;main.c: 454: ADC_Value = readADC_Differential_0_1_part2();
  2985  0907  251C  3188         	fcall	_readADC_Differential_0_1_part2
  2986  0909  084F               	movf	?_readADC_Differential_0_1_part2+1,w
  2987  090A  00AB               	movwf	_ADC_Value+1
  2988  090B  084E               	movf	?_readADC_Differential_0_1_part2,w
  2989  090C  00AA               	movwf	_ADC_Value
  2990                           
  2991                           ;main.c: 456: ADLinearVal = ChangeADS1115ValueToResitor(ADC_Value);
  2992  090D  082B               	movf	_ADC_Value+1,w
  2993  090E  00FD               	movwf	ChangeADS1115ValueToResitor@ADC_value+1
  2994  090F  082A               	movf	_ADC_Value,w
  2995  0910  00FC               	movwf	ChangeADS1115ValueToResitor@ADC_value
  2996  0911  219A  3188         	fcall	_ChangeADS1115ValueToResitor
  2997  0913  087D               	movf	?_ChangeADS1115ValueToResitor+1,w
  2998  0914  0020               	movlb	0	; select bank0
  2999  0915  00AD               	movwf	_ADLinearVal+1
  3000  0916  087C               	movf	?_ChangeADS1115ValueToResitor,w
  3001  0917  00AC               	movwf	_ADLinearVal
  3002                           
  3003                           ;main.c: 458: if(CalibratingFlag)
  3004  0918  0840               	movf	_CalibratingFlag,w
  3005  0919  1903               	btfsc	3,2
  3006  091A  2926               	goto	l2950
  3007                           
  3008                           ;main.c: 459: {
  3009                           ;main.c: 460: Update2CaliDatabase(ADLinearVal, ActualLength);
  3010  091B  082D               	movf	_ADLinearVal+1,w
  3011  091C  00CB               	movwf	Update2CaliDatabase@ori_val+1
  3012  091D  082C               	movf	_ADLinearVal,w
  3013  091E  00CA               	movwf	Update2CaliDatabase@ori_val
  3014  091F  082F               	movf	_ActualLength+1,w
  3015  0920  00CD               	movwf	Update2CaliDatabase@ActualValue+1
  3016  0921  082E               	movf	_ActualLength,w
  3017  0922  00CC               	movwf	Update2CaliDatabase@ActualValue
  3018  0923  222C  3188         	fcall	_Update2CaliDatabase
  3019                           
  3020                           ;main.c: 461: CalibratingFlag = 0;
  3021  0925  01C0               	clrf	_CalibratingFlag
  3022  0926                     l2950:	
  3023                           
  3024                           ;main.c: 462: }
  3025                           ;main.c: 464: Length = Cali(ADLinearVal);
  3026  0926  082D               	movf	_ADLinearVal+1,w
  3027  0927  00FD               	movwf	Cali@InData+1
  3028  0928  082C               	movf	_ADLinearVal,w
  3029  0929  00FC               	movwf	Cali@InData
  3030  092A  2142  3188         	fcall	_Cali
  3031  092C  087D               	movf	?_Cali+1,w
  3032  092D  00B3               	movwf	_Length+1
  3033  092E  087C               	movf	?_Cali,w
  3034  092F  00B2               	movwf	_Length
  3035  0930  28F3               	goto	l2930
  3036  0931                     l2954:	
  3037                           
  3038                           ;main.c: 471: ADCStep = 0;
  3039  0931  01BD               	clrf	_ADCStep
  3040                           
  3041                           ;main.c: 472: break;
  3042  0932  0008               	return
  3043  0933                     l2958:	
  3044  0933  083D               	movf	_ADCStep,w
  3045                           
  3046                           ; Switch size 1, requested type "space"
  3047                           ; Number of cases is 4, Range of values is 0 to 3
  3048                           ; switch strategies available:
  3049                           ; Name         Instructions Cycles
  3050                           ; simple_byte           13     7 (average)
  3051                           ; direct_byte           14     6 (fixed)
  3052                           ; jumptable            260     6 (fixed)
  3053                           ;	Chosen strategy is simple_byte
  3054  0934  3A00               	xorlw	0	; case 0
  3055  0935  1903               	skipnz
  3056  0936  28F2               	goto	l2928
  3057  0937  3A01               	xorlw	1	; case 1
  3058  0938  1903               	skipnz
  3059  0939  28F6               	goto	l2932
  3060  093A  3A03               	xorlw	3	; case 2
  3061  093B  1903               	skipnz
  3062  093C  28FD               	goto	l2938
  3063  093D  3A01               	xorlw	1	; case 3
  3064  093E  1903               	skipnz
  3065  093F  2907               	goto	l2942
  3066  0940  2931               	goto	l2954
  3067  0941  0008               	return
  3068  0942                     __end_of_ADCProcess:	
  3069  0942                     __ptext46:	
  3070 ;; *************** function _Cali *****************
  3071 ;; Defined at:
  3072 ;;		line 389 in file "main.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  InData          2   12[COMMON] unsigned int 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;		None
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  2   12[COMMON] unsigned int 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 1F/0
  3083 ;;		On exit  : 1F/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3086 ;;      Params:         2       0       0       0
  3087 ;;      Locals:         0       0       0       0
  3088 ;;      Temps:          0       0       0       0
  3089 ;;      Totals:         2       0       0       0
  3090 ;;Total ram usage:        2 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    5
  3093 ;; This function calls:
  3094 ;;		_LinearLookUpTab
  3095 ;;		___lldiv
  3096 ;;		___lmul
  3097 ;; This function is called by:
  3098 ;;		_ADCProcess
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           
  3103                           ;psect for function _Cali
  3104  0942                     _Cali:	
  3105                           
  3106                           ;main.c: 392: if(CaliTabSize == 0)
  3107                           
  3108                           ;incstack = 0
  3109                           ; Regs used in _Cali: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3110  0942  083F               	movf	_CaliTabSize,w
  3111  0943  1903               	btfsc	3,2
  3112  0944  0008               	return
  3113                           
  3114                           ;main.c: 397: else if(CaliTabSize == 1)
  3115                           
  3116                           ;main.c: 393: {
  3117                           ;main.c: 394: return InData;
  3118  0945  0B3F               	decfsz	_CaliTabSize,w
  3119  0946  2968               	goto	l2808
  3120                           
  3121                           ;main.c: 398: {
  3122                           ;main.c: 400: return ((uint32_t)InData*(uint32_t)CaliTab[0].ActualValue) / (uint32_t)Cal
      +                          iTab[0].OriginalValue;
  3123  0947  0022               	movlb	2	; select bank2
  3124  0948  0828               	movf	_CaliTab^(0+256),w
  3125  0949  0020               	movlb	0	; select bank0
  3126  094A  00CA               	movwf	___lldiv@divisor
  3127  094B  0022               	movlb	2	; select bank2
  3128  094C  0829               	movf	(_CaliTab+1)^(0+256),w
  3129  094D  0020               	movlb	0	; select bank0
  3130  094E  00CB               	movwf	___lldiv@divisor+1
  3131  094F  01CC               	clrf	___lldiv@divisor+2
  3132  0950  01CD               	clrf	___lldiv@divisor+3
  3133  0951  087C               	movf	Cali@InData,w
  3134  0952  00F0               	movwf	___lmul@multiplier
  3135  0953  087D               	movf	Cali@InData+1,w
  3136  0954  00F1               	movwf	___lmul@multiplier+1
  3137  0955  01F2               	clrf	___lmul@multiplier+2
  3138  0956  01F3               	clrf	___lmul@multiplier+3
  3139  0957  0022               	movlb	2	; select bank2
  3140  0958  082A               	movf	(_CaliTab^(0+256)+2),w
  3141  0959  00F4               	movwf	___lmul@multiplicand
  3142  095A  082B               	movf	((_CaliTab+1)^(0+256)+2),w
  3143  095B  00F5               	movwf	___lmul@multiplicand+1
  3144  095C  01F6               	clrf	___lmul@multiplicand+2
  3145  095D  01F7               	clrf	___lmul@multiplicand+3
  3146  095E  2175  3188         	fcall	___lmul
  3147  0960  270F  3188         	fcall	PL6	;call to abstracted procedure
  3148  0962  21ED               	fcall	___lldiv
  3149  0963  084B               	movf	?___lldiv+1,w
  3150  0964  00FD               	movwf	?_Cali+1
  3151  0965  084A               	movf	?___lldiv,w
  3152  0966  00FC               	movwf	?_Cali
  3153  0967  0008               	return
  3154  0968                     l2808:	
  3155                           
  3156                           ;main.c: 403: else
  3157                           ;main.c: 404: {
  3158                           ;main.c: 405: return LinearLookUpTab(CaliTab, CaliTabSize, InData);
  3159  0968  083F               	movf	_CaliTabSize,w
  3160  0969  00D7               	movwf	LinearLookUpTab@TabSiz
  3161  096A  087D               	movf	Cali@InData+1,w
  3162  096B  00D9               	movwf	LinearLookUpTab@val+1
  3163  096C  087C               	movf	Cali@InData,w
  3164  096D  00D8               	movwf	LinearLookUpTab@val
  3165  096E  3028               	movlw	(low (_CaliTab| (0+256)))& (0+255)
  3166  096F  2001               	fcall	_LinearLookUpTab
  3167  0970  0858               	movf	?_LinearLookUpTab+1,w
  3168  0971  00FD               	movwf	?_Cali+1
  3169  0972  0857               	movf	?_LinearLookUpTab,w
  3170  0973  00FC               	movwf	?_Cali
  3171  0974  0008               	return
  3172  0975                     __end_of_Cali:	
  3173  0975                     __ptext48:	
  3174 ;; *************** function ___lmul *****************
  3175 ;; Defined at:
  3176 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;  multiplier      4    0[COMMON] unsigned long 
  3179 ;;  multiplicand    4    4[COMMON] unsigned long 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  product         4    8[COMMON] unsigned long 
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  4    0[COMMON] unsigned long 
  3184 ;; Registers used:
  3185 ;;		wreg, status,2, status,0
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3191 ;;      Params:         8       0       0       0
  3192 ;;      Locals:         4       0       0       0
  3193 ;;      Temps:          0       0       0       0
  3194 ;;      Totals:        12       0       0       0
  3195 ;;Total ram usage:       12 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; Hardware stack levels required when called:    3
  3198 ;; This function calls:
  3199 ;;		Nothing
  3200 ;; This function is called by:
  3201 ;;		_LinearLookUpTab
  3202 ;;		_ConstructCaliTab
  3203 ;;		_Cali
  3204 ;;		_ChangeADS1115ValueToResitor
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           
  3209                           ;psect for function ___lmul
  3210  0975                     ___lmul:	
  3211                           
  3212                           ;incstack = 0
  3213                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3214  0975  01F8               	clrf	___lmul@product
  3215  0976  01F9               	clrf	___lmul@product+1
  3216  0977  01FA               	clrf	___lmul@product+2
  3217  0978  01FB               	clrf	___lmul@product+3
  3218  0979                     l702:	
  3219  0979  1C70               	btfss	___lmul@multiplier,0
  3220  097A  2983               	goto	l2246
  3221  097B  0874               	movf	___lmul@multiplicand,w
  3222  097C  07F8               	addwf	___lmul@product,f
  3223  097D  0875               	movf	___lmul@multiplicand+1,w
  3224  097E  3DF9               	addwfc	___lmul@product+1,f
  3225  097F  0876               	movf	___lmul@multiplicand+2,w
  3226  0980  3DFA               	addwfc	___lmul@product+2,f
  3227  0981  0877               	movf	___lmul@multiplicand+3,w
  3228  0982  3DFB               	addwfc	___lmul@product+3,f
  3229  0983                     l2246:	
  3230  0983  35F4               	lslf	___lmul@multiplicand,f
  3231  0984  0DF5               	rlf	___lmul@multiplicand+1,f
  3232  0985  0DF6               	rlf	___lmul@multiplicand+2,f
  3233  0986  0DF7               	rlf	___lmul@multiplicand+3,f
  3234  0987  36F3               	lsrf	___lmul@multiplier+3,f
  3235  0988  0CF2               	rrf	___lmul@multiplier+2,f
  3236  0989  0CF1               	rrf	___lmul@multiplier+1,f
  3237  098A  0CF0               	rrf	___lmul@multiplier,f
  3238  098B  0873               	movf	___lmul@multiplier+3,w
  3239  098C  0472               	iorwf	___lmul@multiplier+2,w
  3240  098D  0471               	iorwf	___lmul@multiplier+1,w
  3241  098E  0470               	iorwf	___lmul@multiplier,w
  3242  098F  1D03               	skipz
  3243  0990  2979               	goto	l702
  3244  0991  087B               	movf	___lmul@product+3,w
  3245  0992  00F3               	movwf	?___lmul+3
  3246  0993  087A               	movf	___lmul@product+2,w
  3247  0994  00F2               	movwf	?___lmul+2
  3248  0995  0879               	movf	___lmul@product+1,w
  3249  0996  00F1               	movwf	?___lmul+1
  3250  0997  0878               	movf	___lmul@product,w
  3251  0998  00F0               	movwf	?___lmul
  3252  0999  0008               	return
  3253  099A                     __end_of___lmul:	
  3254  099A                     __ptext45:	
  3255 ;; *************** function _ChangeADS1115ValueToResitor *****************
  3256 ;; Defined at:
  3257 ;;		line 411 in file "main.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  ADC_value       2   12[COMMON] int 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  tmp             4   17[BANK0 ] unsigned long 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  2   12[COMMON] unsigned int 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2, status,0, pclath, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 1F/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3271 ;;      Params:         2       0       0       0
  3272 ;;      Locals:         0       4       0       0
  3273 ;;      Temps:          0       4       0       0
  3274 ;;      Totals:         2       8       0       0
  3275 ;;Total ram usage:       10 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    4
  3278 ;; This function calls:
  3279 ;;		___lldiv
  3280 ;;		___lmul
  3281 ;; This function is called by:
  3282 ;;		_ADCProcess
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           
  3287                           ;psect for function _ChangeADS1115ValueToResitor
  3288  099A                     _ChangeADS1115ValueToResitor:	
  3289                           
  3290                           ;main.c: 413: uint32_t tmp;
  3291                           ;main.c: 415: if(ADC_value <= 0)
  3292                           
  3293                           ;incstack = 0
  3294                           ; Regs used in _ChangeADS1115ValueToResitor: [wreg+status,2+status,0+pclath+cstack]
  3295  099A  087D               	movf	ChangeADS1115ValueToResitor@ADC_value+1,w
  3296  099B  3A80               	xorlw	128
  3297  099C  00D7               	movwf	??_ChangeADS1115ValueToResitor
  3298  099D  3080               	movlw	128
  3299  099E  0257               	subwf	??_ChangeADS1115ValueToResitor,w
  3300  099F  1D03               	skipz
  3301  09A0  29A3               	goto	u2245
  3302  09A1  3001               	movlw	1
  3303  09A2  027C               	subwf	ChangeADS1115ValueToResitor@ADC_value,w
  3304  09A3                     u2245:	
  3305  09A3  1803               	skipnc
  3306  09A4  29A8               	goto	l2820
  3307                           
  3308                           ;main.c: 416: return 0;
  3309  09A5  01FC               	clrf	?_ChangeADS1115ValueToResitor
  3310  09A6  01FD               	clrf	?_ChangeADS1115ValueToResitor+1
  3311  09A7  0008               	return
  3312  09A8                     l2820:	
  3313                           
  3314                           ;main.c: 417: else
  3315                           ;main.c: 418: {
  3316                           ;main.c: 419: tmp = (uint32_t)ADC_value*52800;
  3317  09A8  087C               	movf	ChangeADS1115ValueToResitor@ADC_value,w
  3318  09A9  00F0               	movwf	___lmul@multiplier
  3319  09AA  087D               	movf	ChangeADS1115ValueToResitor@ADC_value+1,w
  3320  09AB  00F1               	movwf	___lmul@multiplier+1
  3321  09AC  0D89               	rlf	9,f
  3322  09AD  3B89               	subwfb	9,f
  3323  09AE  0989               	comf	9,f
  3324  09AF  00F2               	movwf	___lmul@multiplier+2
  3325  09B0  00F3               	movwf	___lmul@multiplier+3
  3326  09B1  30CE               	movlw	206
  3327  09B2  3181  21C3  3188   	fcall	PL40	;call to abstracted procedure
  3328  09B5  2175  3188         	fcall	___lmul
  3329  09B7  0873               	movf	?___lmul+3,w
  3330  09B8  0020               	movlb	0	; select bank0
  3331  09B9  00DE               	movwf	ChangeADS1115ValueToResitor@tmp+3
  3332  09BA  0872               	movf	?___lmul+2,w
  3333  09BB  00DD               	movwf	ChangeADS1115ValueToResitor@tmp+2
  3334  09BC  0871               	movf	?___lmul+1,w
  3335  09BD  00DC               	movwf	ChangeADS1115ValueToResitor@tmp+1
  3336  09BE  0870               	movf	?___lmul,w
  3337  09BF  00DB               	movwf	ChangeADS1115ValueToResitor@tmp
  3338                           
  3339                           ;main.c: 420: tmp = tmp/(52800-ADC_value);
  3340  09C0  30CE               	movlw	206
  3341  09C1  01CD               	clrf	___lldiv@divisor+3
  3342  09C2  01CC               	clrf	___lldiv@divisor+2
  3343  09C3  00CB               	movwf	___lldiv@divisor+1
  3344  09C4  3040               	movlw	64
  3345  09C5  00CA               	movwf	___lldiv@divisor
  3346  09C6  087C               	movf	ChangeADS1115ValueToResitor@ADC_value,w
  3347  09C7  00D7               	movwf	??_ChangeADS1115ValueToResitor
  3348  09C8  087D               	movf	ChangeADS1115ValueToResitor@ADC_value+1,w
  3349  09C9  00D8               	movwf	??_ChangeADS1115ValueToResitor+1
  3350  09CA  3000               	movlw	0
  3351  09CB  1BD8               	btfsc	??_ChangeADS1115ValueToResitor+1,7
  3352  09CC  30FF               	movlw	255
  3353  09CD  00D9               	movwf	??_ChangeADS1115ValueToResitor+2
  3354  09CE  00DA               	movwf	??_ChangeADS1115ValueToResitor+3
  3355  09CF  0857               	movf	??_ChangeADS1115ValueToResitor,w
  3356  09D0  02CA               	subwf	___lldiv@divisor,f
  3357  09D1  0858               	movf	??_ChangeADS1115ValueToResitor+1,w
  3358  09D2  3BCB               	subwfb	___lldiv@divisor+1,f
  3359  09D3  0859               	movf	??_ChangeADS1115ValueToResitor+2,w
  3360  09D4  3BCC               	subwfb	___lldiv@divisor+2,f
  3361  09D5  085A               	movf	??_ChangeADS1115ValueToResitor+3,w
  3362  09D6  3BCD               	subwfb	___lldiv@divisor+3,f
  3363  09D7  085E               	movf	ChangeADS1115ValueToResitor@tmp+3,w
  3364  09D8  00D1               	movwf	___lldiv@dividend+3
  3365  09D9  085D               	movf	ChangeADS1115ValueToResitor@tmp+2,w
  3366  09DA  00D0               	movwf	___lldiv@dividend+2
  3367  09DB  085C               	movf	ChangeADS1115ValueToResitor@tmp+1,w
  3368  09DC  00CF               	movwf	___lldiv@dividend+1
  3369  09DD  085B               	movf	ChangeADS1115ValueToResitor@tmp,w
  3370  09DE  00CE               	movwf	___lldiv@dividend
  3371  09DF  21ED               	fcall	___lldiv
  3372  09E0  084D               	movf	?___lldiv+3,w
  3373  09E1  00DE               	movwf	ChangeADS1115ValueToResitor@tmp+3
  3374  09E2  084C               	movf	?___lldiv+2,w
  3375  09E3  00DD               	movwf	ChangeADS1115ValueToResitor@tmp+2
  3376  09E4  084B               	movf	?___lldiv+1,w
  3377  09E5  00DC               	movwf	ChangeADS1115ValueToResitor@tmp+1
  3378  09E6  084A               	movf	?___lldiv,w
  3379  09E7  00DB               	movwf	ChangeADS1115ValueToResitor@tmp
  3380                           
  3381                           ;main.c: 424: return (uint16_t)tmp;
  3382  09E8  085C               	movf	ChangeADS1115ValueToResitor@tmp+1,w
  3383  09E9  00FD               	movwf	?_ChangeADS1115ValueToResitor+1
  3384  09EA  085B               	movf	ChangeADS1115ValueToResitor@tmp,w
  3385  09EB  00FC               	movwf	?_ChangeADS1115ValueToResitor
  3386  09EC  0008               	return
  3387  09ED                     __end_of_ChangeADS1115ValueToResitor:	
  3388  09ED                     __ptext49:	
  3389 ;; *************** function ___lldiv *****************
  3390 ;; Defined at:
  3391 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  divisor         4    0[BANK0 ] unsigned long 
  3394 ;;  dividend        4    4[BANK0 ] unsigned long 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  quotient        4    8[BANK0 ] unsigned long 
  3397 ;;  counter         1   12[BANK0 ] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  4    0[BANK0 ] unsigned long 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0
  3402 ;; Tracked objects:
  3403 ;;		On entry : 1F/0
  3404 ;;		On exit  : 1F/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3407 ;;      Params:         0       8       0       0
  3408 ;;      Locals:         0       5       0       0
  3409 ;;      Temps:          0       0       0       0
  3410 ;;      Totals:         0      13       0       0
  3411 ;;Total ram usage:       13 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    3
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_LinearLookUpTab
  3418 ;;		_Cali
  3419 ;;		_ChangeADS1115ValueToResitor
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           
  3424                           ;psect for function ___lldiv
  3425  09ED                     ___lldiv:	
  3426                           
  3427                           ;incstack = 0
  3428                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3429  09ED  01D2               	clrf	___lldiv@quotient
  3430  09EE  01D3               	clrf	___lldiv@quotient+1
  3431  09EF  01D4               	clrf	___lldiv@quotient+2
  3432  09F0  01D5               	clrf	___lldiv@quotient+3
  3433  09F1  084D               	movf	___lldiv@divisor+3,w
  3434  09F2  044C               	iorwf	___lldiv@divisor+2,w
  3435  09F3  044B               	iorwf	___lldiv@divisor+1,w
  3436  09F4  044A               	iorwf	___lldiv@divisor,w
  3437  09F5  1903               	skipnz
  3438  09F6  2A23               	goto	l2276
  3439  09F7  01D6               	clrf	___lldiv@counter
  3440  09F8                     L5:	
  3441  09F8  0AD6               	incf	___lldiv@counter,f
  3442  09F9  1BCD               	btfsc	___lldiv@divisor+3,7
  3443  09FA  2A00               	goto	l2264
  3444  09FB  35CA               	lslf	___lldiv@divisor,f
  3445  09FC  0DCB               	rlf	___lldiv@divisor+1,f
  3446  09FD  0DCC               	rlf	___lldiv@divisor+2,f
  3447  09FE  0DCD               	rlf	___lldiv@divisor+3,f
  3448  09FF  29F8               	goto	L5
  3449  0A00                     l2264:	
  3450  0A00  35D2               	lslf	___lldiv@quotient,f
  3451  0A01  0DD3               	rlf	___lldiv@quotient+1,f
  3452  0A02  0DD4               	rlf	___lldiv@quotient+2,f
  3453  0A03  0DD5               	rlf	___lldiv@quotient+3,f
  3454  0A04  084D               	movf	___lldiv@divisor+3,w
  3455  0A05  0251               	subwf	___lldiv@dividend+3,w
  3456  0A06  1D03               	skipz
  3457  0A07  2A12               	goto	u1495
  3458  0A08  084C               	movf	___lldiv@divisor+2,w
  3459  0A09  0250               	subwf	___lldiv@dividend+2,w
  3460  0A0A  1D03               	skipz
  3461  0A0B  2A12               	goto	u1495
  3462  0A0C  084B               	movf	___lldiv@divisor+1,w
  3463  0A0D  024F               	subwf	___lldiv@dividend+1,w
  3464  0A0E  1D03               	skipz
  3465  0A0F  2A12               	goto	u1495
  3466  0A10  084A               	movf	___lldiv@divisor,w
  3467  0A11  024E               	subwf	___lldiv@dividend,w
  3468  0A12                     u1495:	
  3469  0A12  1C03               	skipc
  3470  0A13  2A1D               	goto	l2272
  3471  0A14  084A               	movf	___lldiv@divisor,w
  3472  0A15  02CE               	subwf	___lldiv@dividend,f
  3473  0A16  084B               	movf	___lldiv@divisor+1,w
  3474  0A17  3BCF               	subwfb	___lldiv@dividend+1,f
  3475  0A18  084C               	movf	___lldiv@divisor+2,w
  3476  0A19  3BD0               	subwfb	___lldiv@dividend+2,f
  3477  0A1A  084D               	movf	___lldiv@divisor+3,w
  3478  0A1B  3BD1               	subwfb	___lldiv@dividend+3,f
  3479  0A1C  1452               	bsf	___lldiv@quotient,0
  3480  0A1D                     l2272:	
  3481  0A1D  36CD               	lsrf	___lldiv@divisor+3,f
  3482  0A1E  0CCC               	rrf	___lldiv@divisor+2,f
  3483  0A1F  0CCB               	rrf	___lldiv@divisor+1,f
  3484  0A20  0CCA               	rrf	___lldiv@divisor,f
  3485  0A21  0BD6               	decfsz	___lldiv@counter,f
  3486  0A22  2A00               	goto	l2264
  3487  0A23                     l2276:	
  3488  0A23  0855               	movf	___lldiv@quotient+3,w
  3489  0A24  00CD               	movwf	?___lldiv+3
  3490  0A25  0854               	movf	___lldiv@quotient+2,w
  3491  0A26  00CC               	movwf	?___lldiv+2
  3492  0A27  0853               	movf	___lldiv@quotient+1,w
  3493  0A28  00CB               	movwf	?___lldiv+1
  3494  0A29  0852               	movf	___lldiv@quotient,w
  3495  0A2A  00CA               	movwf	?___lldiv
  3496  0A2B  0008               	return
  3497  0A2C                     __end_of___lldiv:	
  3498  0A2C                     __ptext36:	
  3499 ;; *************** function _Update2CaliDatabase *****************
  3500 ;; Defined at:
  3501 ;;		line 226 in file "main.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  ori_val         2    0[BANK0 ] unsigned int 
  3504 ;;  ActualValue     2    2[BANK0 ] unsigned int 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  tmp             4    8[BANK0 ] unsigned char [4]
  3507 ;;  OriginalValu    2   12[BANK0 ] unsigned int 
  3508 ;;  j               1   17[BANK0 ] unsigned char 
  3509 ;;  m               1   16[BANK0 ] unsigned char 
  3510 ;;  i               1   15[BANK0 ] unsigned char 
  3511 ;;  k               1   14[BANK0 ] unsigned char 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  1    wreg      void 
  3514 ;; Registers used:
  3515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3516 ;; Tracked objects:
  3517 ;;		On entry : 1F/0
  3518 ;;		On exit  : 1F/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3521 ;;      Params:         0       4       0       0
  3522 ;;      Locals:         0      10       0       0
  3523 ;;      Temps:          0       4       0       0
  3524 ;;      Totals:         0      18       0       0
  3525 ;;Total ram usage:       18 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    6
  3528 ;; This function calls:
  3529 ;;		_EEpromBuffeWirte
  3530 ;;		_EraseCaliDatabase
  3531 ;;		_UpdateCaliBuf
  3532 ;;		___lwdiv
  3533 ;;		___lwmod
  3534 ;; This function is called by:
  3535 ;;		_ADCProcess
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           
  3540                           ;psect for function _Update2CaliDatabase
  3541  0A2C                     _Update2CaliDatabase:	
  3542                           
  3543                           ;main.c: 228: uint8_t i, j, m, k;
  3544                           ;main.c: 229: uint16_t OriginalValue;
  3545                           ;main.c: 230: uint8_t tmp[4];
  3546                           ;main.c: 232: OriginalValue = ori_val;
  3547                           
  3548                           ;incstack = 0
  3549                           ; Regs used in _Update2CaliDatabase: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3550  0A2C  084B               	movf	Update2CaliDatabase@ori_val+1,w
  3551  0A2D  00D7               	movwf	Update2CaliDatabase@OriginalValue+1
  3552  0A2E  084A               	movf	Update2CaliDatabase@ori_val,w
  3553  0A2F  00D6               	movwf	Update2CaliDatabase@OriginalValue
  3554                           
  3555                           ;main.c: 235: if((ActualValue % 30) < 10)
  3556  0A30  301E               	movlw	30
  3557  0A31  00F7               	movwf	___lwmod@divisor
  3558  0A32  01F8               	clrf	___lwmod@divisor+1
  3559  0A33  084D               	movf	Update2CaliDatabase@ActualValue+1,w
  3560  0A34  00FA               	movwf	___lwmod@dividend+1
  3561  0A35  084C               	movf	Update2CaliDatabase@ActualValue,w
  3562  0A36  00F9               	movwf	___lwmod@dividend
  3563  0A37  24E0  3188         	fcall	___lwmod
  3564  0A39  3000               	movlw	0
  3565  0A3A  0278               	subwf	?___lwmod+1,w
  3566  0A3B  300A               	movlw	10
  3567  0A3C  1903               	skipnz
  3568  0A3D  0277               	subwf	?___lwmod,w
  3569  0A3E  1C03               	btfss	3,0
  3570  0A3F  0008               	return
  3571                           
  3572                           ;main.c: 238: }
  3573                           ;main.c: 241: if((OriginalValue > 52800) || (ActualValue > 1200))
  3574  0A40  30CE               	movlw	206
  3575  0A41  0257               	subwf	Update2CaliDatabase@OriginalValue+1,w
  3576  0A42  3041               	movlw	65
  3577  0A43  1903               	skipnz
  3578  0A44  0256               	subwf	Update2CaliDatabase@OriginalValue,w
  3579  0A45  1803               	skipnc
  3580  0A46  0008               	return
  3581  0A47  3004               	movlw	4
  3582  0A48  024D               	subwf	Update2CaliDatabase@ActualValue+1,w
  3583  0A49  30B1               	movlw	177
  3584  0A4A  1903               	skipnz
  3585  0A4B  024C               	subwf	Update2CaliDatabase@ActualValue,w
  3586  0A4C  1803               	btfsc	3,0
  3587  0A4D  0008               	return
  3588                           
  3589                           ;main.c: 244: }
  3590                           ;main.c: 251: i = ActualValue / 30;
  3591  0A4E  301E               	movlw	30
  3592  0A4F  00F0               	movwf	___lwdiv@divisor
  3593  0A50  01F1               	clrf	___lwdiv@divisor+1
  3594  0A51  084D               	movf	Update2CaliDatabase@ActualValue+1,w
  3595  0A52  00F3               	movwf	___lwdiv@dividend+1
  3596  0A53  084C               	movf	Update2CaliDatabase@ActualValue,w
  3597  0A54  00F2               	movwf	___lwdiv@dividend
  3598  0A55  24BB  3188         	fcall	___lwdiv
  3599  0A57  0870               	movf	?___lwdiv,w
  3600  0A58  00D9               	movwf	Update2CaliDatabase@i
  3601                           
  3602                           ;main.c: 252: if(i >= 16)
  3603  0A59  3010               	movlw	16
  3604  0A5A  0259               	subwf	Update2CaliDatabase@i,w
  3605  0A5B  1C03               	skipc
  3606  0A5C  2A5F               	goto	l2610
  3607                           
  3608                           ;main.c: 253: i = 16 - 1;
  3609  0A5D  300F               	movlw	15
  3610  0A5E  00D9               	movwf	Update2CaliDatabase@i
  3611  0A5F                     l2610:	
  3612                           
  3613                           ;main.c: 256: UpdateCaliBuf();
  3614  0A5F  246F  3188         	fcall	_UpdateCaliBuf
  3615                           
  3616                           ;main.c: 258: CaliBuf[i].OriginalValue = OriginalValue;
  3617  0A61  0020               	movlb	0	; select bank0
  3618  0A62  0859               	movf	Update2CaliDatabase@i,w
  3619  0A63  2746  3188         	fcall	PL16	;call to abstracted procedure
  3620                           
  3621                           ;main.c: 259: CaliBuf[i].ActualValue = ActualValue;
  3622  0A65  2719  3188         	fcall	PL8	;call to abstracted procedure
  3623                           
  3624                           ;main.c: 263: for(m = 0 ; m < 16-1 ; m++)
  3625  0A67  01DA               	clrf	Update2CaliDatabase@m
  3626  0A68                     l2622:	
  3627                           
  3628                           ;main.c: 264: {
  3629                           ;main.c: 265: for(j = m+1 ; j < 16 ; j++)
  3630  0A68  085A               	movf	Update2CaliDatabase@m,w
  3631  0A69  3E01               	addlw	1
  3632  0A6A  00DB               	movwf	Update2CaliDatabase@j
  3633  0A6B                     l2624:	
  3634  0A6B  3010               	movlw	16
  3635  0A6C  025B               	subwf	Update2CaliDatabase@j,w
  3636  0A6D  1803               	btfsc	3,0
  3637  0A6E  2AD4               	goto	l2658
  3638                           
  3639                           ;main.c: 266: {
  3640                           ;main.c: 268: if((CaliBuf[j].OriginalValue <= 52800) && (CaliBuf[j].ActualValue <= 1200)
      +                           && (CaliBuf[m].OriginalValue <= 52800) && (CaliBuf[m].ActualValue <= 1200))
  3641  0A6F  085B               	movf	Update2CaliDatabase@j,w
  3642  0A70  2746  3188         	fcall	PL16	;call to abstracted procedure
  3643  0A72  3F40               	moviw [0]fsr1
  3644  0A73  00CE               	movwf	??_Update2CaliDatabase
  3645  0A74  3F41               	moviw [1]fsr1
  3646  0A75  00CF               	movwf	??_Update2CaliDatabase+1
  3647  0A76  30CE               	movlw	206
  3648  0A77  024F               	subwf	??_Update2CaliDatabase+1,w
  3649  0A78  3041               	movlw	65
  3650  0A79  1903               	skipnz
  3651  0A7A  024E               	subwf	??_Update2CaliDatabase,w
  3652  0A7B  1803               	skipnc
  3653  0A7C  2AD2               	goto	l2654
  3654  0A7D  085B               	movf	Update2CaliDatabase@j,w
  3655  0A7E  2740  3188         	fcall	PL14	;call to abstracted procedure
  3656  0A80  278A  3188         	fcall	PL36	;call to abstracted procedure
  3657  0A82  1903               	skipnz
  3658  0A83  024E               	subwf	??_Update2CaliDatabase,w
  3659  0A84  1803               	skipnc
  3660  0A85  2AD2               	goto	l2654
  3661  0A86  275E  3188         	fcall	PL22	;call to abstracted procedure
  3662  0A88  2758  3188         	fcall	PL20	;call to abstracted procedure
  3663  0A8A  30CE               	movlw	206
  3664  0A8B  024F               	subwf	??_Update2CaliDatabase+1,w
  3665  0A8C  3041               	movlw	65
  3666  0A8D  1903               	skipnz
  3667  0A8E  024E               	subwf	??_Update2CaliDatabase,w
  3668  0A8F  1803               	skipnc
  3669  0A90  2AD2               	goto	l2654
  3670  0A91  085A               	movf	Update2CaliDatabase@m,w
  3671  0A92  2740  3188         	fcall	PL14	;call to abstracted procedure
  3672  0A94  278A  3188         	fcall	PL36	;call to abstracted procedure
  3673  0A96  1903               	skipnz
  3674  0A97  024E               	subwf	??_Update2CaliDatabase,w
  3675  0A98  1803               	skipnc
  3676  0A99  2AD2               	goto	l2654
  3677                           
  3678                           ;main.c: 271: {
  3679                           ;main.c: 272: if((CaliBuf[m].OriginalValue > CaliBuf[j].OriginalValue) || (CaliBuf[m].Ac
      +                          tualValue > CaliBuf[j].ActualValue))
  3680  0A9A  275E  3188         	fcall	PL22	;call to abstracted procedure
  3681  0A9C  2758  3188         	fcall	PL20	;call to abstracted procedure
  3682  0A9E  2763  3188         	fcall	PL24	;call to abstracted procedure
  3683  0AA0  2734  3188         	fcall	PL12	;call to abstracted procedure
  3684  0AA2  1C03               	skipc
  3685  0AA3  2AB4               	goto	l2640
  3686  0AA4  085A               	movf	Update2CaliDatabase@m,w
  3687  0AA5  0709               	addwf	9,w
  3688  0AA6  0709               	addwf	9,w
  3689  0AA7  3EA2               	addlw	(low ((_CaliBuf| 0+2)))& (0+255)
  3690  0AA8  0086               	movwf	6
  3691  0AA9  0187               	clrf	7
  3692  0AAA  3F40               	moviw [0]fsr1
  3693  0AAB  00CE               	movwf	??_Update2CaliDatabase
  3694  0AAC  3F41               	moviw [1]fsr1
  3695  0AAD  00CF               	movwf	??_Update2CaliDatabase+1
  3696  0AAE  2771  3188         	fcall	PL28	;call to abstracted procedure
  3697  0AB0  2734  3188         	fcall	PL12	;call to abstracted procedure
  3698  0AB2  1803               	skipnc
  3699  0AB3  2AD2               	goto	l2654
  3700  0AB4                     l2640:	
  3701                           
  3702                           ;main.c: 273: {
  3703                           ;main.c: 276: for(k = 0 ; k < 16 ; k++)
  3704  0AB4  01D8               	clrf	Update2CaliDatabase@k
  3705  0AB5                     l2646:	
  3706                           
  3707                           ;main.c: 277: {
  3708                           ;main.c: 278: CaliBuf[k].OriginalValue = 0xffff;
  3709  0AB5  0858               	movf	Update2CaliDatabase@k,w
  3710  0AB6  0709               	addwf	9,w
  3711  0AB7  0709               	addwf	9,w
  3712  0AB8  3EA0               	addlw	(low (_CaliBuf| 0))& (0+255)
  3713  0AB9  0086               	movwf	6
  3714  0ABA  30FF               	movlw	255
  3715  0ABB  0187               	clrf	7
  3716  0ABC  3FC0               	movwi [0]fsr1
  3717  0ABD  3FC1               	movwi [1]fsr1
  3718                           
  3719                           ;main.c: 279: CaliBuf[k].ActualValue = 0xffff;
  3720  0ABE  0858               	movf	Update2CaliDatabase@k,w
  3721  0ABF  0709               	addwf	9,w
  3722  0AC0  0709               	addwf	9,w
  3723  0AC1  3EA2               	addlw	(low ((_CaliBuf| 0+2)))& (0+255)
  3724  0AC2  0086               	movwf	6
  3725  0AC3  30FF               	movlw	255
  3726  0AC4  3FC0               	movwi [0]fsr1
  3727  0AC5  3FC1               	movwi [1]fsr1
  3728  0AC6  3010               	movlw	16
  3729  0AC7  0AD8               	incf	Update2CaliDatabase@k,f
  3730  0AC8  0258               	subwf	Update2CaliDatabase@k,w
  3731  0AC9  1C03               	skipc
  3732  0ACA  2AB5               	goto	l2646
  3733                           
  3734                           ;main.c: 280: }
  3735                           ;main.c: 282: CaliBuf[i].OriginalValue = OriginalValue;
  3736  0ACB  0859               	movf	Update2CaliDatabase@i,w
  3737  0ACC  0709               	addwf	9,w
  3738  0ACD  0709               	addwf	9,w
  3739  0ACE  3EA0               	addlw	(low (_CaliBuf| 0))& (0+255)
  3740  0ACF  0086               	movwf	6
  3741                           
  3742                           ;main.c: 283: CaliBuf[i].ActualValue = ActualValue;
  3743  0AD0  2719  3188         	fcall	PL8	;call to abstracted procedure
  3744  0AD2                     l2654:	
  3745  0AD2  0ADB               	incf	Update2CaliDatabase@j,f
  3746  0AD3  2A6B               	goto	l2624
  3747  0AD4                     l2658:	
  3748  0AD4  300F               	movlw	15
  3749  0AD5  0ADA               	incf	Update2CaliDatabase@m,f
  3750  0AD6  025A               	subwf	Update2CaliDatabase@m,w
  3751  0AD7  1C03               	skipc
  3752  0AD8  2A68               	goto	l2622
  3753                           
  3754                           ;main.c: 284: }
  3755                           ;main.c: 285: }
  3756                           ;main.c: 286: }
  3757                           ;main.c: 287: }
  3758                           ;main.c: 290: EraseCaliDatabase();
  3759  0AD9  231F  3188         	fcall	_EraseCaliDatabase
  3760                           
  3761                           ;main.c: 291: for(j = 0 ; j < 16 ; j++)
  3762  0ADB  01DB               	clrf	Update2CaliDatabase@j
  3763  0ADC                     l2670:	
  3764                           
  3765                           ;main.c: 292: {
  3766                           ;main.c: 293: tmp[0] = (CaliBuf[j].OriginalValue >> 8);
  3767  0ADC  085B               	movf	Update2CaliDatabase@j,w
  3768  0ADD  2746  3188         	fcall	PL16	;call to abstracted procedure
  3769  0ADF  3F40               	moviw [0]fsr1
  3770  0AE0  00CE               	movwf	??_Update2CaliDatabase
  3771  0AE1  3F41               	moviw [1]fsr1
  3772  0AE2  00CF               	movwf	??_Update2CaliDatabase+1
  3773  0AE3  00D2               	movwf	Update2CaliDatabase@tmp
  3774                           
  3775                           ;main.c: 294: tmp[1] = CaliBuf[j].OriginalValue;
  3776  0AE4  2763  3188         	fcall	PL24	;call to abstracted procedure
  3777  0AE6  0086               	movwf	6
  3778  0AE7  0801               	movf	1,w
  3779  0AE8  00D3               	movwf	Update2CaliDatabase@tmp+1
  3780                           
  3781                           ;main.c: 295: tmp[2] = (CaliBuf[j].ActualValue >> 8);
  3782  0AE9  085B               	movf	Update2CaliDatabase@j,w
  3783  0AEA  2740  3188         	fcall	PL14	;call to abstracted procedure
  3784  0AEC  00CE               	movwf	??_Update2CaliDatabase
  3785  0AED  3F41               	moviw [1]fsr1
  3786  0AEE  00CF               	movwf	??_Update2CaliDatabase+1
  3787  0AEF  00D4               	movwf	Update2CaliDatabase@tmp+2
  3788                           
  3789                           ;main.c: 296: tmp[3] = CaliBuf[j].ActualValue;
  3790  0AF0  2771  3188         	fcall	PL28	;call to abstracted procedure
  3791  0AF2  0086               	movwf	6
  3792  0AF3  0801               	movf	1,w
  3793  0AF4  00D5               	movwf	Update2CaliDatabase@tmp+3
  3794                           
  3795                           ;main.c: 299: EEpromBuffeWirte(tmp, 0+j*4, 4);
  3796  0AF5  085B               	movf	Update2CaliDatabase@j,w
  3797  0AF6  0709               	addwf	9,w
  3798  0AF7  0709               	addwf	9,w
  3799  0AF8  00F2               	movwf	EEpromBuffeWirte@WriteAddr
  3800  0AF9  3004               	movlw	4
  3801  0AFA  00F3               	movwf	EEpromBuffeWirte@NumByteToWrite
  3802  0AFB  3052               	movlw	(low (Update2CaliDatabase@tmp| 0))& (0+255)
  3803  0AFC  01F4               	clrf	EEpromBuffeWirte@NumByteToWrite+1
  3804  0AFD  2305  3188         	fcall	_EEpromBuffeWirte
  3805  0AFF  3010               	movlw	16
  3806  0B00  0ADB               	incf	Update2CaliDatabase@j,f
  3807  0B01  025B               	subwf	Update2CaliDatabase@j,w
  3808  0B02  1803               	btfsc	3,0
  3809  0B03  0008               	return
  3810  0B04  2ADC               	goto	l2670
  3811  0B05                     __end_of_Update2CaliDatabase:	
  3812  0B05                     __ptext43:	
  3813 ;; *************** function _EEpromBuffeWirte *****************
  3814 ;; Defined at:
  3815 ;;		line 124 in file "main.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  pBuffer         1    wreg     PTR unsigned char 
  3818 ;;		 -> Update2CaliDatabase@tmp(4), 
  3819 ;;  WriteAddr       1    2[COMMON] unsigned char 
  3820 ;;  NumByteToWri    2    3[COMMON] unsigned int 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  pBuffer         1    7[COMMON] PTR unsigned char 
  3823 ;;		 -> Update2CaliDatabase@tmp(4), 
  3824 ;;  i               1    8[COMMON] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 1F/0
  3831 ;;		On exit  : 1F/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3834 ;;      Params:         3       0       0       0
  3835 ;;      Locals:         2       0       0       0
  3836 ;;      Temps:          2       0       0       0
  3837 ;;      Totals:         7       0       0       0
  3838 ;;Total ram usage:        7 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    4
  3841 ;; This function calls:
  3842 ;;		_eeprom_write
  3843 ;; This function is called by:
  3844 ;;		_Update2CaliDatabase
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           
  3849                           ;psect for function _EEpromBuffeWirte
  3850  0B05                     _EEpromBuffeWirte:	
  3851                           
  3852                           ;incstack = 0
  3853                           ; Regs used in _EEpromBuffeWirte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3854                           ;EEpromBuffeWirte@pBuffer stored from wreg
  3855  0B05  00F7               	movwf	EEpromBuffeWirte@pBuffer
  3856                           
  3857                           ;main.c: 126: uint8_t i;
  3858                           ;main.c: 128: for(i = 0 ; i < NumByteToWrite ; i++)
  3859  0B06  01F8               	clrf	EEpromBuffeWirte@i
  3860  0B07                     l2312:	
  3861  0B07  0878               	movf	EEpromBuffeWirte@i,w
  3862  0B08  00F5               	movwf	??_EEpromBuffeWirte
  3863  0B09  01F6               	clrf	??_EEpromBuffeWirte+1
  3864  0B0A  0874               	movf	EEpromBuffeWirte@NumByteToWrite+1,w
  3865  0B0B  0276               	subwf	??_EEpromBuffeWirte+1,w
  3866  0B0C  1D03               	skipz
  3867  0B0D  2B10               	goto	u1535
  3868  0B0E  0873               	movf	EEpromBuffeWirte@NumByteToWrite,w
  3869  0B0F  0275               	subwf	??_EEpromBuffeWirte,w
  3870  0B10                     u1535:	
  3871  0B10  1803               	btfsc	3,0
  3872  0B11  0008               	return
  3873                           
  3874                           ;main.c: 129: {
  3875                           ;main.c: 130: eeprom_write(WriteAddr+i, pBuffer[i]);
  3876  0B12  0878               	movf	EEpromBuffeWirte@i,w
  3877  0B13  0777               	addwf	EEpromBuffeWirte@pBuffer,w
  3878  0B14  00F5               	movwf	??_EEpromBuffeWirte
  3879  0B15  0086               	movwf	6
  3880  0B16  0187               	clrf	7
  3881  0B17  0801               	movf	1,w
  3882  0B18  00F0               	movwf	eeprom_write@value
  3883  0B19  0872               	movf	EEpromBuffeWirte@WriteAddr,w
  3884  0B1A  0778               	addwf	EEpromBuffeWirte@i,w
  3885  0B1B  2500  3188         	fcall	_eeprom_write
  3886  0B1D  0AF8               	incf	EEpromBuffeWirte@i,f
  3887  0B1E  2B07               	goto	l2312
  3888  0B1F                     __end_of_EEpromBuffeWirte:	
  3889  0B1F                     __ptext42:	
  3890 ;; *************** function _EraseCaliDatabase *****************
  3891 ;; Defined at:
  3892 ;;		line 207 in file "main.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  i               1    2[COMMON] unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 1F/0
  3903 ;;		On exit  : 1F/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3906 ;;      Params:         0       0       0       0
  3907 ;;      Locals:         1       0       0       0
  3908 ;;      Temps:          0       0       0       0
  3909 ;;      Totals:         1       0       0       0
  3910 ;;Total ram usage:        1 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    4
  3913 ;; This function calls:
  3914 ;;		_eeprom_write
  3915 ;; This function is called by:
  3916 ;;		_Update2CaliDatabase
  3917 ;;		_UartRecProcess
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           
  3922                           ;psect for function _EraseCaliDatabase
  3923  0B1F                     _EraseCaliDatabase:	
  3924                           
  3925                           ;main.c: 209: uint8_t i;
  3926                           ;main.c: 211: for(i = 0 ; i < 16*4 ; i++)
  3927                           
  3928                           ;incstack = 0
  3929                           ; Regs used in _EraseCaliDatabase: [wreg+status,2+status,0+pclath+cstack]
  3930  0B1F  01F2               	clrf	EraseCaliDatabase@i
  3931  0B20                     l2362:	
  3932                           
  3933                           ;main.c: 212: {
  3934                           ;main.c: 213: eeprom_write(0+i, 0xff);
  3935  0B20  30FF               	movlw	255
  3936  0B21  00F0               	movwf	eeprom_write@value
  3937  0B22  0872               	movf	EraseCaliDatabase@i,w
  3938  0B23  2500  3188         	fcall	_eeprom_write
  3939  0B25  3040               	movlw	64
  3940  0B26  0AF2               	incf	EraseCaliDatabase@i,f
  3941  0B27  0272               	subwf	EraseCaliDatabase@i,w
  3942  0B28  1803               	btfsc	3,0
  3943  0B29  0008               	return
  3944  0B2A  2B20               	goto	l2362
  3945  0B2B                     __end_of_EraseCaliDatabase:	
  3946  0B2B                     __ptext12:	
  3947 ;; *************** function _TMR0_SetInterruptHandler *****************
  3948 ;; Defined at:
  3949 ;;		line 126 in file "mcc_generated_files/tmr0.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  InterruptHan    2    0[COMMON] PTR void 
  3952 ;;		 -> BaseTimeTickISR(1), TMR0_DefaultInterruptHandler(1), 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg
  3959 ;; Tracked objects:
  3960 ;;		On entry : 1E/1
  3961 ;;		On exit  : 1F/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3964 ;;      Params:         2       0       0       0
  3965 ;;      Locals:         0       0       0       0
  3966 ;;      Temps:          0       0       0       0
  3967 ;;      Totals:         2       0       0       0
  3968 ;;Total ram usage:        2 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    3
  3971 ;; This function calls:
  3972 ;;		Nothing
  3973 ;; This function is called by:
  3974 ;;		_TMR0_Initialize
  3975 ;;		_main
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           
  3980                           ;psect for function _TMR0_SetInterruptHandler
  3981  0B2B                     _TMR0_SetInterruptHandler:	
  3982  0B2B                     l2280:	
  3983                           ;incstack = 0
  3984                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3985                           
  3986                           
  3987                           ;tmr0.c: 127: TMR0_InterruptHandler = InterruptHandler;
  3988  0B2B  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3989  0B2C  0020               	movlb	0	; select bank0
  3990  0B2D  00E8               	movwf	_TMR0_InterruptHandler+1
  3991  0B2E  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3992  0B2F  00E7               	movwf	_TMR0_InterruptHandler
  3993  0B30  0008               	return
  3994  0B31                     __end_of_TMR0_SetInterruptHandler:	
  3995  0B31                     __ptext16:	
  3996 ;; *************** function _CaliTabSendProcess *****************
  3997 ;; Defined at:
  3998 ;;		line 360 in file "main.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;		None
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;  i               1   28[BANK0 ] unsigned char 
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  1    wreg      void 
  4005 ;; Registers used:
  4006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4007 ;; Tracked objects:
  4008 ;;		On entry : 1F/0
  4009 ;;		On exit  : 1F/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4012 ;;      Params:         0       0       0       0
  4013 ;;      Locals:         0       5       0       0
  4014 ;;      Temps:          0       0       0       0
  4015 ;;      Totals:         0       5       0       0
  4016 ;;Total ram usage:        5 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    6
  4019 ;; This function calls:
  4020 ;;		_UpdateCaliBuf
  4021 ;;		___wmul
  4022 ;;		_printf
  4023 ;; This function is called by:
  4024 ;;		_main
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _CaliTabSendProcess
  4030  0B31                     _CaliTabSendProcess:	
  4031                           
  4032                           ;main.c: 362: uint8_t i;
  4033                           ;main.c: 364: if(CaliTabSendFlag)
  4034                           
  4035                           ;incstack = 0
  4036                           ; Regs used in _CaliTabSendProcess: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4037  0B31  083E               	movf	_CaliTabSendFlag,w
  4038  0B32  1903               	btfsc	3,2
  4039  0B33  0008               	return
  4040                           
  4041                           ;main.c: 365: {
  4042                           ;main.c: 366: CaliTabSendFlag = 0;
  4043  0B34  01BE               	clrf	_CaliTabSendFlag
  4044                           
  4045                           ;main.c: 367: UpdateCaliBuf();
  4046  0B35  246F  3188         	fcall	_UpdateCaliBuf
  4047                           
  4048                           ;main.c: 369: printf("The original and actual value are:\r\n");
  4049  0B37  30FE               	movlw	low (STR_1| (0+32768))
  4050  0B38  0020               	movlb	0	; select bank0
  4051  0B39  00CA               	movwf	printf@f
  4052  0B3A  3081               	movlw	high (STR_1| (0+32768))
  4053  0B3B  00CB               	movwf	printf@f+1
  4054  0B3C  238C  3188         	fcall	_printf
  4055                           
  4056                           ;main.c: 371: for(i = 0 ; i < 16 ; i++)
  4057  0B3E  01E6               	clrf	CaliTabSendProcess@i
  4058  0B3F                     l2916:	
  4059                           
  4060                           ;main.c: 372: {
  4061                           ;main.c: 373: printf("  No.%2d %4d-%4d mm { %5d , %5d },\r\n", i, i*30, (i+1)*30-1, Cali
      +                          Buf[i].OriginalValue, CaliBuf[i].ActualValue);
  4062  0B3F  2790  3188         	fcall	PL38	;call to abstracted procedure
  4063  0B41  2377  3188         	fcall	___wmul
  4064  0B43  0871               	movf	?___wmul+1,w
  4065  0B44  00E3               	movwf	_CaliTabSendProcess$1116+1
  4066  0B45  0870               	movf	?___wmul,w
  4067  0B46  00E2               	movwf	_CaliTabSendProcess$1116
  4068                           
  4069                           ;main.c: 372: {
  4070                           ;main.c: 373: printf("  No.%2d %4d-%4d mm { %5d , %5d },\r\n", i, i*30, (i+1)*30-1, Cali
      +                          Buf[i].OriginalValue, CaliBuf[i].ActualValue);
  4071  0B47  2790  3188         	fcall	PL38	;call to abstracted procedure
  4072  0B49  2377  3188         	fcall	___wmul
  4073  0B4B  0871               	movf	?___wmul+1,w
  4074  0B4C  00E5               	movwf	_CaliTabSendProcess$1117+1
  4075  0B4D  0870               	movf	?___wmul,w
  4076  0B4E  00E4               	movwf	_CaliTabSendProcess$1117
  4077  0B4F  301D               	movlw	29
  4078  0B50  07E4               	addwf	_CaliTabSendProcess$1117,f
  4079  0B51  1803               	skipnc
  4080  0B52  0AE5               	incf	_CaliTabSendProcess$1117+1,f
  4081                           
  4082                           ;main.c: 372: {
  4083                           ;main.c: 373: printf("  No.%2d %4d-%4d mm { %5d , %5d },\r\n", i, i*30, (i+1)*30-1, Cali
      +                          Buf[i].OriginalValue, CaliBuf[i].ActualValue);
  4084  0B53  30D9               	movlw	low (STR_2| (0+32768))
  4085  0B54  00CA               	movwf	printf@f
  4086  0B55  3081               	movlw	high (STR_2| (0+32768))
  4087  0B56  00CB               	movwf	printf@f+1
  4088  0B57  0866               	movf	CaliTabSendProcess@i,w
  4089  0B58  00CC               	movwf	?_printf+2
  4090  0B59  01CD               	clrf	?_printf+3
  4091  0B5A  0863               	movf	_CaliTabSendProcess$1116+1,w
  4092  0B5B  00CF               	movwf	?_printf+5
  4093  0B5C  0862               	movf	_CaliTabSendProcess$1116,w
  4094  0B5D  00CE               	movwf	?_printf+4
  4095  0B5E  0865               	movf	_CaliTabSendProcess$1117+1,w
  4096  0B5F  00D1               	movwf	?_printf+7
  4097  0B60  0864               	movf	_CaliTabSendProcess$1117,w
  4098  0B61  00D0               	movwf	?_printf+6
  4099  0B62  0866               	movf	CaliTabSendProcess@i,w
  4100  0B63  2746  3188         	fcall	PL16	;call to abstracted procedure
  4101  0B65  3F40               	moviw [0]fsr1
  4102  0B66  00D2               	movwf	?_printf+8
  4103  0B67  3F41               	moviw [1]fsr1
  4104  0B68  00D3               	movwf	?_printf+9
  4105  0B69  0866               	movf	CaliTabSendProcess@i,w
  4106  0B6A  2740  3188         	fcall	PL14	;call to abstracted procedure
  4107  0B6C  00D4               	movwf	?_printf+10
  4108  0B6D  3F41               	moviw [1]fsr1
  4109  0B6E  00D5               	movwf	?_printf+11
  4110  0B6F  238C  3188         	fcall	_printf
  4111  0B71  3010               	movlw	16
  4112  0B72  0AE6               	incf	CaliTabSendProcess@i,f
  4113  0B73  0266               	subwf	CaliTabSendProcess@i,w
  4114  0B74  1803               	btfsc	3,0
  4115  0B75  0008               	return
  4116  0B76  2B3F               	goto	l2916
  4117  0B77                     __end_of_CaliTabSendProcess:	
  4118  0B77                     __ptext21:	
  4119 ;; *************** function ___wmul *****************
  4120 ;; Defined at:
  4121 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  multiplier      2    0[COMMON] unsigned int 
  4124 ;;  multiplicand    2    2[COMMON] unsigned int 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  product         2    4[COMMON] unsigned int 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  2    0[COMMON] unsigned int 
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0
  4131 ;; Tracked objects:
  4132 ;;		On entry : 1F/0
  4133 ;;		On exit  : 1F/0
  4134 ;;		Unchanged: 1F/0
  4135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4136 ;;      Params:         4       0       0       0
  4137 ;;      Locals:         2       0       0       0
  4138 ;;      Temps:          0       0       0       0
  4139 ;;      Totals:         6       0       0       0
  4140 ;;Total ram usage:        6 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    3
  4143 ;; This function calls:
  4144 ;;		Nothing
  4145 ;; This function is called by:
  4146 ;;		_CaliTabSendProcess
  4147 ;;		_printf
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           
  4152                           ;psect for function ___wmul
  4153  0B77                     ___wmul:	
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4157  0B77  01F4               	clrf	___wmul@product
  4158  0B78  01F5               	clrf	___wmul@product+1
  4159  0B79                     l2450:	
  4160  0B79  1C70               	btfss	___wmul@multiplier,0
  4161  0B7A  2B7F               	goto	l2454
  4162  0B7B  0872               	movf	___wmul@multiplicand,w
  4163  0B7C  07F4               	addwf	___wmul@product,f
  4164  0B7D  0873               	movf	___wmul@multiplicand+1,w
  4165  0B7E  3DF5               	addwfc	___wmul@product+1,f
  4166  0B7F                     l2454:	
  4167  0B7F  35F2               	lslf	___wmul@multiplicand,f
  4168  0B80  0DF3               	rlf	___wmul@multiplicand+1,f
  4169  0B81  36F1               	lsrf	___wmul@multiplier+1,f
  4170  0B82  0CF0               	rrf	___wmul@multiplier,f
  4171  0B83  0870               	movf	___wmul@multiplier,w
  4172  0B84  0471               	iorwf	___wmul@multiplier+1,w
  4173  0B85  1D03               	btfss	3,2
  4174  0B86  2B79               	goto	l2450
  4175  0B87  0875               	movf	___wmul@product+1,w
  4176  0B88  00F1               	movwf	?___wmul+1
  4177  0B89  0874               	movf	___wmul@product,w
  4178  0B8A  00F0               	movwf	?___wmul
  4179  0B8B  0008               	return
  4180  0B8C                     __end_of___wmul:	
  4181  0B8C                     __ptext17:	
  4182 ;; *************** function _printf *****************
  4183 ;; Defined at:
  4184 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  4187 ;;		 -> STR_4(36), STR_3(27), STR_2(37), STR_1(37), 
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;  tmpval          4    0        struct .
  4190 ;;  width           2   21[BANK0 ] int 
  4191 ;;  val             2   19[BANK0 ] unsigned int 
  4192 ;;  cp              2    0        PTR const unsigned char 
  4193 ;;  len             2    0        unsigned int 
  4194 ;;  c               1   23[BANK0 ] char 
  4195 ;;  flag            1   18[BANK0 ] unsigned char 
  4196 ;;  prec            1   17[BANK0 ] char 
  4197 ;;  ap              1   16[BANK0 ] PTR void [1]
  4198 ;;		 -> ?_printf(2), 
  4199 ;; Return value:  Size  Location     Type
  4200 ;;                  2    0[BANK0 ] int 
  4201 ;; Registers used:
  4202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4203 ;; Tracked objects:
  4204 ;;		On entry : 1F/0
  4205 ;;		On exit  : 1F/0
  4206 ;;		Unchanged: 0/0
  4207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4208 ;;      Params:         0      12       0       0
  4209 ;;      Locals:         0       8       0       0
  4210 ;;      Temps:          0       4       0       0
  4211 ;;      Totals:         0      24       0       0
  4212 ;;Total ram usage:       24 bytes
  4213 ;; Hardware stack levels used:    1
  4214 ;; Hardware stack levels required when called:    5
  4215 ;; This function calls:
  4216 ;;		___lwdiv
  4217 ;;		___lwmod
  4218 ;;		___wmul
  4219 ;;		_isdigit
  4220 ;;		_putch
  4221 ;; This function is called by:
  4222 ;;		_CaliTabSendProcess
  4223 ;;		_UartRecProcess
  4224 ;;		_SendDataToMainBoardProcess
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _printf
  4230  0B8C                     _printf:	
  4231  0B8C                     l2714:	
  4232                           ;incstack = 0
  4233                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4234                           
  4235                           
  4236                           ;doprnt.c: 466: va_list ap;
  4237                           ;doprnt.c: 499: signed char c;
  4238                           ;doprnt.c: 501: int width;
  4239                           ;doprnt.c: 506: signed char prec;
  4240                           ;doprnt.c: 508: unsigned char flag;
  4241                           ;doprnt.c: 523: union {
  4242                           ;doprnt.c: 524: unsigned long vd;
  4243                           ;doprnt.c: 525: double integ;
  4244                           ;doprnt.c: 526: } tmpval;
  4245                           ;doprnt.c: 528: unsigned int val;
  4246                           ;doprnt.c: 529: unsigned len;
  4247                           ;doprnt.c: 530: const char * cp;
  4248                           ;doprnt.c: 533: *ap = __va_start();
  4249  0B8C  304C               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4250  0B8D  00DA               	movwf	printf@ap
  4251  0B8E                     l2792:	
  4252                           ;doprnt.c: 536: while(c = *f++) {
  4253                           
  4254  0B8E  0020               	movlb	0	; select bank0
  4255  0B8F  2727  3188         	fcall	PL10	;call to abstracted procedure
  4256  0B91  0861               	movf	printf@c,w
  4257  0B92  1903               	btfsc	3,2
  4258  0B93  0008               	return
  4259                           
  4260                           ;doprnt.c: 538: if(c != '%')
  4261  0B94  3A25               	xorlw	37
  4262  0B95  1903               	btfsc	3,2
  4263  0B96  2B9B               	goto	l2720
  4264                           
  4265                           ;doprnt.c: 540: {
  4266                           ;doprnt.c: 541: (putch(c) );
  4267  0B97  0861               	movf	printf@c,w
  4268  0B98  245F  3188         	fcall	_putch
  4269                           
  4270                           ;doprnt.c: 542: continue;
  4271  0B9A  2B8E               	goto	l2792
  4272  0B9B                     l2720:	
  4273                           
  4274                           ;doprnt.c: 543: }
  4275                           ;doprnt.c: 546: width = 0;
  4276  0B9B  01DF               	clrf	printf@width
  4277  0B9C  01E0               	clrf	printf@width+1
  4278                           
  4279                           ;doprnt.c: 548: flag = 0;
  4280  0B9D  01DC               	clrf	printf@flag
  4281                           
  4282                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4283  0B9E  2784  3188         	fcall	PL34	;call to abstracted procedure
  4284  0BA0  2461  3188         	fcall	_isdigit
  4285  0BA2  1C03               	btfss	3,0
  4286  0BA3  2BC8               	goto	l2736
  4287                           
  4288                           ;doprnt.c: 598: width = 0;
  4289  0BA4  01DF               	clrf	printf@width
  4290  0BA5  01E0               	clrf	printf@width+1
  4291  0BA6                     l2726:	
  4292                           
  4293                           ;doprnt.c: 600: width *= 10;
  4294  0BA6  300A               	movlw	10
  4295  0BA7  00F0               	movwf	___wmul@multiplier
  4296  0BA8  01F1               	clrf	___wmul@multiplier+1
  4297  0BA9  0860               	movf	printf@width+1,w
  4298  0BAA  00F3               	movwf	___wmul@multiplicand+1
  4299  0BAB  085F               	movf	printf@width,w
  4300  0BAC  00F2               	movwf	___wmul@multiplicand
  4301  0BAD  2377  3188         	fcall	___wmul
  4302  0BAF  0871               	movf	?___wmul+1,w
  4303  0BB0  00E0               	movwf	printf@width+1
  4304  0BB1  0870               	movf	?___wmul,w
  4305  0BB2  00DF               	movwf	printf@width
  4306                           
  4307                           ;doprnt.c: 601: width += *f++ - '0';
  4308  0BB3  2784  3188         	fcall	PL34	;call to abstracted procedure
  4309  0BB5  3ED0               	addlw	208
  4310  0BB6  00D6               	movwf	??_printf
  4311  0BB7  30FF               	movlw	255
  4312  0BB8  1803               	skipnc
  4313  0BB9  3000               	movlw	0
  4314  0BBA  00D7               	movwf	??_printf+1
  4315  0BBB  0856               	movf	??_printf,w
  4316  0BBC  07DF               	addwf	printf@width,f
  4317  0BBD  0857               	movf	??_printf+1,w
  4318  0BBE  3DE0               	addwfc	printf@width+1,f
  4319  0BBF  0ACA               	incf	printf@f,f
  4320  0BC0  1903               	skipnz
  4321  0BC1  0ACB               	incf	printf@f+1,f
  4322                           
  4323                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4324  0BC2  2784  3188         	fcall	PL34	;call to abstracted procedure
  4325  0BC4  2461  3188         	fcall	_isdigit
  4326  0BC6  1803               	btfsc	3,0
  4327  0BC7  2BA6               	goto	l2726
  4328  0BC8                     l2736:	
  4329  0BC8  2727  3188         	fcall	PL10	;call to abstracted procedure
  4330                           
  4331                           ; Switch size 1, requested type "space"
  4332                           ; Number of cases is 3, Range of values is 0 to 105
  4333                           ; switch strategies available:
  4334                           ; Name         Instructions Cycles
  4335                           ; simple_byte           10     6 (average)
  4336                           ; direct_byte          218     6 (fixed)
  4337                           ; jumptable            260     6 (fixed)
  4338                           ;	Chosen strategy is simple_byte
  4339  0BCA  3A00               	xorlw	0	; case 0
  4340  0BCB  1903               	skipnz
  4341  0BCC  2C5E               	goto	l566
  4342  0BCD  3A64               	xorlw	100	; case 100
  4343  0BCE  1903               	skipnz
  4344  0BCF  2BD4               	goto	l2738
  4345  0BD0  3A0D               	xorlw	13	; case 105
  4346  0BD1  1903               	skipnz
  4347  0BD2  2BD4               	goto	l2738
  4348  0BD3  2B8E               	goto	l2792
  4349  0BD4                     l2738:	
  4350                           
  4351                           ;doprnt.c: 1253: {
  4352                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4353  0BD4  085A               	movf	printf@ap,w
  4354  0BD5  0086               	movwf	6
  4355  0BD6  0187               	clrf	7
  4356  0BD7  3F40               	moviw [0]fsr1
  4357  0BD8  00DD               	movwf	printf@val
  4358  0BD9  3F41               	moviw [1]fsr1
  4359  0BDA  00DE               	movwf	printf@val+1
  4360  0BDB  0ADA               	incf	printf@ap,f
  4361  0BDC  0ADA               	incf	printf@ap,f
  4362                           
  4363                           ;doprnt.c: 1261: if((int)val < 0) {
  4364  0BDD  1FDE               	btfss	printf@val+1,7
  4365  0BDE  2BE6               	goto	l2748
  4366                           
  4367                           ;doprnt.c: 1262: flag |= 0x03;
  4368  0BDF  3003               	movlw	3
  4369  0BE0  04DC               	iorwf	printf@flag,f
  4370                           
  4371                           ;doprnt.c: 1263: val = -val;
  4372  0BE1  09DD               	comf	printf@val,f
  4373  0BE2  09DE               	comf	printf@val+1,f
  4374  0BE3  0ADD               	incf	printf@val,f
  4375  0BE4  1903               	skipnz
  4376  0BE5  0ADE               	incf	printf@val+1,f
  4377  0BE6                     l2748:	
  4378                           
  4379                           ;doprnt.c: 1264: }
  4380                           ;doprnt.c: 1266: }
  4381                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4382  0BE6  01E1               	clrf	printf@c
  4383  0BE7  0AE1               	incf	printf@c,f
  4384  0BE8                     l2754:	
  4385                           
  4386                           ;doprnt.c: 1306: if(val < dpowers[c])
  4387  0BE8  0861               	movf	printf@c,w
  4388  0BE9  274C  3188         	fcall	PL18	;call to abstracted procedure
  4389  0BEB  00D8               	movwf	??_printf+2
  4390  0BEC  3F01               	moviw [1]fsr0
  4391  0BED  00D9               	movwf	??_printf+3
  4392  0BEE  025E               	subwf	printf@val+1,w
  4393  0BEF  1D03               	skipz
  4394  0BF0  2BF3               	goto	u2125
  4395  0BF1  0858               	movf	??_printf+2,w
  4396  0BF2  025D               	subwf	printf@val,w
  4397  0BF3                     u2125:	
  4398  0BF3  1C03               	btfss	3,0
  4399  0BF4  2BFA               	goto	l2762
  4400  0BF5  3005               	movlw	5
  4401  0BF6  0AE1               	incf	printf@c,f
  4402  0BF7  0661               	xorwf	printf@c,w
  4403  0BF8  1D03               	btfss	3,2
  4404  0BF9  2BE8               	goto	l2754
  4405  0BFA                     l2762:	
  4406                           
  4407                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4408  0BFA  085F               	movf	printf@width,w
  4409  0BFB  0460               	iorwf	printf@width+1,w
  4410  0BFC  1903               	btfsc	3,2
  4411  0BFD  2C06               	goto	l2768
  4412  0BFE  085C               	movf	printf@flag,w
  4413  0BFF  3903               	andlw	3
  4414  0C00  1903               	btfsc	3,2
  4415  0C01  2C06               	goto	l2768
  4416                           
  4417                           ;doprnt.c: 1346: width--;
  4418  0C02  30FF               	movlw	-1
  4419  0C03  07DF               	addwf	printf@width,f
  4420  0C04  1C03               	skipc
  4421  0C05  03E0               	decf	printf@width+1,f
  4422  0C06                     l2768:	
  4423                           
  4424                           ;doprnt.c: 1381: if(width > c)
  4425  0C06  0861               	movf	printf@c,w
  4426  0C07  00D6               	movwf	??_printf
  4427  0C08  01D7               	clrf	??_printf+1
  4428  0C09  1BD6               	btfsc	??_printf,7
  4429  0C0A  03D7               	decf	??_printf+1,f
  4430  0C0B  0857               	movf	??_printf+1,w
  4431  0C0C  3A80               	xorlw	128
  4432  0C0D  00D8               	movwf	??_printf+2
  4433  0C0E  0860               	movf	printf@width+1,w
  4434  0C0F  3A80               	xorlw	128
  4435  0C10  0258               	subwf	??_printf+2,w
  4436  0C11  1D03               	skipz
  4437  0C12  2C15               	goto	u2165
  4438  0C13  085F               	movf	printf@width,w
  4439  0C14  0256               	subwf	??_printf,w
  4440  0C15                     u2165:	
  4441  0C15  1803               	skipnc
  4442  0C16  2C21               	goto	l2772
  4443                           
  4444                           ;doprnt.c: 1382: width -= c;
  4445  0C17  0020               	movlb	0	; select bank0
  4446  0C18  0861               	movf	printf@c,w
  4447  0C19  00D6               	movwf	??_printf
  4448  0C1A  01D7               	clrf	??_printf+1
  4449  0C1B  1BD6               	btfsc	??_printf,7
  4450  0C1C  03D7               	decf	??_printf+1,f
  4451  0C1D  02DF               	subwf	printf@width,f
  4452  0C1E  0857               	movf	??_printf+1,w
  4453  0C1F  3BE0               	subwfb	printf@width+1,f
  4454  0C20  2C24               	goto	l2774
  4455  0C21                     l2772:	
  4456                           
  4457                           ;doprnt.c: 1383: else
  4458                           ;doprnt.c: 1384: width = 0;
  4459  0C21  0020               	movlb	0	; select bank0
  4460  0C22  01DF               	clrf	printf@width
  4461  0C23  01E0               	clrf	printf@width+1
  4462  0C24                     l2774:	
  4463                           
  4464                           ;doprnt.c: 1422: {
  4465                           ;doprnt.c: 1424: if(width
  4466                           ;doprnt.c: 1428: )
  4467  0C24  085F               	movf	printf@width,w
  4468  0C25  0460               	iorwf	printf@width+1,w
  4469  0C26  1903               	btfsc	3,2
  4470  0C27  2C34               	goto	l2780
  4471  0C28                     l2776:	
  4472                           
  4473                           ;doprnt.c: 1430: (putch(' ') );
  4474  0C28  3020               	movlw	32
  4475  0C29  245F  3188         	fcall	_putch
  4476                           
  4477                           ;doprnt.c: 1431: while(--width);
  4478  0C2B  30FF               	movlw	-1
  4479  0C2C  0020               	movlb	0	; select bank0
  4480  0C2D  07DF               	addwf	printf@width,f
  4481  0C2E  1C03               	skipc
  4482  0C2F  03E0               	decf	printf@width+1,f
  4483  0C30  085F               	movf	printf@width,w
  4484  0C31  0460               	iorwf	printf@width+1,w
  4485  0C32  1D03               	btfss	3,2
  4486  0C33  2C28               	goto	l2776
  4487  0C34                     l2780:	
  4488                           
  4489                           ;doprnt.c: 1438: if(flag & 0x03)
  4490  0C34  085C               	movf	printf@flag,w
  4491  0C35  3903               	andlw	3
  4492  0C36  1903               	btfsc	3,2
  4493  0C37  2C3B               	goto	l2784
  4494                           
  4495                           ;doprnt.c: 1439: (putch('-') );
  4496  0C38  302D               	movlw	45
  4497  0C39  245F  3188         	fcall	_putch
  4498  0C3B                     l2784:	
  4499                           
  4500                           ;doprnt.c: 1469: }
  4501                           ;doprnt.c: 1472: prec = c;
  4502  0C3B  0020               	movlb	0	; select bank0
  4503  0C3C  0861               	movf	printf@c,w
  4504  0C3D  00DB               	movwf	printf@prec
  4505                           
  4506                           ;doprnt.c: 1474: while(prec--) {
  4507  0C3E  2C59               	goto	l2790
  4508  0C3F                     l2786:	
  4509                           
  4510                           ;doprnt.c: 1478: {
  4511                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4512  0C3F  300A               	movlw	10
  4513  0C40  00F7               	movwf	___lwmod@divisor
  4514  0C41  01F8               	clrf	___lwmod@divisor+1
  4515  0C42  085B               	movf	printf@prec,w
  4516  0C43  274C  3188         	fcall	PL18	;call to abstracted procedure
  4517  0C45  00F0               	movwf	___lwdiv@divisor
  4518  0C46  3F01               	moviw [1]fsr0
  4519  0C47  00F1               	movwf	___lwdiv@divisor+1
  4520  0C48  085E               	movf	printf@val+1,w
  4521  0C49  00F3               	movwf	___lwdiv@dividend+1
  4522  0C4A  085D               	movf	printf@val,w
  4523  0C4B  00F2               	movwf	___lwdiv@dividend
  4524  0C4C  24BB  3188         	fcall	___lwdiv
  4525  0C4E  0871               	movf	?___lwdiv+1,w
  4526  0C4F  00FA               	movwf	___lwmod@dividend+1
  4527  0C50  0870               	movf	?___lwdiv,w
  4528  0C51  00F9               	movwf	___lwmod@dividend
  4529  0C52  24E0  3188         	fcall	___lwmod
  4530  0C54  0877               	movf	?___lwmod,w
  4531  0C55  3E30               	addlw	48
  4532  0C56  00E1               	movwf	printf@c
  4533                           
  4534                           ;doprnt.c: 1523: }
  4535                           ;doprnt.c: 1524: (putch(c) );
  4536  0C57  245F  3188         	fcall	_putch
  4537  0C59                     l2790:	
  4538  0C59  0020               	movlb	0	; select bank0
  4539  0C5A  03DB               	decf	printf@prec,f
  4540  0C5B  0F5B               	incfsz	printf@prec,w
  4541  0C5C  2C3F               	goto	l2786
  4542  0C5D  2B8E               	goto	l2792
  4543  0C5E                     l566:	
  4544  0C5E  0008               	return
  4545  0C5F                     __end_of_printf:	
  4546  0C5F                     __ptext18:	
  4547 ;; *************** function _putch *****************
  4548 ;; Defined at:
  4549 ;;		line 160 in file "mcc_generated_files/eusart.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  txData          1    wreg     unsigned char 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  txData          1    1[COMMON] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 1F/0
  4560 ;;		On exit  : 1F/1
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4563 ;;      Params:         0       0       0       0
  4564 ;;      Locals:         1       0       0       0
  4565 ;;      Temps:          0       0       0       0
  4566 ;;      Totals:         1       0       0       0
  4567 ;;Total ram usage:        1 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    4
  4570 ;; This function calls:
  4571 ;;		_EUSART_Write
  4572 ;; This function is called by:
  4573 ;;		_printf
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           
  4578                           ;psect for function _putch
  4579  0C5F                     _putch:	
  4580                           
  4581                           ;incstack = 0
  4582                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4583                           ;putch@txData stored from wreg
  4584  0C5F  00F1               	movwf	putch@txData
  4585                           
  4586                           ;eusart.c: 162: EUSART_Write(txData);
  4587  0C60  2FA3               	ljmp	_EUSART_Write
  4588  0C61                     __end_of_putch:	
  4589  0C61                     __ptext20:	
  4590 ;; *************** function _isdigit *****************
  4591 ;; Defined at:
  4592 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  c               1    wreg     unsigned char 
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  c               1    1[COMMON] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;		None               void
  4599 ;; Registers used:
  4600 ;;		wreg, status,2, status,0
  4601 ;; Tracked objects:
  4602 ;;		On entry : 1F/0
  4603 ;;		On exit  : 1F/0
  4604 ;;		Unchanged: 1F/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4606 ;;      Params:         0       0       0       0
  4607 ;;      Locals:         2       0       0       0
  4608 ;;      Temps:          0       0       0       0
  4609 ;;      Totals:         2       0       0       0
  4610 ;;Total ram usage:        2 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    3
  4613 ;; This function calls:
  4614 ;;		Nothing
  4615 ;; This function is called by:
  4616 ;;		_printf
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           
  4621                           ;psect for function _isdigit
  4622  0C61                     _isdigit:	
  4623                           
  4624                           ;incstack = 0
  4625                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4626                           ;isdigit@c stored from wreg
  4627  0C61  00F1               	movwf	isdigit@c
  4628  0C62  303A               	movlw	58
  4629  0C63  01F0               	clrf	_isdigit$834
  4630  0C64  0271               	subwf	isdigit@c,w
  4631  0C65  1803               	skipnc
  4632  0C66  2C6D               	goto	l2444
  4633  0C67  3030               	movlw	48
  4634  0C68  0271               	subwf	isdigit@c,w
  4635  0C69  1C03               	skipc
  4636  0C6A  2C6D               	goto	l2444
  4637  0C6B  01F0               	clrf	_isdigit$834
  4638  0C6C  0AF0               	incf	_isdigit$834,f
  4639  0C6D                     l2444:	
  4640  0C6D  0C70               	rrf	_isdigit$834,w
  4641  0C6E  0008               	return
  4642  0C6F                     __end_of_isdigit:	
  4643  0C6F                     __ptext39:	
  4644 ;; *************** function _UpdateCaliBuf *****************
  4645 ;; Defined at:
  4646 ;;		line 185 in file "main.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;		None
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;  tmp1            4    8[COMMON] unsigned char [4]
  4651 ;;  i               1   12[COMMON] unsigned char 
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  1    wreg      void 
  4654 ;; Registers used:
  4655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4656 ;; Tracked objects:
  4657 ;;		On entry : 1F/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4661 ;;      Params:         0       0       0       0
  4662 ;;      Locals:         5       0       0       0
  4663 ;;      Temps:          0       0       0       0
  4664 ;;      Totals:         5       0       0       0
  4665 ;;Total ram usage:        5 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    5
  4668 ;; This function calls:
  4669 ;;		_EEpromBufferRead
  4670 ;; This function is called by:
  4671 ;;		_Update2CaliDatabase
  4672 ;;		_ConstructCaliTab
  4673 ;;		_CaliTabSendProcess
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           
  4678                           ;psect for function _UpdateCaliBuf
  4679  0C6F                     _UpdateCaliBuf:	
  4680                           
  4681                           ;main.c: 187: uint8_t tmp1[4];
  4682                           ;main.c: 188: uint8_t i;
  4683                           ;main.c: 190: for(i = 0 ; i < 16 ; i++)
  4684                           
  4685                           ;incstack = 0
  4686                           ; Regs used in _UpdateCaliBuf: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4687  0C6F  01FC               	clrf	UpdateCaliBuf@i
  4688  0C70                     l2346:	
  4689                           
  4690                           ;main.c: 191: {
  4691                           ;main.c: 192: EEpromBufferRead(tmp1, 0+i*4, 4);
  4692  0C70  087C               	movf	UpdateCaliBuf@i,w
  4693  0C71  0709               	addwf	9,w
  4694  0C72  0709               	addwf	9,w
  4695  0C73  00F1               	movwf	EEpromBufferRead@ReadAddr
  4696  0C74  3004               	movlw	4
  4697  0C75  00F2               	movwf	EEpromBufferRead@NumByteToRead
  4698  0C76  3078               	movlw	(low (UpdateCaliBuf@tmp1| 0))& (0+255)
  4699  0C77  01F3               	clrf	EEpromBufferRead@NumByteToRead+1
  4700  0C78  2490  3188         	fcall	_EEpromBufferRead
  4701                           
  4702                           ;main.c: 193: CaliBuf[i].OriginalValue = ((uint16_t)tmp1[0] << 8) | ((uint16_t)tmp1[1]);
  4703  0C7A  087C               	movf	UpdateCaliBuf@i,w
  4704  0C7B  2746  3188         	fcall	PL16	;call to abstracted procedure
  4705  0C7D  0879               	movf	UpdateCaliBuf@tmp1+1,w
  4706  0C7E  3FC0               	movwi [0]fsr1
  4707  0C7F  0878               	movf	UpdateCaliBuf@tmp1,w
  4708  0C80  3FC1               	movwi [1]fsr1
  4709                           
  4710                           ;main.c: 194: CaliBuf[i].ActualValue = ((uint16_t)tmp1[2] << 8) | ((uint16_t)tmp1[3]);
  4711  0C81  087C               	movf	UpdateCaliBuf@i,w
  4712  0C82  0709               	addwf	9,w
  4713  0C83  0709               	addwf	9,w
  4714  0C84  3EA2               	addlw	(low ((_CaliBuf| 0+2)))& (0+255)
  4715  0C85  0086               	movwf	6
  4716  0C86  087B               	movf	UpdateCaliBuf@tmp1+3,w
  4717  0C87  3FC0               	movwi [0]fsr1
  4718  0C88  087A               	movf	UpdateCaliBuf@tmp1+2,w
  4719  0C89  3FC1               	movwi [1]fsr1
  4720  0C8A  3010               	movlw	16
  4721  0C8B  0AFC               	incf	UpdateCaliBuf@i,f
  4722  0C8C  027C               	subwf	UpdateCaliBuf@i,w
  4723  0C8D  1803               	btfsc	3,0
  4724  0C8E  0008               	return
  4725  0C8F  2C70               	goto	l2346
  4726  0C90                     __end_of_UpdateCaliBuf:	
  4727  0C90                     __ptext40:	
  4728 ;; *************** function _EEpromBufferRead *****************
  4729 ;; Defined at:
  4730 ;;		line 113 in file "main.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  pBuffer         1    wreg     PTR unsigned char 
  4733 ;;		 -> UpdateCaliBuf@tmp1(4), 
  4734 ;;  ReadAddr        1    1[COMMON] unsigned char 
  4735 ;;  NumByteToRea    2    2[COMMON] unsigned int 
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  pBuffer         1    6[COMMON] PTR unsigned char 
  4738 ;;		 -> UpdateCaliBuf@tmp1(4), 
  4739 ;;  i               1    7[COMMON] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4749 ;;      Params:         3       0       0       0
  4750 ;;      Locals:         2       0       0       0
  4751 ;;      Temps:          2       0       0       0
  4752 ;;      Totals:         7       0       0       0
  4753 ;;Total ram usage:        7 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    4
  4756 ;; This function calls:
  4757 ;;		_eeprom_read
  4758 ;; This function is called by:
  4759 ;;		_UpdateCaliBuf
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           
  4764                           ;psect for function _EEpromBufferRead
  4765  0C90                     _EEpromBufferRead:	
  4766                           
  4767                           ;incstack = 0
  4768                           ; Regs used in _EEpromBufferRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4769                           ;EEpromBufferRead@pBuffer stored from wreg
  4770  0C90  00F6               	movwf	EEpromBufferRead@pBuffer
  4771                           
  4772                           ;main.c: 115: uint8_t i;
  4773                           ;main.c: 117: for(i = 0 ; i < NumByteToRead ; i++)
  4774  0C91  01F7               	clrf	EEpromBufferRead@i
  4775  0C92                     l2130:	
  4776  0C92  0877               	movf	EEpromBufferRead@i,w
  4777  0C93  00F4               	movwf	??_EEpromBufferRead
  4778  0C94  01F5               	clrf	??_EEpromBufferRead+1
  4779  0C95  0873               	movf	EEpromBufferRead@NumByteToRead+1,w
  4780  0C96  0275               	subwf	??_EEpromBufferRead+1,w
  4781  0C97  1D03               	skipz
  4782  0C98  2C9B               	goto	u1375
  4783  0C99  0872               	movf	EEpromBufferRead@NumByteToRead,w
  4784  0C9A  0274               	subwf	??_EEpromBufferRead,w
  4785  0C9B                     u1375:	
  4786  0C9B  1803               	btfsc	3,0
  4787  0C9C  0008               	return
  4788                           
  4789                           ;main.c: 118: {
  4790                           ;main.c: 119: pBuffer[i] = eeprom_read(ReadAddr+i);
  4791  0C9D  0877               	movf	EEpromBufferRead@i,w
  4792  0C9E  0776               	addwf	EEpromBufferRead@pBuffer,w
  4793  0C9F  00F4               	movwf	??_EEpromBufferRead
  4794  0CA0  0086               	movwf	6
  4795  0CA1  0187               	clrf	7
  4796  0CA2  0871               	movf	EEpromBufferRead@ReadAddr,w
  4797  0CA3  0777               	addwf	EEpromBufferRead@i,w
  4798  0CA4  24A9  3188         	fcall	_eeprom_read
  4799  0CA6  0081               	movwf	1
  4800  0CA7  0AF7               	incf	EEpromBufferRead@i,f
  4801  0CA8  2C92               	goto	l2130
  4802  0CA9                     __end_of_EEpromBufferRead:	
  4803  0CA9                     __ptext41:	
  4804 ;; *************** function _eeprom_read *****************
  4805 ;; Defined at:
  4806 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eeread.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  addr            1    wreg     unsigned char 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  addr            1    0[COMMON] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      unsigned char 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 1F/3
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4820 ;;      Params:         0       0       0       0
  4821 ;;      Locals:         1       0       0       0
  4822 ;;      Temps:          0       0       0       0
  4823 ;;      Totals:         1       0       0       0
  4824 ;;Total ram usage:        1 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    3
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		_EEpromBufferRead
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           
  4835                           ;psect for function _eeprom_read
  4836  0CA9                     _eeprom_read:	
  4837                           
  4838                           ;incstack = 0
  4839                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4840                           ;eeprom_read@addr stored from wreg
  4841  0CA9  00F0               	movwf	eeprom_read@addr
  4842  0CAA                     l579:	
  4843  0CAA  0064               	clrwdt	;# 
  4844  0CAB  0023               	movlb	3	; select bank3
  4845  0CAC  1895               	btfsc	21,1	;volsfr
  4846  0CAD  2CAA               	goto	l579
  4847  0CAE  0870               	movf	eeprom_read@addr,w
  4848  0CAF  0091               	movwf	17	;volatile
  4849  0CB0  0192               	clrf	18	;volatile
  4850  0CB1  303F               	movlw	63
  4851  0CB2  0595               	andwf	21,f	;volsfr
  4852  0CB3  1415               	bsf	21,0	;volsfr
  4853  0CB4  1003               	clrc
  4854  0CB5  1815               	btfsc	21,0	;volsfr
  4855  0CB6  1403               	setc
  4856  0CB7  3000               	movlw	0
  4857  0CB8  3D09               	addwfc	9,w
  4858  0CB9  0813               	movf	19,w	;volatile
  4859  0CBA  0008               	return
  4860  0CBB                     __end_of_eeprom_read:	
  4861  0CBB                     __ptext38:	
  4862 ;; *************** function ___lwdiv *****************
  4863 ;; Defined at:
  4864 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;  divisor         2    0[COMMON] unsigned int 
  4867 ;;  dividend        2    2[COMMON] unsigned int 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;  quotient        2    4[COMMON] unsigned int 
  4870 ;;  counter         1    6[COMMON] unsigned char 
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  2    0[COMMON] unsigned int 
  4873 ;; Registers used:
  4874 ;;		wreg, status,2, status,0
  4875 ;; Tracked objects:
  4876 ;;		On entry : 1F/0
  4877 ;;		On exit  : 1F/0
  4878 ;;		Unchanged: 1F/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4880 ;;      Params:         4       0       0       0
  4881 ;;      Locals:         3       0       0       0
  4882 ;;      Temps:          0       0       0       0
  4883 ;;      Totals:         7       0       0       0
  4884 ;;Total ram usage:        7 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    3
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_Update2CaliDatabase
  4891 ;;		_printf
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function ___lwdiv
  4897  0CBB                     ___lwdiv:	
  4898                           
  4899                           ;incstack = 0
  4900                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4901  0CBB  01F4               	clrf	___lwdiv@quotient
  4902  0CBC  01F5               	clrf	___lwdiv@quotient+1
  4903  0CBD  0870               	movf	___lwdiv@divisor,w
  4904  0CBE  0471               	iorwf	___lwdiv@divisor+1,w
  4905  0CBF  1903               	btfsc	3,2
  4906  0CC0  2CDB               	goto	l2526
  4907  0CC1  01F6               	clrf	___lwdiv@counter
  4908  0CC2                     L4:	
  4909  0CC2  0AF6               	incf	___lwdiv@counter,f
  4910  0CC3  1BF1               	btfsc	___lwdiv@divisor+1,7
  4911  0CC4  2CC8               	goto	l2514
  4912  0CC5  35F0               	lslf	___lwdiv@divisor,f
  4913  0CC6  0DF1               	rlf	___lwdiv@divisor+1,f
  4914  0CC7  2CC2               	goto	L4
  4915  0CC8                     l2514:	
  4916  0CC8  35F4               	lslf	___lwdiv@quotient,f
  4917  0CC9  0DF5               	rlf	___lwdiv@quotient+1,f
  4918  0CCA  0871               	movf	___lwdiv@divisor+1,w
  4919  0CCB  0273               	subwf	___lwdiv@dividend+1,w
  4920  0CCC  1D03               	skipz
  4921  0CCD  2CD0               	goto	u1835
  4922  0CCE  0870               	movf	___lwdiv@divisor,w
  4923  0CCF  0272               	subwf	___lwdiv@dividend,w
  4924  0CD0                     u1835:	
  4925  0CD0  1C03               	skipc
  4926  0CD1  2CD7               	goto	l2522
  4927  0CD2  0870               	movf	___lwdiv@divisor,w
  4928  0CD3  02F2               	subwf	___lwdiv@dividend,f
  4929  0CD4  0871               	movf	___lwdiv@divisor+1,w
  4930  0CD5  3BF3               	subwfb	___lwdiv@dividend+1,f
  4931  0CD6  1474               	bsf	___lwdiv@quotient,0
  4932  0CD7                     l2522:	
  4933  0CD7  36F1               	lsrf	___lwdiv@divisor+1,f
  4934  0CD8  0CF0               	rrf	___lwdiv@divisor,f
  4935  0CD9  0BF6               	decfsz	___lwdiv@counter,f
  4936  0CDA  2CC8               	goto	l2514
  4937  0CDB                     l2526:	
  4938  0CDB  0875               	movf	___lwdiv@quotient+1,w
  4939  0CDC  00F1               	movwf	?___lwdiv+1
  4940  0CDD  0874               	movf	___lwdiv@quotient,w
  4941  0CDE  00F0               	movwf	?___lwdiv
  4942  0CDF  0008               	return
  4943  0CE0                     __end_of___lwdiv:	
  4944  0CE0                     __ptext37:	
  4945 ;; *************** function ___lwmod *****************
  4946 ;; Defined at:
  4947 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  divisor         2    7[COMMON] unsigned int 
  4950 ;;  dividend        2    9[COMMON] unsigned int 
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;  counter         1   11[COMMON] unsigned char 
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  2    7[COMMON] unsigned int 
  4955 ;; Registers used:
  4956 ;;		wreg, status,2, status,0
  4957 ;; Tracked objects:
  4958 ;;		On entry : 1F/0
  4959 ;;		On exit  : 1F/0
  4960 ;;		Unchanged: 1F/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4962 ;;      Params:         4       0       0       0
  4963 ;;      Locals:         1       0       0       0
  4964 ;;      Temps:          0       0       0       0
  4965 ;;      Totals:         5       0       0       0
  4966 ;;Total ram usage:        5 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    3
  4969 ;; This function calls:
  4970 ;;		Nothing
  4971 ;; This function is called by:
  4972 ;;		_Update2CaliDatabase
  4973 ;;		_printf
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           
  4978                           ;psect for function ___lwmod
  4979  0CE0                     ___lwmod:	
  4980                           
  4981                           ;incstack = 0
  4982                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4983  0CE0  0877               	movf	___lwmod@divisor,w
  4984  0CE1  0478               	iorwf	___lwmod@divisor+1,w
  4985  0CE2  1903               	btfsc	3,2
  4986  0CE3  2CFB               	goto	l2546
  4987  0CE4  01FB               	clrf	___lwmod@counter
  4988  0CE5                     L3:	
  4989  0CE5  0AFB               	incf	___lwmod@counter,f
  4990  0CE6  1BF8               	btfsc	___lwmod@divisor+1,7
  4991  0CE7  2CEB               	goto	l2538
  4992  0CE8  35F7               	lslf	___lwmod@divisor,f
  4993  0CE9  0DF8               	rlf	___lwmod@divisor+1,f
  4994  0CEA  2CE5               	goto	L3
  4995  0CEB                     l2538:	
  4996  0CEB  0878               	movf	___lwmod@divisor+1,w
  4997  0CEC  027A               	subwf	___lwmod@dividend+1,w
  4998  0CED  1D03               	skipz
  4999  0CEE  2CF1               	goto	u1875
  5000  0CEF  0877               	movf	___lwmod@divisor,w
  5001  0CF0  0279               	subwf	___lwmod@dividend,w
  5002  0CF1                     u1875:	
  5003  0CF1  1C03               	skipc
  5004  0CF2  2CF7               	goto	l2542
  5005  0CF3  0877               	movf	___lwmod@divisor,w
  5006  0CF4  02F9               	subwf	___lwmod@dividend,f
  5007  0CF5  0878               	movf	___lwmod@divisor+1,w
  5008  0CF6  3BFA               	subwfb	___lwmod@dividend+1,f
  5009  0CF7                     l2542:	
  5010  0CF7  36F8               	lsrf	___lwmod@divisor+1,f
  5011  0CF8  0CF7               	rrf	___lwmod@divisor,f
  5012  0CF9  0BFB               	decfsz	___lwmod@counter,f
  5013  0CFA  2CEB               	goto	l2538
  5014  0CFB                     l2546:	
  5015  0CFB  087A               	movf	___lwmod@dividend+1,w
  5016  0CFC  00F8               	movwf	?___lwmod+1
  5017  0CFD  0879               	movf	___lwmod@dividend,w
  5018  0CFE  00F7               	movwf	?___lwmod
  5019  0CFF  0008               	return
  5020  0D00                     __end_of___lwmod:	
  5021  0D00                     __ptext44:	
  5022 ;; *************** function _eeprom_write *****************
  5023 ;; Defined at:
  5024 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eewrite.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;  addr            1    wreg     unsigned char 
  5027 ;;  value           1    0[COMMON] unsigned char 
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  addr            1    1[COMMON] unsigned char 
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  1    wreg      void 
  5032 ;; Registers used:
  5033 ;;		wreg, status,2, status,0
  5034 ;; Tracked objects:
  5035 ;;		On entry : 1F/0
  5036 ;;		On exit  : 1F/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5039 ;;      Params:         1       0       0       0
  5040 ;;      Locals:         1       0       0       0
  5041 ;;      Temps:          0       0       0       0
  5042 ;;      Totals:         2       0       0       0
  5043 ;;Total ram usage:        2 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    3
  5046 ;; This function calls:
  5047 ;;		Nothing
  5048 ;; This function is called by:
  5049 ;;		_EEpromBuffeWirte
  5050 ;;		_EraseCaliDatabase
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           
  5055                           ;psect for function _eeprom_write
  5056  0D00                     _eeprom_write:	
  5057                           
  5058                           ;incstack = 0
  5059                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  5060                           ;eeprom_write@addr stored from wreg
  5061  0D00  00F1               	movwf	eeprom_write@addr
  5062  0D01                     l601:	
  5063  0D01  0023               	movlb	3	; select bank3
  5064  0D02  1895               	btfsc	21,1	;volsfr
  5065  0D03  2D01               	goto	l601
  5066  0D04  0871               	movf	eeprom_write@addr,w
  5067  0D05  0091               	movwf	17	;volatile
  5068  0D06  0192               	clrf	18	;volatile
  5069  0D07  0870               	movf	eeprom_write@value,w
  5070  0D08  0093               	movwf	19	;volatile
  5071  0D09  303F               	movlw	63
  5072  0D0A  0595               	andwf	21,f	;volsfr
  5073  0D0B  0020               	movlb	0	; select bank0
  5074  0D0C  1003               	bcf	3,0	;volatile
  5075  0D0D  1B8B               	btfsc	11,7	;volatile
  5076  0D0E  1403               	bsf	3,0	;volatile
  5077  0D0F  138B               	bcf	11,7	;volatile
  5078  0D10  0023               	movlb	3	; select bank3
  5079  0D11  1515               	bsf	21,2	;volsfr
  5080  0D12  3055               	movlw	85
  5081  0D13  0096               	movwf	22	;volsfr
  5082  0D14  30AA               	movlw	170
  5083  0D15  0096               	movwf	22	;volsfr
  5084  0D16  1495               	bsf	21,1	;volsfr
  5085  0D17  1115               	bcf	21,2	;volsfr
  5086  0D18  0020               	movlb	0	; select bank0
  5087  0D19  1803               	btfsc	3,0	;volatile
  5088  0D1A  178B               	bsf	11,7	;volatile
  5089  0D1B  0008               	return
  5090  0D1C                     __end_of_eeprom_write:	
  5091  0D1C                     __ptext23:	
  5092 ;; *************** function _readADC_Differential_0_1_part2 *****************
  5093 ;; Defined at:
  5094 ;;		line 464 in file "ads1115.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  res             2    6[BANK0 ] unsigned int 
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  2    4[BANK0 ] int 
  5101 ;; Registers used:
  5102 ;;		wreg, status,2, status,0, pclath, cstack
  5103 ;; Tracked objects:
  5104 ;;		On entry : 1F/0
  5105 ;;		On exit  : 1F/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5108 ;;      Params:         0       2       0       0
  5109 ;;      Locals:         0       2       0       0
  5110 ;;      Temps:          0       0       0       0
  5111 ;;      Totals:         0       4       0       0
  5112 ;;Total ram usage:        4 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    6
  5115 ;; This function calls:
  5116 ;;		_readRegister
  5117 ;; This function is called by:
  5118 ;;		_ADCProcess
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           
  5123                           ;psect for function _readADC_Differential_0_1_part2
  5124  0D1C                     _readADC_Differential_0_1_part2:	
  5125                           
  5126                           ;ads1115.c: 466: uint16_t res;
  5127                           ;ads1115.c: 469: res = readRegister(m_i2cAddress, (0x00)) >> 0;
  5128                           
  5129                           ;incstack = 0
  5130                           ; Regs used in _readADC_Differential_0_1_part2: [wreg+status,2+status,0+pclath+cstack]
  5131  0D1C  083B               	movf	_m_i2cAddress+1,w
  5132  0D1D  00FB               	movwf	readRegister@i2cAddress+1
  5133  0D1E  083A               	movf	_m_i2cAddress,w
  5134  0D1F  00FA               	movwf	readRegister@i2cAddress
  5135  0D20  01FC               	clrf	readRegister@reg
  5136  0D21  01FD               	clrf	readRegister@reg+1
  5137  0D22  2568  3188         	fcall	_readRegister
  5138  0D24  087B               	movf	?_readRegister+1,w
  5139  0D25  00D1               	movwf	readADC_Differential_0_1_part2@res+1
  5140  0D26  087A               	movf	?_readRegister,w
  5141  0D27  00D0               	movwf	readADC_Differential_0_1_part2@res
  5142                           
  5143                           ;ads1115.c: 470: if (m_bitShift == 0)
  5144  0D28  0836               	movf	_m_bitShift,w
  5145  0D29  0437               	iorwf	_m_bitShift+1,w
  5146  0D2A  1D03               	btfss	3,2
  5147  0D2B  2D31               	goto	l2848
  5148  0D2C                     l2842:	
  5149                           
  5150                           ;ads1115.c: 471: {
  5151                           ;ads1115.c: 472: return (int16_t)res;
  5152  0D2C  0851               	movf	readADC_Differential_0_1_part2@res+1,w
  5153  0D2D  00CF               	movwf	?_readADC_Differential_0_1_part2+1
  5154  0D2E  0850               	movf	readADC_Differential_0_1_part2@res,w
  5155  0D2F  00CE               	movwf	?_readADC_Differential_0_1_part2
  5156  0D30  0008               	return
  5157  0D31                     l2848:	
  5158                           
  5159                           ;ads1115.c: 474: else
  5160                           ;ads1115.c: 475: {
  5161                           ;ads1115.c: 478: if (res > 0x07FF)
  5162  0D31  3008               	movlw	8
  5163  0D32  0251               	subwf	readADC_Differential_0_1_part2@res+1,w
  5164  0D33  3000               	movlw	0
  5165  0D34  1903               	skipnz
  5166  0D35  0250               	subwf	readADC_Differential_0_1_part2@res,w
  5167  0D36  1C03               	skipc
  5168  0D37  2D2C               	goto	l2842
  5169                           
  5170                           ;ads1115.c: 479: {
  5171                           ;ads1115.c: 481: res |= 0xF000;
  5172  0D38  3000               	movlw	0
  5173  0D39  04D0               	iorwf	readADC_Differential_0_1_part2@res,f
  5174  0D3A  30F0               	movlw	240
  5175  0D3B  04D1               	iorwf	readADC_Differential_0_1_part2@res+1,f
  5176  0D3C  2D2C               	goto	l2842
  5177  0D3D                     __end_of_readADC_Differential_0_1_part2:	
  5178  0D3D                     __ptext26:	
  5179 ;; *************** function _ReceiveFromRom *****************
  5180 ;; Defined at:
  5181 ;;		line 110 in file "ads1115.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;		None
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  count           2    8[COMMON] unsigned int 
  5186 ;;  m               2    6[COMMON] unsigned int 
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  2    4[COMMON] unsigned int 
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0, pclath, cstack
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/1
  5193 ;;		On exit  : 1F/1
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5196 ;;      Params:         2       0       0       0
  5197 ;;      Locals:         4       0       0       0
  5198 ;;      Temps:          0       0       0       0
  5199 ;;      Totals:         6       0       0       0
  5200 ;;Total ram usage:        6 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:    4
  5203 ;; This function calls:
  5204 ;;		_IIC_Delay
  5205 ;;		_IIC_Delay_Half
  5206 ;;		_IsCharOne
  5207 ;; This function is called by:
  5208 ;;		_readRegister
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           
  5213                           ;psect for function _ReceiveFromRom
  5214  0D3D                     _ReceiveFromRom:	
  5215                           
  5216                           ;ads1115.c: 112: uint16_t m = 0, count;
  5217                           
  5218                           ;incstack = 0
  5219                           ; Regs used in _ReceiveFromRom: [wreg+status,2+status,0+pclath+cstack]
  5220  0D3D  01F6               	clrf	ReceiveFromRom@m
  5221  0D3E  01F7               	clrf	ReceiveFromRom@m+1
  5222  0D3F  0021               	movlb	1	; select bank1
  5223  0D40  160C               	bsf	12,4	;volatile
  5224                           
  5225                           ;ads1115.c: 114: IIC_Delay();
  5226  0D41  2630  3188         	fcall	_IIC_Delay
  5227                           
  5228                           ;ads1115.c: 115: for (count = 0; count < 8; count++)
  5229  0D43  01F8               	clrf	ReceiveFromRom@count
  5230  0D44  01F9               	clrf	ReceiveFromRom@count+1
  5231  0D45                     l2214:	
  5232                           
  5233                           ;ads1115.c: 116: {
  5234                           ;ads1115.c: 117: m = m << 1;
  5235  0D45  35F6               	lslf	ReceiveFromRom@m,f
  5236  0D46  0DF7               	rlf	ReceiveFromRom@m+1,f
  5237  0D47  0022               	movlb	2	; select bank2
  5238  0D48  168C               	bsf	12,5	;volatile
  5239                           
  5240                           ;ads1115.c: 121: IIC_Delay_Half();
  5241  0D49  2654  3188         	fcall	_IIC_Delay_Half
  5242                           
  5243                           ;ads1115.c: 122: if (IsCharOne())
  5244  0D4B  2657  3188         	fcall	_IsCharOne
  5245  0D4D  0870               	movf	?_IsCharOne,w
  5246  0D4E  0471               	iorwf	?_IsCharOne+1,w
  5247  0D4F  1D03               	btfss	3,2
  5248                           
  5249                           ;ads1115.c: 123: {
  5250                           ;ads1115.c: 124: m |= 0x01;
  5251  0D50  1476               	bsf	ReceiveFromRom@m,0
  5252                           
  5253                           ;ads1115.c: 125: }
  5254                           ;ads1115.c: 128: IIC_Delay_Half();
  5255  0D51  2654  3188         	fcall	_IIC_Delay_Half
  5256  0D53  0022               	movlb	2	; select bank2
  5257  0D54  128C               	bcf	12,5	;volatile
  5258                           
  5259                           ;ads1115.c: 130: IIC_Delay();
  5260  0D55  2630  3188         	fcall	_IIC_Delay
  5261  0D57  0AF8               	incf	ReceiveFromRom@count,f
  5262  0D58  1903               	skipnz
  5263  0D59  0AF9               	incf	ReceiveFromRom@count+1,f
  5264  0D5A  3000               	movlw	0
  5265  0D5B  0279               	subwf	ReceiveFromRom@count+1,w
  5266  0D5C  3008               	movlw	8
  5267  0D5D  1903               	skipnz
  5268  0D5E  0278               	subwf	ReceiveFromRom@count,w
  5269  0D5F  1C03               	skipc
  5270  0D60  2D45               	goto	l2214
  5271                           
  5272                           ;ads1115.c: 131: }
  5273                           ;ads1115.c: 132: do { TRISAbits.TRISA4 = 0; } while(0);
  5274  0D61  0021               	movlb	1	; select bank1
  5275  0D62  120C               	bcf	12,4	;volatile
  5276                           
  5277                           ;ads1115.c: 134: return m;
  5278  0D63  0877               	movf	ReceiveFromRom@m+1,w
  5279  0D64  00F5               	movwf	?_ReceiveFromRom+1
  5280  0D65  0876               	movf	ReceiveFromRom@m,w
  5281  0D66  00F4               	movwf	?_ReceiveFromRom
  5282  0D67  0008               	return
  5283  0D68                     __end_of_ReceiveFromRom:	
  5284  0D68                     __ptext24:	
  5285 ;; *************** function _readRegister *****************
  5286 ;; Defined at:
  5287 ;;		line 183 in file "ads1115.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  i2cAddress      2   10[COMMON] unsigned int 
  5290 ;;  reg             2   12[COMMON] unsigned int 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  i               2    2[BANK0 ] unsigned int 
  5293 ;;  ret             2    0[BANK0 ] unsigned int 
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  2   10[COMMON] unsigned int 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, status,0, pclath, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 1F/0
  5300 ;;		On exit  : 1F/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5303 ;;      Params:         4       0       0       0
  5304 ;;      Locals:         0       4       0       0
  5305 ;;      Temps:          0       0       0       0
  5306 ;;      Totals:         4       4       0       0
  5307 ;;Total ram usage:        8 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    5
  5310 ;; This function calls:
  5311 ;;		_IIC_Delay
  5312 ;;		_ReceiveFromRom
  5313 ;;		_SendToRom
  5314 ;;		_StartRom
  5315 ;;		_StopRom
  5316 ;;		_mack
  5317 ;; This function is called by:
  5318 ;;		_readADC_Differential_0_1_part2
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           
  5323                           ;psect for function _readRegister
  5324  0D68                     _readRegister:	
  5325                           
  5326                           ;ads1115.c: 185: uint16_t i, ret;
  5327                           ;ads1115.c: 187: for(i = 0; i < 5; i++)
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in _readRegister: [wreg+status,2+status,0+pclath+cstack]
  5331  0D68  01CC               	clrf	readRegister@i
  5332  0D69  01CD               	clrf	readRegister@i+1
  5333  0D6A                     l2404:	
  5334                           
  5335                           ;ads1115.c: 188: {
  5336                           ;ads1115.c: 189: StopRom();
  5337  0D6A  2633  3188         	fcall	_StopRom
  5338                           
  5339                           ;ads1115.c: 190: IIC_Delay();
  5340  0D6C  2630  3188         	fcall	_IIC_Delay
  5341                           
  5342                           ;ads1115.c: 191: StartRom();
  5343  0D6E  2642  3188         	fcall	_StartRom
  5344                           
  5345                           ;ads1115.c: 192: if(SendToRom(i2cAddress) == 1)
  5346  0D70  087B               	movf	readRegister@i2cAddress+1,w
  5347  0D71  00F5               	movwf	SendToRom@data+1
  5348  0D72  087A               	movf	readRegister@i2cAddress,w
  5349  0D73  00F4               	movwf	SendToRom@data
  5350  0D74  25F9  3188         	fcall	_SendToRom
  5351  0D76  0374               	decf	?_SendToRom,w
  5352  0D77  0475               	iorwf	?_SendToRom+1,w
  5353  0D78  1903               	btfsc	3,2
  5354  0D79  2DA5               	goto	l2426
  5355                           
  5356                           ;ads1115.c: 194: if(SendToRom((0x00)) == 1)
  5357  0D7A  01F4               	clrf	SendToRom@data
  5358  0D7B  01F5               	clrf	SendToRom@data+1
  5359  0D7C  25F9  3188         	fcall	_SendToRom
  5360  0D7E  0374               	decf	?_SendToRom,w
  5361  0D7F  0475               	iorwf	?_SendToRom+1,w
  5362  0D80  1903               	btfsc	3,2
  5363  0D81  2DA5               	goto	l2426
  5364                           
  5365                           ;ads1115.c: 196: StopRom();
  5366  0D82  2633  3188         	fcall	_StopRom
  5367                           
  5368                           ;ads1115.c: 197: IIC_Delay();
  5369  0D84  2630  3188         	fcall	_IIC_Delay
  5370                           
  5371                           ;ads1115.c: 198: StartRom();
  5372  0D86  2642  3188         	fcall	_StartRom
  5373                           
  5374                           ;ads1115.c: 199: if(SendToRom(i2cAddress|0x01) == 1)
  5375  0D88  3001               	movlw	1
  5376  0D89  047A               	iorwf	readRegister@i2cAddress,w
  5377  0D8A  00F4               	movwf	SendToRom@data
  5378  0D8B  087B               	movf	readRegister@i2cAddress+1,w
  5379  0D8C  00F5               	movwf	SendToRom@data+1
  5380  0D8D  25F9  3188         	fcall	_SendToRom
  5381  0D8F  0374               	decf	?_SendToRom,w
  5382  0D90  0475               	iorwf	?_SendToRom+1,w
  5383  0D91  1903               	btfsc	3,2
  5384  0D92  2DA5               	goto	l2426
  5385                           
  5386                           ;ads1115.c: 201: ret = ReceiveFromRom() << 8;
  5387  0D93  253D  3188         	fcall	_ReceiveFromRom
  5388  0D95  0874               	movf	?_ReceiveFromRom,w
  5389  0D96  0020               	movlb	0	; select bank0
  5390  0D97  00CB               	movwf	readRegister@ret+1
  5391  0D98  01CA               	clrf	readRegister@ret
  5392                           
  5393                           ;ads1115.c: 202: mack();
  5394  0D99  2664  3188         	fcall	_mack
  5395                           
  5396                           ;ads1115.c: 204: ret |= ReceiveFromRom();
  5397  0D9B  253D  3188         	fcall	_ReceiveFromRom
  5398  0D9D  0874               	movf	?_ReceiveFromRom,w
  5399  0D9E  0020               	movlb	0	; select bank0
  5400  0D9F  04CA               	iorwf	readRegister@ret,f
  5401  0DA0  0875               	movf	?_ReceiveFromRom+1,w
  5402  0DA1  04CB               	iorwf	readRegister@ret+1,f
  5403                           
  5404                           ;ads1115.c: 205: mack();
  5405  0DA2  2664  3188         	fcall	_mack
  5406                           
  5407                           ;ads1115.c: 207: break;
  5408  0DA4  2DB0               	goto	l2430
  5409  0DA5                     l2426:	
  5410  0DA5  0020               	movlb	0	; select bank0
  5411  0DA6  0ACC               	incf	readRegister@i,f
  5412  0DA7  1903               	skipnz
  5413  0DA8  0ACD               	incf	readRegister@i+1,f
  5414  0DA9  3000               	movlw	0
  5415  0DAA  024D               	subwf	readRegister@i+1,w
  5416  0DAB  3005               	movlw	5
  5417  0DAC  1903               	skipnz
  5418  0DAD  024C               	subwf	readRegister@i,w
  5419  0DAE  1C03               	skipc
  5420  0DAF  2D6A               	goto	l2404
  5421  0DB0                     l2430:	
  5422                           
  5423                           ;ads1115.c: 208: }
  5424                           ;ads1115.c: 209: StopRom();
  5425  0DB0  2633  3188         	fcall	_StopRom
  5426                           
  5427                           ;ads1115.c: 210: IIC_Delay();
  5428  0DB2  2630               	fcall	_IIC_Delay
  5429                           
  5430                           ;ads1115.c: 212: return ret;
  5431  0DB3  0020               	movlb	0	; select bank0
  5432  0DB4  084B               	movf	readRegister@ret+1,w
  5433  0DB5  00FB               	movwf	?_readRegister+1
  5434  0DB6  084A               	movf	readRegister@ret,w
  5435  0DB7  00FA               	movwf	?_readRegister
  5436  0DB8  0008               	return
  5437  0DB9                     __end_of_readRegister:	
  5438  0DB9                     __ptext28:	
  5439 ;; *************** function _writeRegister *****************
  5440 ;; Defined at:
  5441 ;;		line 156 in file "ads1115.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  i2cAddress      2    0[BANK0 ] unsigned int 
  5444 ;;  reg             2    2[BANK0 ] unsigned int 
  5445 ;;  value           2    4[BANK0 ] unsigned int 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;  i               2   10[COMMON] unsigned int 
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      void 
  5450 ;; Registers used:
  5451 ;;		wreg, status,2, status,0, pclath, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 1F/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5457 ;;      Params:         0       6       0       0
  5458 ;;      Locals:         2       0       0       0
  5459 ;;      Temps:          0       0       0       0
  5460 ;;      Totals:         2       6       0       0
  5461 ;;Total ram usage:        8 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; Hardware stack levels required when called:    5
  5464 ;; This function calls:
  5465 ;;		_IIC_Delay
  5466 ;;		_SendToRom
  5467 ;;		_StartRom
  5468 ;;		_StopRom
  5469 ;; This function is called by:
  5470 ;;		_readADC_Differential_0_1_part1
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           
  5475                           ;psect for function _writeRegister
  5476  0DB9                     _writeRegister:	
  5477  0DB9                     l2368:	
  5478                           ;incstack = 0
  5479                           ; Regs used in _writeRegister: [wreg+status,2+status,0+pclath+cstack]
  5480                           
  5481                           
  5482                           ;ads1115.c: 158: uint16_t i;
  5483                           ;ads1115.c: 160: for(i = 0; i < 5; i++)
  5484  0DB9  01FA               	clrf	writeRegister@i
  5485  0DBA  01FB               	clrf	writeRegister@i+1
  5486  0DBB                     l2374:	
  5487                           
  5488                           ;ads1115.c: 161: {
  5489                           ;ads1115.c: 162: StopRom();
  5490  0DBB  2633  3188         	fcall	_StopRom
  5491                           
  5492                           ;ads1115.c: 164: IIC_Delay();
  5493  0DBD  2630  3188         	fcall	_IIC_Delay
  5494                           
  5495                           ;ads1115.c: 165: StartRom();
  5496  0DBF  2642  3188         	fcall	_StartRom
  5497                           
  5498                           ;ads1115.c: 166: if(SendToRom(i2cAddress) == 1)
  5499  0DC1  0020               	movlb	0	; select bank0
  5500  0DC2  084B               	movf	writeRegister@i2cAddress+1,w
  5501  0DC3  00F5               	movwf	SendToRom@data+1
  5502  0DC4  084A               	movf	writeRegister@i2cAddress,w
  5503  0DC5  00F4               	movwf	SendToRom@data
  5504  0DC6  25F9  3188         	fcall	_SendToRom
  5505  0DC8  0374               	decf	?_SendToRom,w
  5506  0DC9  0475               	iorwf	?_SendToRom+1,w
  5507  0DCA  1903               	btfsc	3,2
  5508  0DCB  2DEC               	goto	l2392
  5509                           
  5510                           ;ads1115.c: 168: if(SendToRom(reg&0xFF) == 1)
  5511  0DCC  0020               	movlb	0	; select bank0
  5512  0DCD  084C               	movf	writeRegister@reg,w
  5513  0DCE  00F4               	movwf	SendToRom@data
  5514  0DCF  3000               	movlw	0
  5515  0DD0  01F5               	clrf	SendToRom@data+1
  5516  0DD1  25F9  3188         	fcall	_SendToRom
  5517  0DD3  0374               	decf	?_SendToRom,w
  5518  0DD4  0475               	iorwf	?_SendToRom+1,w
  5519  0DD5  1903               	btfsc	3,2
  5520  0DD6  2DEC               	goto	l2392
  5521                           
  5522                           ;ads1115.c: 170: if(SendToRom(value>>8) == 1)
  5523  0DD7  0020               	movlb	0	; select bank0
  5524  0DD8  084F               	movf	writeRegister@value+1,w
  5525  0DD9  00F4               	movwf	SendToRom@data
  5526  0DDA  01F5               	clrf	SendToRom@data+1
  5527  0DDB  25F9  3188         	fcall	_SendToRom
  5528  0DDD  0374               	decf	?_SendToRom,w
  5529  0DDE  0475               	iorwf	?_SendToRom+1,w
  5530  0DDF  1903               	btfsc	3,2
  5531  0DE0  2DEC               	goto	l2392
  5532                           
  5533                           ;ads1115.c: 172: if(SendToRom(value&0xFF) == 1)
  5534  0DE1  0020               	movlb	0	; select bank0
  5535  0DE2  084E               	movf	writeRegister@value,w
  5536  0DE3  00F4               	movwf	SendToRom@data
  5537  0DE4  3000               	movlw	0
  5538  0DE5  01F5               	clrf	SendToRom@data+1
  5539  0DE6  25F9  3188         	fcall	_SendToRom
  5540  0DE8  0374               	decf	?_SendToRom,w
  5541  0DE9  0475               	iorwf	?_SendToRom+1,w
  5542  0DEA  1D03               	btfss	3,2
  5543  0DEB  2DF6               	goto	l2396
  5544  0DEC                     l2392:	
  5545  0DEC  0AFA               	incf	writeRegister@i,f
  5546  0DED  1903               	skipnz
  5547  0DEE  0AFB               	incf	writeRegister@i+1,f
  5548  0DEF  3000               	movlw	0
  5549  0DF0  027B               	subwf	writeRegister@i+1,w
  5550  0DF1  3005               	movlw	5
  5551  0DF2  1903               	skipnz
  5552  0DF3  027A               	subwf	writeRegister@i,w
  5553  0DF4  1C03               	skipc
  5554  0DF5  2DBB               	goto	l2374
  5555  0DF6                     l2396:	
  5556                           
  5557                           ;ads1115.c: 176: }
  5558                           ;ads1115.c: 177: StopRom();
  5559  0DF6  2633  3188         	fcall	_StopRom
  5560                           
  5561                           ;ads1115.c: 178: IIC_Delay();
  5562  0DF8  2E30               	ljmp	l2092
  5563  0DF9                     __end_of_writeRegister:	
  5564  0DF9                     __ptext31:	
  5565 ;; *************** function _SendToRom *****************
  5566 ;; Defined at:
  5567 ;;		line 75 in file "ads1115.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  data            2    4[COMMON] unsigned int 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;  count           2    8[COMMON] unsigned int 
  5572 ;;  retcode         2    6[COMMON] unsigned int 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  2    4[COMMON] unsigned int 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0, pclath, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 1F/1
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5582 ;;      Params:         2       0       0       0
  5583 ;;      Locals:         4       0       0       0
  5584 ;;      Temps:          0       0       0       0
  5585 ;;      Totals:         6       0       0       0
  5586 ;;Total ram usage:        6 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    4
  5589 ;; This function calls:
  5590 ;;		_IIC_Delay
  5591 ;;		_IIC_Delay_Half
  5592 ;;		_IsCharOne
  5593 ;; This function is called by:
  5594 ;;		_writeRegister
  5595 ;;		_readRegister
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           
  5600                           ;psect for function _SendToRom
  5601  0DF9                     _SendToRom:	
  5602                           
  5603                           ;ads1115.c: 78: for (count = 0; count < 8; count++)
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _SendToRom: [wreg+status,2+status,0+pclath+cstack]
  5607  0DF9  01F8               	clrf	SendToRom@count
  5608  0DFA  01F9               	clrf	SendToRom@count+1
  5609  0DFB                     l442:	
  5610                           
  5611                           ;ads1115.c: 79: {
  5612                           ;ads1115.c: 80: if ((data & 0x80) == 0x80)
  5613  0DFB  1FF4               	btfss	SendToRom@data,7
  5614  0DFC  2E00               	goto	l448
  5615                           
  5616                           ;ads1115.c: 81: {
  5617                           ;ads1115.c: 82: do { LATAbits.LATA4 = 1; } while(0);
  5618  0DFD  0022               	movlb	2	; select bank2
  5619  0DFE  160C               	bsf	12,4	;volatile
  5620  0DFF  2E02               	goto	l2174
  5621  0E00                     l448:	
  5622                           ;ads1115.c: 84: else
  5623                           ;ads1115.c: 85: {
  5624                           ;ads1115.c: 86: do { LATAbits.LATA4 = 0; } while(0);
  5625                           
  5626  0E00  0022               	movlb	2	; select bank2
  5627  0E01  120C               	bcf	12,4	;volatile
  5628  0E02                     l2174:	
  5629                           
  5630                           ;ads1115.c: 87: }
  5631                           ;ads1115.c: 88: IIC_Delay();
  5632  0E02  2630  3188         	fcall	_IIC_Delay
  5633  0E04  0022               	movlb	2	; select bank2
  5634  0E05  168C               	bsf	12,5	;volatile
  5635                           
  5636                           ;ads1115.c: 90: data = data << 1;
  5637  0E06  35F4               	lslf	SendToRom@data,f
  5638  0E07  0DF5               	rlf	SendToRom@data+1,f
  5639                           
  5640                           ;ads1115.c: 91: IIC_Delay();
  5641  0E08  2630  3188         	fcall	_IIC_Delay
  5642  0E0A  0022               	movlb	2	; select bank2
  5643  0E0B  128C               	bcf	12,5	;volatile
  5644  0E0C  0AF8               	incf	SendToRom@count,f
  5645  0E0D  1903               	skipnz
  5646  0E0E  0AF9               	incf	SendToRom@count+1,f
  5647  0E0F  3000               	movlw	0
  5648  0E10  0279               	subwf	SendToRom@count+1,w
  5649  0E11  3008               	movlw	8
  5650  0E12  1903               	skipnz
  5651  0E13  0278               	subwf	SendToRom@count,w
  5652  0E14  1C03               	skipc
  5653  0E15  2DFB               	goto	l442
  5654                           
  5655                           ;ads1115.c: 94: }
  5656                           ;ads1115.c: 95: do { TRISAbits.TRISA4 = 1; } while(0);
  5657  0E16  0021               	movlb	1	; select bank1
  5658  0E17  160C               	bsf	12,4	;volatile
  5659                           
  5660                           ;ads1115.c: 96: IIC_Delay();
  5661  0E18  2630  3188         	fcall	_IIC_Delay
  5662  0E1A  0022               	movlb	2	; select bank2
  5663  0E1B  168C               	bsf	12,5	;volatile
  5664                           
  5665                           ;ads1115.c: 99: IIC_Delay_Half();
  5666  0E1C  2654  3188         	fcall	_IIC_Delay_Half
  5667                           
  5668                           ;ads1115.c: 100: retcode = IsCharOne();
  5669  0E1E  2657  3188         	fcall	_IsCharOne
  5670  0E20  0871               	movf	?_IsCharOne+1,w
  5671  0E21  00F7               	movwf	SendToRom@retcode+1
  5672  0E22  0870               	movf	?_IsCharOne,w
  5673  0E23  00F6               	movwf	SendToRom@retcode
  5674                           
  5675                           ;ads1115.c: 101: IIC_Delay_Half();
  5676  0E24  2654  3188         	fcall	_IIC_Delay_Half
  5677  0E26  0022               	movlb	2	; select bank2
  5678  0E27  128C               	bcf	12,5	;volatile
  5679                           
  5680                           ;ads1115.c: 104: IIC_Delay();
  5681  0E28  2630               	fcall	_IIC_Delay
  5682  0E29  0021               	movlb	1	; select bank1
  5683  0E2A  120C               	bcf	12,4	;volatile
  5684                           
  5685                           ;ads1115.c: 107: return retcode;
  5686  0E2B  0877               	movf	SendToRom@retcode+1,w
  5687  0E2C  00F5               	movwf	?_SendToRom+1
  5688  0E2D  0876               	movf	SendToRom@retcode,w
  5689  0E2E  00F4               	movwf	?_SendToRom
  5690  0E2F  0008               	return
  5691  0E30                     __end_of_SendToRom:	
  5692  0E30                     __ptext34:	
  5693 ;; *************** function _IIC_Delay *****************
  5694 ;; Defined at:
  5695 ;;		line 30 in file "ads1115.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;		None
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;		None
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  1    wreg      void 
  5702 ;; Registers used:
  5703 ;;		None
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5709 ;;      Params:         0       0       0       0
  5710 ;;      Locals:         0       0       0       0
  5711 ;;      Temps:          0       0       0       0
  5712 ;;      Totals:         0       0       0       0
  5713 ;;Total ram usage:        0 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    3
  5716 ;; This function calls:
  5717 ;;		Nothing
  5718 ;; This function is called by:
  5719 ;;		_StartRom
  5720 ;;		_StopRom
  5721 ;;		_SendToRom
  5722 ;;		_ReceiveFromRom
  5723 ;;		_mack
  5724 ;;		_writeRegister
  5725 ;;		_readRegister
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           
  5730                           ;psect for function _IIC_Delay
  5731  0E30                     _IIC_Delay:	
  5732  0E30                     l2092:	
  5733                           ;incstack = 0
  5734                           ; Regs used in _IIC_Delay: []
  5735                           
  5736                           
  5737                           ;ads1115.c: 32: _delay((unsigned long)((1)*(16000000/4000000.0)));
  5738  0E30  3200               	nop2	;2 cycle nop
  5739  0E31  3200               	nop2	;2 cycle nop
  5740  0E32  0008               	return
  5741  0E33                     __end_of_IIC_Delay:	
  5742  0E33                     __ptext29:	
  5743 ;; *************** function _StopRom *****************
  5744 ;; Defined at:
  5745 ;;		line 63 in file "ads1115.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;		None
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;		None
  5750 ;; Return value:  Size  Location     Type
  5751 ;;                  1    wreg      void 
  5752 ;; Registers used:
  5753 ;;		status,2, status,0, pclath, cstack
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5759 ;;      Params:         0       0       0       0
  5760 ;;      Locals:         0       0       0       0
  5761 ;;      Temps:          0       0       0       0
  5762 ;;      Totals:         0       0       0       0
  5763 ;;Total ram usage:        0 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:    4
  5766 ;; This function calls:
  5767 ;;		_IIC_Delay
  5768 ;; This function is called by:
  5769 ;;		_writeRegister
  5770 ;;		_readRegister
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function _StopRom
  5776  0E33                     _StopRom:	
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in _StopRom: [status,2+status,0+pclath+cstack]
  5780                           ;ads1115.c: 65: do { LATAbits.LATA4 = 0; } while(0);
  5781  0E33  0022               	movlb	2	; select bank2
  5782  0E34  120C               	bcf	12,4	;volatile
  5783                           
  5784                           ;ads1115.c: 66: IIC_Delay();
  5785  0E35  2630  3188         	fcall	_IIC_Delay
  5786  0E37  0022               	movlb	2	; select bank2
  5787  0E38  168C               	bsf	12,5	;volatile
  5788                           
  5789                           ;ads1115.c: 68: IIC_Delay();
  5790  0E39  2630  3188         	fcall	_IIC_Delay
  5791  0E3B  0022               	movlb	2	; select bank2
  5792  0E3C  160C               	bsf	12,4	;volatile
  5793                           
  5794                           ;ads1115.c: 70: IIC_Delay();
  5795  0E3D  2630  3188         	fcall	_IIC_Delay
  5796  0E3F  0022               	movlb	2	; select bank2
  5797  0E40  128C               	bcf	12,5	;volatile
  5798                           
  5799                           ;ads1115.c: 72: IIC_Delay();
  5800  0E41  2E30               	ljmp	l2092
  5801  0E42                     __end_of_StopRom:	
  5802  0E42                     __ptext30:	
  5803 ;; *************** function _StartRom *****************
  5804 ;; Defined at:
  5805 ;;		line 48 in file "ads1115.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;		None
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;		None
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		status,2, status,0, pclath, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5819 ;;      Params:         0       0       0       0
  5820 ;;      Locals:         0       0       0       0
  5821 ;;      Temps:          0       0       0       0
  5822 ;;      Totals:         0       0       0       0
  5823 ;;Total ram usage:        0 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    4
  5826 ;; This function calls:
  5827 ;;		_IIC_Delay
  5828 ;; This function is called by:
  5829 ;;		_writeRegister
  5830 ;;		_readRegister
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           
  5835                           ;psect for function _StartRom
  5836  0E42                     _StartRom:	
  5837                           
  5838                           ;incstack = 0
  5839                           ; Regs used in _StartRom: [status,2+status,0+pclath+cstack]
  5840                           ;ads1115.c: 50: do { TRISAbits.TRISA4 = 0; } while(0);
  5841  0E42  0021               	movlb	1	; select bank1
  5842  0E43  120C               	bcf	12,4	;volatile
  5843                           
  5844                           ;ads1115.c: 51: do { TRISAbits.TRISA5 = 0; } while(0);
  5845  0E44  128C               	bcf	12,5	;volatile
  5846                           
  5847                           ;ads1115.c: 52: do { LATAbits.LATA4 = 1; } while(0);
  5848  0E45  0022               	movlb	2	; select bank2
  5849  0E46  160C               	bsf	12,4	;volatile
  5850                           
  5851                           ;ads1115.c: 53: IIC_Delay();
  5852  0E47  2630  3188         	fcall	_IIC_Delay
  5853  0E49  0022               	movlb	2	; select bank2
  5854  0E4A  168C               	bsf	12,5	;volatile
  5855                           
  5856                           ;ads1115.c: 55: IIC_Delay();
  5857  0E4B  2630  3188         	fcall	_IIC_Delay
  5858  0E4D  0022               	movlb	2	; select bank2
  5859  0E4E  120C               	bcf	12,4	;volatile
  5860                           
  5861                           ;ads1115.c: 57: IIC_Delay();
  5862  0E4F  2630  3188         	fcall	_IIC_Delay
  5863  0E51  0022               	movlb	2	; select bank2
  5864  0E52  128C               	bcf	12,5	;volatile
  5865                           
  5866                           ;ads1115.c: 59: IIC_Delay();
  5867  0E53  2E30               	ljmp	l2092
  5868  0E54                     __end_of_StartRom:	
  5869  0E54                     __ptext33:	
  5870 ;; *************** function _IIC_Delay_Half *****************
  5871 ;; Defined at:
  5872 ;;		line 34 in file "ads1115.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;		None
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;		None
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  1    wreg      void 
  5879 ;; Registers used:
  5880 ;;		None
  5881 ;; Tracked objects:
  5882 ;;		On entry : 1D/2
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5886 ;;      Params:         0       0       0       0
  5887 ;;      Locals:         0       0       0       0
  5888 ;;      Temps:          0       0       0       0
  5889 ;;      Totals:         0       0       0       0
  5890 ;;Total ram usage:        0 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    3
  5893 ;; This function calls:
  5894 ;;		Nothing
  5895 ;; This function is called by:
  5896 ;;		_SendToRom
  5897 ;;		_ReceiveFromRom
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           
  5902                           ;psect for function _IIC_Delay_Half
  5903  0E54                     _IIC_Delay_Half:	
  5904                           
  5905                           ;ads1115.c: 36: _delay((unsigned long)((1)*(16000000/4000000.0)));
  5906                           
  5907                           ;incstack = 0
  5908                           ; Regs used in _IIC_Delay_Half: []
  5909  0E54  3200               	nop2	;2 cycle nop
  5910  0E55  3200               	nop2	;2 cycle nop
  5911  0E56  0008               	return
  5912  0E57                     __end_of_IIC_Delay_Half:	
  5913  0E57                     __ptext32:	
  5914 ;; *************** function _IsCharOne *****************
  5915 ;; Defined at:
  5916 ;;		line 38 in file "ads1115.c"
  5917 ;; Parameters:    Size  Location     Type
  5918 ;;		None
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  retcode         2    2[COMMON] unsigned int 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  2    0[COMMON] unsigned int 
  5923 ;; Registers used:
  5924 ;;		wreg, status,2, status,0
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/2
  5927 ;;		On exit  : 1F/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5930 ;;      Params:         2       0       0       0
  5931 ;;      Locals:         2       0       0       0
  5932 ;;      Temps:          0       0       0       0
  5933 ;;      Totals:         4       0       0       0
  5934 ;;Total ram usage:        4 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    3
  5937 ;; This function calls:
  5938 ;;		Nothing
  5939 ;; This function is called by:
  5940 ;;		_SendToRom
  5941 ;;		_ReceiveFromRom
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           
  5946                           ;psect for function _IsCharOne
  5947  0E57                     _IsCharOne:	
  5948                           
  5949                           ;ads1115.c: 40: uint16_t retcode = 0;
  5950                           
  5951                           ;incstack = 0
  5952                           ; Regs used in _IsCharOne: [wreg+status,2+status,0]
  5953  0E57  01F2               	clrf	IsCharOne@retcode
  5954  0E58  01F3               	clrf	IsCharOne@retcode+1
  5955                           
  5956                           ;ads1115.c: 41: if (PORTAbits.RA4)
  5957  0E59  0020               	movlb	0	; select bank0
  5958  0E5A  1E0C               	btfss	12,4	;volatile
  5959  0E5B  2E5F               	goto	l2102
  5960                           
  5961                           ;ads1115.c: 42: {
  5962                           ;ads1115.c: 43: retcode = 1;
  5963  0E5C  01F2               	clrf	IsCharOne@retcode
  5964  0E5D  0AF2               	incf	IsCharOne@retcode,f
  5965  0E5E  01F3               	clrf	IsCharOne@retcode+1
  5966  0E5F                     l2102:	
  5967                           
  5968                           ;ads1115.c: 44: }
  5969                           ;ads1115.c: 45: return retcode;
  5970  0E5F  0873               	movf	IsCharOne@retcode+1,w
  5971  0E60  00F1               	movwf	?_IsCharOne+1
  5972  0E61  0872               	movf	IsCharOne@retcode,w
  5973  0E62  00F0               	movwf	?_IsCharOne
  5974  0E63  0008               	return
  5975  0E64                     __end_of_IsCharOne:	
  5976  0E64                     __ptext25:	
  5977 ;; *************** function _mack *****************
  5978 ;; Defined at:
  5979 ;;		line 137 in file "ads1115.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;		None
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;		None
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      void 
  5986 ;; Registers used:
  5987 ;;		status,2, status,0, pclath, cstack
  5988 ;; Tracked objects:
  5989 ;;		On entry : 1F/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5993 ;;      Params:         0       0       0       0
  5994 ;;      Locals:         0       0       0       0
  5995 ;;      Temps:          0       0       0       0
  5996 ;;      Totals:         0       0       0       0
  5997 ;;Total ram usage:        0 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; Hardware stack levels required when called:    4
  6000 ;; This function calls:
  6001 ;;		_IIC_Delay
  6002 ;; This function is called by:
  6003 ;;		_readRegister
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           
  6008                           ;psect for function _mack
  6009  0E64                     _mack:	
  6010                           
  6011                           ;incstack = 0
  6012                           ; Regs used in _mack: [status,2+status,0+pclath+cstack]
  6013                           ;ads1115.c: 139: do { LATAbits.LATA4 = 0; } while(0);
  6014  0E64  0022               	movlb	2	; select bank2
  6015  0E65  120C               	bcf	12,4	;volatile
  6016                           
  6017                           ;ads1115.c: 140: IIC_Delay();
  6018  0E66  2630  3188         	fcall	_IIC_Delay
  6019  0E68  0022               	movlb	2	; select bank2
  6020  0E69  168C               	bsf	12,5	;volatile
  6021                           
  6022                           ;ads1115.c: 142: IIC_Delay();
  6023  0E6A  2630  3188         	fcall	_IIC_Delay
  6024  0E6C  0022               	movlb	2	; select bank2
  6025  0E6D  128C               	bcf	12,5	;volatile
  6026                           
  6027                           ;ads1115.c: 144: IIC_Delay();
  6028  0E6E  2E30               	ljmp	l2092
  6029  0E6F                     __end_of_mack:	
  6030  0E6F                     __ptext9:	
  6031 ;; *************** function _SYSTEM_Initialize *****************
  6032 ;; Defined at:
  6033 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;		None
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;		None
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  1    wreg      void 
  6040 ;; Registers used:
  6041 ;;		wreg, status,2, status,0, pclath, cstack
  6042 ;; Tracked objects:
  6043 ;;		On entry : B1F/0
  6044 ;;		On exit  : 1F/1
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6047 ;;      Params:         0       0       0       0
  6048 ;;      Locals:         0       0       0       0
  6049 ;;      Temps:          0       0       0       0
  6050 ;;      Totals:         0       0       0       0
  6051 ;;Total ram usage:        0 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    5
  6054 ;; This function calls:
  6055 ;;		_EUSART_Initialize
  6056 ;;		_OSCILLATOR_Initialize
  6057 ;;		_PIN_MANAGER_Initialize
  6058 ;;		_TMR0_Initialize
  6059 ;;		_WDT_Initialize
  6060 ;; This function is called by:
  6061 ;;		_main
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _SYSTEM_Initialize
  6067  0E6F                     _SYSTEM_Initialize:	
  6068                           
  6069                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  6070                           
  6071                           ;incstack = 0
  6072                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6073  0E6F  267D  3188         	fcall	_PIN_MANAGER_Initialize
  6074                           
  6075                           ;mcc.c: 73: OSCILLATOR_Initialize();
  6076  0E71  2678  3188         	fcall	_OSCILLATOR_Initialize
  6077                           
  6078                           ;mcc.c: 74: WDT_Initialize();
  6079  0E73  268D  3188         	fcall	_WDT_Initialize
  6080                           
  6081                           ;mcc.c: 75: TMR0_Initialize();
  6082  0E75  27EC  3188         	fcall	_TMR0_Initialize
  6083                           
  6084                           ;mcc.c: 76: EUSART_Initialize();
  6085  0E77  2FD4               	ljmp	l2580
  6086  0E78                     __end_of_SYSTEM_Initialize:	
  6087  0E78                     __ptext14:	
  6088 ;; *************** function _OSCILLATOR_Initialize *****************
  6089 ;; Defined at:
  6090 ;;		line 79 in file "mcc_generated_files/mcc.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;		None
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;		None
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  1    wreg      void 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2
  6099 ;; Tracked objects:
  6100 ;;		On entry : B1F/2
  6101 ;;		On exit  : B1F/1
  6102 ;;		Unchanged: B00/0
  6103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6104 ;;      Params:         0       0       0       0
  6105 ;;      Locals:         0       0       0       0
  6106 ;;      Temps:          0       0       0       0
  6107 ;;      Totals:         0       0       0       0
  6108 ;;Total ram usage:        0 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    3
  6111 ;; This function calls:
  6112 ;;		Nothing
  6113 ;; This function is called by:
  6114 ;;		_SYSTEM_Initialize
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           
  6119                           ;psect for function _OSCILLATOR_Initialize
  6120  0E78                     _OSCILLATOR_Initialize:	
  6121                           
  6122                           ;mcc.c: 82: OSCCON = 0x78;
  6123                           
  6124                           ;incstack = 0
  6125                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6126  0E78  3078               	movlw	120
  6127  0E79  0021               	movlb	1	; select bank1
  6128  0E7A  0099               	movwf	25	;volatile
  6129                           
  6130                           ;mcc.c: 84: OSCTUNE = 0x00;
  6131  0E7B  0198               	clrf	24	;volatile
  6132  0E7C  0008               	return
  6133  0E7D                     __end_of_OSCILLATOR_Initialize:	
  6134  0E7D                     __ptext13:	
  6135 ;; *************** function _PIN_MANAGER_Initialize *****************
  6136 ;; Defined at:
  6137 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;		None
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;		None
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  1    wreg      void 
  6144 ;; Registers used:
  6145 ;;		wreg, status,2
  6146 ;; Tracked objects:
  6147 ;;		On entry : B1F/0
  6148 ;;		On exit  : B1F/2
  6149 ;;		Unchanged: B00/0
  6150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6151 ;;      Params:         0       0       0       0
  6152 ;;      Locals:         0       0       0       0
  6153 ;;      Temps:          0       0       0       0
  6154 ;;      Totals:         0       0       0       0
  6155 ;;Total ram usage:        0 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    3
  6158 ;; This function calls:
  6159 ;;		Nothing
  6160 ;; This function is called by:
  6161 ;;		_SYSTEM_Initialize
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           
  6166                           ;psect for function _PIN_MANAGER_Initialize
  6167  0E7D                     _PIN_MANAGER_Initialize:	
  6168                           
  6169                           ;pin_manager.c: 56: LATA = 0x00;
  6170                           
  6171                           ;incstack = 0
  6172                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6173  0E7D  0022               	movlb	2	; select bank2
  6174  0E7E  018C               	clrf	12	;volatile
  6175                           
  6176                           ;pin_manager.c: 61: TRISA = 0x0E;
  6177  0E7F  300E               	movlw	14
  6178  0E80  0021               	movlb	1	; select bank1
  6179  0E81  008C               	movwf	12	;volatile
  6180                           
  6181                           ;pin_manager.c: 66: ANSELA = 0x04;
  6182  0E82  3004               	movlw	4
  6183  0E83  0023               	movlb	3	; select bank3
  6184  0E84  008C               	movwf	12	;volatile
  6185                           
  6186                           ;pin_manager.c: 71: WPUA = 0x08;
  6187  0E85  3008               	movlw	8
  6188  0E86  0024               	movlb	4	; select bank4
  6189  0E87  008C               	movwf	12	;volatile
  6190                           
  6191                           ;pin_manager.c: 72: OPTION_REGbits.nWPUEN = 0;
  6192  0E88  0021               	movlb	1	; select bank1
  6193  0E89  1395               	bcf	21,7	;volatile
  6194                           
  6195                           ;pin_manager.c: 78: APFCON = 0x00;
  6196  0E8A  0022               	movlb	2	; select bank2
  6197  0E8B  019D               	clrf	29	;volatile
  6198  0E8C  0008               	return
  6199  0E8D                     __end_of_PIN_MANAGER_Initialize:	
  6200  0E8D                     __ptext10:	
  6201 ;; *************** function _WDT_Initialize *****************
  6202 ;; Defined at:
  6203 ;;		line 89 in file "mcc_generated_files/mcc.c"
  6204 ;; Parameters:    Size  Location     Type
  6205 ;;		None
  6206 ;; Auto vars:     Size  Location     Type
  6207 ;;		None
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  1    wreg      void 
  6210 ;; Registers used:
  6211 ;;		wreg
  6212 ;; Tracked objects:
  6213 ;;		On entry : B1F/1
  6214 ;;		On exit  : B1F/1
  6215 ;;		Unchanged: B00/0
  6216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6217 ;;      Params:         0       0       0       0
  6218 ;;      Locals:         0       0       0       0
  6219 ;;      Temps:          0       0       0       0
  6220 ;;      Totals:         0       0       0       0
  6221 ;;Total ram usage:        0 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    3
  6224 ;; This function calls:
  6225 ;;		Nothing
  6226 ;; This function is called by:
  6227 ;;		_SYSTEM_Initialize
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           
  6232                           ;psect for function _WDT_Initialize
  6233  0E8D                     _WDT_Initialize:	
  6234                           
  6235                           ;mcc.c: 92: WDTCON = 0x16;
  6236                           
  6237                           ;incstack = 0
  6238                           ; Regs used in _WDT_Initialize: [wreg]
  6239  0E8D  3016               	movlw	22
  6240  0E8E  0097               	movwf	23	;volatile
  6241  0E8F  0008               	return
  6242  0E90                     __end_of_WDT_Initialize:	
  6243  0E90                     __ptext7:	
  6244 ;; *************** function _SendDataToMainBoardProcess *****************
  6245 ;; Defined at:
  6246 ;;		line 577 in file "main.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;		None
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;		None
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  1    wreg      void 
  6253 ;; Registers used:
  6254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 1F/0
  6257 ;;		On exit  : 1F/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6260 ;;      Params:         0       0       0       0
  6261 ;;      Locals:         0       0       0       0
  6262 ;;      Temps:          0       0       0       0
  6263 ;;      Totals:         0       0       0       0
  6264 ;;Total ram usage:        0 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    6
  6267 ;; This function calls:
  6268 ;;		_UartSend
  6269 ;;		_printf
  6270 ;; This function is called by:
  6271 ;;		_main
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           
  6276                           ;psect for function _SendDataToMainBoardProcess
  6277  0E90                     _SendDataToMainBoardProcess:	
  6278                           
  6279                           ;main.c: 579: static uint8_t SendCount=0;
  6280                           ;main.c: 581: switch(SendDataToMainBoardStep)
  6281                           
  6282                           ;incstack = 0
  6283                           ; Regs used in _SendDataToMainBoardProcess: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6284  0E90  2ED1               	goto	l3062
  6285  0E91                     l3030:	
  6286                           
  6287                           ;main.c: 585: if(SendCount >= 125)
  6288  0E91  307D               	movlw	125
  6289  0E92  023C               	subwf	SendDataToMainBoardProcess@SendCount,w
  6290  0E93  1C03               	skipc
  6291  0E94  2E98               	goto	l3034
  6292                           
  6293                           ;main.c: 586: {
  6294                           ;main.c: 587: SendDataToMainBoardStep = 2;
  6295  0E95  3002               	movlw	2
  6296  0E96  00C1               	movwf	_SendDataToMainBoardStep
  6297                           
  6298                           ;main.c: 588: }
  6299  0E97  0008               	return
  6300  0E98                     l3034:	
  6301                           
  6302                           ;main.c: 589: else
  6303                           ;main.c: 590: {
  6304                           ;main.c: 591: SendTmr = 0;
  6305  0E98  01B4               	clrf	_SendTmr
  6306  0E99  01B5               	clrf	_SendTmr+1
  6307                           
  6308                           ;main.c: 592: SendDataToMainBoardStep++;
  6309  0E9A  0AC1               	incf	_SendDataToMainBoardStep,f
  6310  0E9B  0008               	return
  6311  0E9C                     l3038:	
  6312                           
  6313                           ;main.c: 596: if(SendTmr >= 40)
  6314  0E9C  3000               	movlw	0
  6315  0E9D  0235               	subwf	_SendTmr+1,w
  6316  0E9E  3028               	movlw	40
  6317  0E9F  1903               	skipnz
  6318  0EA0  0234               	subwf	_SendTmr,w
  6319  0EA1  1C03               	skipc
  6320  0EA2  0008               	return
  6321                           
  6322                           ;main.c: 597: {
  6323                           ;main.c: 599: UartSendBuf[0] = 0xaa;
  6324  0EA3  30AA               	movlw	170
  6325  0EA4  0021               	movlb	1	; select bank1
  6326  0EA5  00E0               	movwf	_UartSendBuf^(0+128)
  6327                           
  6328                           ;main.c: 600: UartSendBuf[1] = 0x55;
  6329  0EA6  3055               	movlw	85
  6330  0EA7  00E1               	movwf	(_UartSendBuf^(0+128)+1)
  6331                           
  6332                           ;main.c: 601: UartSendBuf[2] = (uint8_t)(Length >> 8);
  6333  0EA8  0020               	movlb	0	; select bank0
  6334  0EA9  0833               	movf	_Length+1,w
  6335  0EAA  0021               	movlb	1	; select bank1
  6336  0EAB  00E2               	movwf	(_UartSendBuf^(0+128)+2)
  6337                           
  6338                           ;main.c: 602: UartSendBuf[3] = (uint8_t)Length;
  6339  0EAC  0020               	movlb	0	; select bank0
  6340  0EAD  0832               	movf	_Length,w
  6341  0EAE  0021               	movlb	1	; select bank1
  6342  0EAF  00E3               	movwf	(_UartSendBuf^(0+128)+3)
  6343                           
  6344                           ;main.c: 603: UartSend(4);
  6345  0EB0  3004               	movlw	4
  6346  0EB1  27FB               	fcall	_UartSend
  6347                           
  6348                           ;main.c: 605: SendDataToMainBoardStep = 0;
  6349  0EB2  01C1               	clrf	_SendDataToMainBoardStep
  6350                           
  6351                           ;main.c: 606: SendCount++;
  6352  0EB3  0ABC               	incf	SendDataToMainBoardProcess@SendCount,f
  6353  0EB4  0008               	return
  6354  0EB5                     l3052:	
  6355                           
  6356                           ;main.c: 615: if(SendTmr >= 1000)
  6357  0EB5  3003               	movlw	3
  6358  0EB6  0235               	subwf	_SendTmr+1,w
  6359  0EB7  30E8               	movlw	232
  6360  0EB8  1903               	skipnz
  6361  0EB9  0234               	subwf	_SendTmr,w
  6362  0EBA  1C03               	skipc
  6363  0EBB  0008               	return
  6364                           
  6365                           ;main.c: 616: {
  6366                           ;main.c: 617: printf("AD: %d ADLinear: %d Length: %d mm\r\n",ADC_Value,ADLinearVal,Lengt
      +                          h);
  6367  0EBC  3023               	movlw	low (STR_4| (0+32768))
  6368  0EBD  00CA               	movwf	printf@f
  6369  0EBE  3082               	movlw	high (STR_4| (0+32768))
  6370  0EBF  00CB               	movwf	printf@f+1
  6371  0EC0  082B               	movf	_ADC_Value+1,w
  6372  0EC1  00CD               	movwf	?_printf+3
  6373  0EC2  082A               	movf	_ADC_Value,w
  6374  0EC3  00CC               	movwf	?_printf+2
  6375  0EC4  082D               	movf	_ADLinearVal+1,w
  6376  0EC5  00CF               	movwf	?_printf+5
  6377  0EC6  082C               	movf	_ADLinearVal,w
  6378  0EC7  00CE               	movwf	?_printf+4
  6379  0EC8  0833               	movf	_Length+1,w
  6380  0EC9  00D1               	movwf	?_printf+7
  6381  0ECA  0832               	movf	_Length,w
  6382  0ECB  00D0               	movwf	?_printf+6
  6383  0ECC  238C               	fcall	_printf
  6384                           
  6385                           ;main.c: 618: SendDataToMainBoardStep--;
  6386  0ECD  03C1               	decf	_SendDataToMainBoardStep,f
  6387  0ECE  0008               	return
  6388  0ECF                     l3058:	
  6389                           
  6390                           ;main.c: 622: SendDataToMainBoardStep = 0;
  6391  0ECF  01C1               	clrf	_SendDataToMainBoardStep
  6392                           
  6393                           ;main.c: 623: break;
  6394  0ED0  0008               	return
  6395  0ED1                     l3062:	
  6396  0ED1  0841               	movf	_SendDataToMainBoardStep,w
  6397                           
  6398                           ; Switch size 1, requested type "space"
  6399                           ; Number of cases is 4, Range of values is 0 to 3
  6400                           ; switch strategies available:
  6401                           ; Name         Instructions Cycles
  6402                           ; simple_byte           13     7 (average)
  6403                           ; direct_byte           14     6 (fixed)
  6404                           ; jumptable            260     6 (fixed)
  6405                           ;	Chosen strategy is simple_byte
  6406  0ED2  3A00               	xorlw	0	; case 0
  6407  0ED3  1903               	skipnz
  6408  0ED4  2E91               	goto	l3030
  6409  0ED5  3A01               	xorlw	1	; case 1
  6410  0ED6  1903               	skipnz
  6411  0ED7  2E9C               	goto	l3038
  6412  0ED8  3A03               	xorlw	3	; case 2
  6413  0ED9  1903               	skipnz
  6414  0EDA  2E98               	goto	l3034
  6415  0EDB  3A01               	xorlw	1	; case 3
  6416  0EDC  1903               	skipnz
  6417  0EDD  2EB5               	goto	l3052
  6418  0EDE  2ECF               	goto	l3058
  6419  0EDF  0008               	return
  6420  0EE0                     __end_of_SendDataToMainBoardProcess:	
  6421  0EE0                     __ptext1:	
  6422 ;; *************** function _UartSendProcess *****************
  6423 ;; Defined at:
  6424 ;;		line 484 in file "main.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;		None
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;		None
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      void 
  6431 ;; Registers used:
  6432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 1F/0
  6435 ;;		On exit  : 1F/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6438 ;;      Params:         0       0       0       0
  6439 ;;      Locals:         0       0       0       0
  6440 ;;      Temps:          0       0       0       0
  6441 ;;      Totals:         0       0       0       0
  6442 ;;Total ram usage:        0 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    4
  6445 ;; This function calls:
  6446 ;;		_EUSART_Write
  6447 ;; This function is called by:
  6448 ;;		_main
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452                           
  6453                           ;psect for function _UartSendProcess
  6454  0EE0                     _UartSendProcess:	
  6455  0EE0                     l2970:	
  6456                           ;main.c: 486: while(UartByteToBeSendCnt > 0)
  6457                           
  6458                           ;incstack = 0
  6459                           ; Regs used in _UartSendProcess: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6460                           
  6461  0EE0  0842               	movf	_UartByteToBeSendCnt,w
  6462  0EE1  1903               	btfsc	3,2
  6463  0EE2  0008               	return
  6464                           
  6465                           ;main.c: 487: {
  6466                           ;main.c: 488: if(eusartTxBufferRemaining > 0)
  6467  0EE3  0869               	movf	_eusartTxBufferRemaining,w	;volatile
  6468  0EE4  1903               	btfsc	3,2
  6469  0EE5  2EE0               	goto	l2970
  6470                           
  6471                           ;main.c: 489: {
  6472                           ;main.c: 490: UartByteToBeSendCnt--;
  6473  0EE6  03C2               	decf	_UartByteToBeSendCnt,f
  6474                           
  6475                           ;main.c: 491: EUSART_Write(UartSendBuf[UartSendCnt++]);
  6476  0EE7  0844               	movf	_UartSendCnt,w
  6477  0EE8  3EE0               	addlw	(low (_UartSendBuf| 0))& (0+255)
  6478  0EE9  0086               	movwf	6
  6479  0EEA  0187               	clrf	7
  6480  0EEB  0801               	movf	1,w
  6481  0EEC  27A3  3188         	fcall	_EUSART_Write
  6482  0EEE  0020               	movlb	0	; select bank0
  6483  0EEF  0AC4               	incf	_UartSendCnt,f
  6484  0EF0  2EE0               	goto	l2970
  6485  0EF1                     __end_of_UartSendProcess:	
  6486  0EF1                     __ptext35:	
  6487 ;; *************** function _ads1015_init *****************
  6488 ;; Defined at:
  6489 ;;		line 221 in file "ads1115.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;		None
  6494 ;; Return value:  Size  Location     Type
  6495 ;;                  1    wreg      void 
  6496 ;; Registers used:
  6497 ;;		wreg, status,2
  6498 ;; Tracked objects:
  6499 ;;		On entry : 1F/0
  6500 ;;		On exit  : 1F/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6503 ;;      Params:         0       0       0       0
  6504 ;;      Locals:         0       0       0       0
  6505 ;;      Temps:          0       0       0       0
  6506 ;;      Totals:         0       0       0       0
  6507 ;;Total ram usage:        0 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:    3
  6510 ;; This function calls:
  6511 ;;		Nothing
  6512 ;; This function is called by:
  6513 ;;		_ADCProcess
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           
  6518                           ;psect for function _ads1015_init
  6519  0EF1                     _ads1015_init:	
  6520                           
  6521                           ;ads1115.c: 223: m_i2cAddress = (0x90);
  6522                           
  6523                           ;incstack = 0
  6524                           ; Regs used in _ads1015_init: [wreg+status,2]
  6525  0EF1  3090               	movlw	144
  6526  0EF2  00BA               	movwf	_m_i2cAddress
  6527  0EF3  3004               	movlw	4
  6528  0EF4  01BB               	clrf	_m_i2cAddress+1
  6529                           
  6530                           ;ads1115.c: 225: m_bitShift = 0;
  6531  0EF5  01B6               	clrf	_m_bitShift
  6532  0EF6  01B7               	clrf	_m_bitShift+1
  6533                           
  6534                           ;ads1115.c: 226: m_gain = GAIN_TWO;
  6535  0EF7  01B8               	clrf	_m_gain
  6536  0EF8  00B9               	movwf	_m_gain+1
  6537  0EF9  0008               	return
  6538  0EFA                     __end_of_ads1015_init:	
  6539  0EFA                     PL2:	
  6540  0EFA  3001               	movlw	1	; select bank2/3
  6541  0EFB  0087               	movwf	7
  6542  0EFC  3F40               	moviw [0]fsr1
  6543  0EFD  00DB               	movwf	??_LinearLookUpTab+1
  6544  0EFE  3F41               	moviw [1]fsr1
  6545  0EFF  00DC               	movwf	??_LinearLookUpTab+2
  6546  0F00  0259               	subwf	LinearLookUpTab@val+1,w
  6547  0F01  1D03               	skipz
  6548  0F02  0008               	return
  6549  0F03  085B               	movf	??_LinearLookUpTab+1,w
  6550  0F04  0258               	subwf	LinearLookUpTab@val,w
  6551  0F05  0008               	return
  6552  0F06                     __end_ofPL2:	
  6553  0F06                     PL4:	
  6554  0F06  0086               	movwf	6
  6555  0F07  3001               	movlw	1	; select bank2/3
  6556  0F08  0087               	movwf	7
  6557  0F09  3F40               	moviw [0]fsr1
  6558  0F0A  00DB               	movwf	??_LinearLookUpTab+1
  6559  0F0B  3F41               	moviw [1]fsr1
  6560  0F0C  00DC               	movwf	??_LinearLookUpTab+2
  6561  0F0D  085B               	movf	??_LinearLookUpTab+1,w
  6562  0F0E  0008               	return
  6563  0F0F                     __end_ofPL4:	
  6564  0F0F                     PL6:	
  6565  0F0F  0873               	movf	?___lmul+3,w
  6566  0F10  0020               	movlb	0	; select bank0
  6567  0F11  00D1               	movwf	___lldiv@dividend+3
  6568  0F12  0872               	movf	?___lmul+2,w
  6569  0F13  00D0               	movwf	___lldiv@dividend+2
  6570  0F14  0871               	movf	?___lmul+1,w
  6571  0F15  00CF               	movwf	___lldiv@dividend+1
  6572  0F16  0870               	movf	?___lmul,w
  6573  0F17  00CE               	movwf	___lldiv@dividend
  6574  0F18  0008               	return
  6575  0F19                     __end_ofPL6:	
  6576  0F19                     PL8:	
  6577  0F19  0856               	movf	Update2CaliDatabase@OriginalValue,w
  6578  0F1A  3FC0               	movwi [0]fsr1
  6579  0F1B  0857               	movf	Update2CaliDatabase@OriginalValue+1,w
  6580  0F1C  3FC1               	movwi [1]fsr1
  6581  0F1D  0859               	movf	Update2CaliDatabase@i,w
  6582  0F1E  0709               	addwf	9,w
  6583  0F1F  0709               	addwf	9,w
  6584  0F20  3EA2               	addlw	(low ((_CaliBuf| 0+2)))& (0+255)
  6585  0F21  0086               	movwf	6
  6586  0F22  084C               	movf	Update2CaliDatabase@ActualValue,w
  6587  0F23  3FC0               	movwi [0]fsr1
  6588  0F24  084D               	movf	Update2CaliDatabase@ActualValue+1,w
  6589  0F25  3FC1               	movwi [1]fsr1
  6590  0F26  0008               	return
  6591  0F27                     __end_ofPL8:	
  6592  0F27                     PL10:	
  6593  0F27  084B               	movf	printf@f+1,w
  6594  0F28  00D7               	movwf	??_printf+1
  6595  0F29  084A               	movf	printf@f,w
  6596  0F2A  00D6               	movwf	??_printf
  6597  0F2B  0ACA               	incf	printf@f,f
  6598  0F2C  1903               	skipnz
  6599  0F2D  0ACB               	incf	printf@f+1,f
  6600  0F2E  0084               	movwf	4
  6601  0F2F  0857               	movf	??_printf+1,w
  6602  0F30  0085               	movwf	5
  6603  0F31  0800               	movf	0,w	;code access
  6604  0F32  00E1               	movwf	printf@c
  6605  0F33  0008               	return
  6606  0F34                     __end_ofPL10:	
  6607  0F34                     PL12:	
  6608  0F34  0086               	movwf	6
  6609  0F35  3F40               	moviw [0]fsr1
  6610  0F36  00D0               	movwf	??_Update2CaliDatabase+2
  6611  0F37  3F41               	moviw [1]fsr1
  6612  0F38  00D1               	movwf	??_Update2CaliDatabase+3
  6613  0F39  084F               	movf	??_Update2CaliDatabase+1,w
  6614  0F3A  0251               	subwf	??_Update2CaliDatabase+3,w
  6615  0F3B  1D03               	skipz
  6616  0F3C  0008               	return
  6617  0F3D  084E               	movf	??_Update2CaliDatabase,w
  6618  0F3E  0250               	subwf	??_Update2CaliDatabase+2,w
  6619  0F3F  0008               	return
  6620  0F40                     __end_ofPL12:	
  6621  0F40                     PL14:	
  6622  0F40  0709               	addwf	9,w
  6623  0F41  0709               	addwf	9,w
  6624  0F42  3EA2               	addlw	(low ((_CaliBuf| 0+2)))& (0+255)
  6625  0F43  0086               	movwf	6
  6626  0F44  3F40               	moviw [0]fsr1
  6627  0F45  0008               	return
  6628  0F46                     __end_ofPL14:	
  6629  0F46                     PL16:	
  6630  0F46  0709               	addwf	9,w
  6631  0F47  0709               	addwf	9,w
  6632  0F48  3EA0               	addlw	(low (_CaliBuf| 0))& (0+255)
  6633  0F49  0086               	movwf	6
  6634  0F4A  0187               	clrf	7
  6635  0F4B  0008               	return
  6636  0F4C                     __end_ofPL16:	
  6637  0F4C                     PL18:	
  6638  0F4C  00D6               	movwf	??_printf
  6639  0F4D  30CF               	movlw	low (_dpowers| (0+32768))
  6640  0F4E  01D7               	clrf	??_printf+1
  6641  0F4F  35D6               	lslf	??_printf,f
  6642  0F50  0DD7               	rlf	??_printf+1,f
  6643  0F51  0756               	addwf	??_printf,w
  6644  0F52  0084               	movwf	4
  6645  0F53  3081               	movlw	high (_dpowers| (0+32768))
  6646  0F54  3D57               	addwfc	??_printf+1,w
  6647  0F55  0085               	movwf	5
  6648  0F56  3F00               	moviw [0]fsr0
  6649  0F57  0008               	return
  6650  0F58                     __end_ofPL18:	
  6651  0F58                     PL20:	
  6652  0F58  0086               	movwf	6
  6653  0F59  3F40               	moviw [0]fsr1
  6654  0F5A  00CE               	movwf	??_Update2CaliDatabase
  6655  0F5B  3F41               	moviw [1]fsr1
  6656  0F5C  00CF               	movwf	??_Update2CaliDatabase+1
  6657  0F5D  0008               	return
  6658  0F5E                     __end_ofPL20:	
  6659  0F5E                     PL22:	
  6660  0F5E  085A               	movf	Update2CaliDatabase@m,w
  6661  0F5F  0709               	addwf	9,w
  6662  0F60  0709               	addwf	9,w
  6663  0F61  3EA0               	addlw	(low (_CaliBuf| 0))& (0+255)
  6664  0F62  0008               	return
  6665  0F63                     __end_ofPL22:	
  6666  0F63                     PL24:	
  6667  0F63  085B               	movf	Update2CaliDatabase@j,w
  6668  0F64  0709               	addwf	9,w
  6669  0F65  0709               	addwf	9,w
  6670  0F66  3EA0               	addlw	(low (_CaliBuf| 0))& (0+255)
  6671  0F67  0008               	return
  6672  0F68                     __end_ofPL24:	
  6673  0F68                     PL26:	
  6674  0F68  084D               	movf	?___lldiv+3,w
  6675  0F69  00E2               	movwf	LinearLookUpTab@ret+3
  6676  0F6A  084C               	movf	?___lldiv+2,w
  6677  0F6B  00E1               	movwf	LinearLookUpTab@ret+2
  6678  0F6C  084B               	movf	?___lldiv+1,w
  6679  0F6D  00E0               	movwf	LinearLookUpTab@ret+1
  6680  0F6E  084A               	movf	?___lldiv,w
  6681  0F6F  00DF               	movwf	LinearLookUpTab@ret
  6682  0F70  0008               	return
  6683  0F71                     __end_ofPL26:	
  6684  0F71                     PL28:	
  6685  0F71  085B               	movf	Update2CaliDatabase@j,w
  6686  0F72  0709               	addwf	9,w
  6687  0F73  0709               	addwf	9,w
  6688  0F74  3EA2               	addlw	(low ((_CaliBuf| 0+2)))& (0+255)
  6689  0F75  0008               	return
  6690  0F76                     __end_ofPL28:	
  6691  0F76                     PL30:	
  6692  0F76  0863               	movf	LinearLookUpTab@i,w
  6693  0F77  0709               	addwf	9,w
  6694  0F78  0709               	addwf	9,w
  6695  0F79  0764               	addwf	LinearLookUpTab@Tab,w
  6696  0F7A  00DA               	movwf	??_LinearLookUpTab
  6697  0F7B  0008               	return
  6698  0F7C                     __end_ofPL30:	
  6699  0F7C                     PL32:	
  6700  0F7C  0086               	movwf	6
  6701  0F7D  3001               	movlw	1	; select bank2/3
  6702  0F7E  0087               	movwf	7
  6703  0F7F  3F40               	moviw [0]fsr1
  6704  0F80  00DA               	movwf	??_LinearLookUpTab
  6705  0F81  3F41               	moviw [1]fsr1
  6706  0F82  00DB               	movwf	??_LinearLookUpTab+1
  6707  0F83  0008               	return
  6708  0F84                     __end_ofPL32:	
  6709  0F84                     PL34:	
  6710  0F84  084A               	movf	printf@f,w
  6711  0F85  0084               	movwf	4
  6712  0F86  084B               	movf	printf@f+1,w
  6713  0F87  0085               	movwf	5
  6714  0F88  0800               	movf	0,w	;code access
  6715  0F89  0008               	return
  6716  0F8A                     __end_ofPL34:	
  6717  0F8A                     PL36:	
  6718  0F8A  00CE               	movwf	??_Update2CaliDatabase
  6719  0F8B  3F41               	moviw [1]fsr1
  6720  0F8C  00CF               	movwf	??_Update2CaliDatabase+1
  6721  0F8D  3004               	movlw	4
  6722  0F8E  024F               	subwf	??_Update2CaliDatabase+1,w
  6723  0F8F  34B1               	retlw	177
  6724  0F90                     __end_ofPL36:	
  6725  0F90                     PL38:	
  6726  0F90  0866               	movf	CaliTabSendProcess@i,w
  6727  0F91  00F0               	movwf	___wmul@multiplier
  6728  0F92  301E               	movlw	30
  6729  0F93  01F1               	clrf	___wmul@multiplier+1
  6730  0F94  00F2               	movwf	___wmul@multiplicand
  6731  0F95  01F3               	clrf	___wmul@multiplicand+1
  6732  0F96  0008               	return
  6733  0F97                     __end_ofPL38:	
  6734  0F97                     PL42:	
  6735  0F97  0857               	movf	LinearLookUpTab@TabSiz,w
  6736  0F98  0709               	addwf	9,w
  6737  0F99  0709               	addwf	9,w
  6738  0F9A  0764               	addwf	LinearLookUpTab@Tab,w
  6739  0F9B  00DA               	movwf	??_LinearLookUpTab
  6740  0F9C  0008               	return
  6741  0F9D                     __end_ofPL42:	
  6742  0F9D                     PL46:	
  6743  0F9D  0084               	movwf	4
  6744  0F9E  3001               	movlw	1	; select bank2/3
  6745  0F9F  0085               	movwf	5
  6746  0FA0  3F40               	moviw [0]fsr1
  6747  0FA1  0200               	subwf	0,w
  6748  0FA2  0008               	return
  6749  0FA3                     __end_ofPL46:	
  6750  0FA3                     __ptext19:	
  6751 ;; *************** function _EUSART_Write *****************
  6752 ;; Defined at:
  6753 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;  txData          1    wreg     unsigned char 
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;  txData          1    0[COMMON] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      void 
  6760 ;; Registers used:
  6761 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6762 ;; Tracked objects:
  6763 ;;		On entry : 1F/0
  6764 ;;		On exit  : 1F/1
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6767 ;;      Params:         0       0       0       0
  6768 ;;      Locals:         1       0       0       0
  6769 ;;      Temps:          0       0       0       0
  6770 ;;      Totals:         1       0       0       0
  6771 ;;Total ram usage:        1 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    3
  6774 ;; This function calls:
  6775 ;;		Nothing
  6776 ;; This function is called by:
  6777 ;;		_putch
  6778 ;;		_UartSendProcess
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           
  6783                           ;psect for function _EUSART_Write
  6784  0FA3                     _EUSART_Write:	
  6785                           
  6786                           ;incstack = 0
  6787                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6788                           ;EUSART_Write@txData stored from wreg
  6789  0FA3  00F0               	movwf	EUSART_Write@txData
  6790  0FA4                     l2108:	
  6791                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  6792                           
  6793  0FA4  0869               	movf	_eusartTxBufferRemaining,w	;volatile
  6794  0FA5  1903               	btfsc	3,2
  6795  0FA6  2FA4               	goto	l2108
  6796                           
  6797                           ;eusart.c: 136: }
  6798                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  6799  0FA7  0021               	movlb	1	; select bank1
  6800  0FA8  1A11               	btfsc	17,4	;volatile
  6801  0FA9  2FAE               	goto	l150
  6802                           
  6803                           ;eusart.c: 139: {
  6804                           ;eusart.c: 140: TXREG = txData;
  6805  0FAA  0870               	movf	EUSART_Write@txData,w
  6806  0FAB  0023               	movlb	3	; select bank3
  6807  0FAC  009A               	movwf	26	;volatile
  6808                           
  6809                           ;eusart.c: 141: }
  6810  0FAD  2FBC               	goto	l2122
  6811  0FAE                     l150:	
  6812                           
  6813                           ;eusart.c: 142: else
  6814                           ;eusart.c: 143: {
  6815                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  6816  0FAE  1211               	bcf	17,4	;volatile
  6817                           
  6818                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  6819  0FAF  0020               	movlb	0	; select bank0
  6820  0FB0  0848               	movf	_eusartTxHead,w
  6821  0FB1  3EE8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6822  0FB2  0086               	movwf	6
  6823  0FB3  0187               	clrf	7
  6824  0FB4  0870               	movf	EUSART_Write@txData,w
  6825  0FB5  0081               	movwf	1
  6826  0FB6  3008               	movlw	8
  6827  0FB7  0AC8               	incf	_eusartTxHead,f
  6828                           
  6829                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6830  0FB8  0248               	subwf	_eusartTxHead,w
  6831  0FB9  1803               	btfsc	3,0
  6832                           
  6833                           ;eusart.c: 147: {
  6834                           ;eusart.c: 148: eusartTxHead = 0;
  6835  0FBA  01C8               	clrf	_eusartTxHead
  6836                           
  6837                           ;eusart.c: 149: }
  6838                           ;eusart.c: 150: eusartTxBufferRemaining--;
  6839  0FBB  03E9               	decf	_eusartTxBufferRemaining,f	;volatile
  6840  0FBC                     l2122:	
  6841                           
  6842                           ;eusart.c: 151: }
  6843                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  6844  0FBC  0021               	movlb	1	; select bank1
  6845  0FBD  1611               	bsf	17,4	;volatile
  6846  0FBE  0008               	return
  6847  0FBF                     __end_of_EUSART_Write:	
  6848  0FBF                     __ptext27:	
  6849 ;; *************** function _readADC_Differential_0_1_part1 *****************
  6850 ;; Defined at:
  6851 ;;		line 438 in file "ads1115.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;  config          2   12[COMMON] unsigned int 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0, pclath, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 1F/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6865 ;;      Params:         0       0       0       0
  6866 ;;      Locals:         2       0       0       0
  6867 ;;      Temps:          0       0       0       0
  6868 ;;      Totals:         2       0       0       0
  6869 ;;Total ram usage:        2 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    6
  6872 ;; This function calls:
  6873 ;;		_writeRegister
  6874 ;; This function is called by:
  6875 ;;		_ADCProcess
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function _readADC_Differential_0_1_part1
  6881  0FBF                     _readADC_Differential_0_1_part1:	
  6882                           
  6883                           ;ads1115.c: 440: uint16_t config;
  6884                           ;ads1115.c: 442: config = (0x0003) |
  6885                           ;ads1115.c: 443: (0x0000) |
  6886                           ;ads1115.c: 444: (0x0000) |
  6887                           ;ads1115.c: 445: (0x0000) |
  6888                           ;ads1115.c: 446: (0x0060) |
  6889                           ;ads1115.c: 447: (0x0100);
  6890                           
  6891                           ;incstack = 0
  6892                           ; Regs used in _readADC_Differential_0_1_part1: [wreg+status,2+status,0+pclath+cstack]
  6893  0FBF  3063               	movlw	99
  6894  0FC0  00FC               	movwf	readADC_Differential_0_1_part1@config
  6895  0FC1  3001               	movlw	1
  6896  0FC2  00FD               	movwf	readADC_Differential_0_1_part1@config+1
  6897                           
  6898                           ;ads1115.c: 450: config |= m_gain;
  6899  0FC3  0838               	movf	_m_gain,w
  6900  0FC4  04FC               	iorwf	readADC_Differential_0_1_part1@config,f
  6901  0FC5  0839               	movf	_m_gain+1,w
  6902  0FC6  04FD               	iorwf	readADC_Differential_0_1_part1@config+1,f
  6903                           
  6904                           ;ads1115.c: 456: config |= (0x8000);
  6905  0FC7  17FD               	bsf	readADC_Differential_0_1_part1@config+1,7
  6906                           
  6907                           ;ads1115.c: 459: writeRegister(m_i2cAddress, (0x01), config);
  6908  0FC8  083B               	movf	_m_i2cAddress+1,w
  6909  0FC9  00CB               	movwf	writeRegister@i2cAddress+1
  6910  0FCA  083A               	movf	_m_i2cAddress,w
  6911  0FCB  00CA               	movwf	writeRegister@i2cAddress
  6912  0FCC  01CC               	clrf	writeRegister@reg
  6913  0FCD  0ACC               	incf	writeRegister@reg,f
  6914  0FCE  01CD               	clrf	writeRegister@reg+1
  6915  0FCF  087D               	movf	readADC_Differential_0_1_part1@config+1,w
  6916  0FD0  00CF               	movwf	writeRegister@value+1
  6917  0FD1  087C               	movf	readADC_Differential_0_1_part1@config,w
  6918  0FD2  00CE               	movwf	writeRegister@value
  6919  0FD3  2DB9               	ljmp	l2368
  6920  0FD4                     __end_of_readADC_Differential_0_1_part1:	
  6921  0FD4                     __ptext15:	
  6922 ;; *************** function _EUSART_Initialize *****************
  6923 ;; Defined at:
  6924 ;;		line 75 in file "mcc_generated_files/eusart.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;		None
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  1    wreg      void 
  6931 ;; Registers used:
  6932 ;;		wreg, status,2
  6933 ;; Tracked objects:
  6934 ;;		On entry : 1F/0
  6935 ;;		On exit  : 1F/1
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6938 ;;      Params:         0       0       0       0
  6939 ;;      Locals:         0       0       0       0
  6940 ;;      Temps:          0       0       0       0
  6941 ;;      Totals:         0       0       0       0
  6942 ;;Total ram usage:        0 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    3
  6945 ;; This function calls:
  6946 ;;		Nothing
  6947 ;; This function is called by:
  6948 ;;		_SYSTEM_Initialize
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           
  6953                           ;psect for function _EUSART_Initialize
  6954  0FD4                     _EUSART_Initialize:	
  6955  0FD4                     l2580:	
  6956                           ;incstack = 0
  6957                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6958                           
  6959                           
  6960                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  6961  0FD4  0021               	movlb	1	; select bank1
  6962  0FD5  1291               	bcf	17,5	;volatile
  6963                           
  6964                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  6965  0FD6  1211               	bcf	17,4	;volatile
  6966                           
  6967                           ;eusart.c: 84: BAUDCON = 0x08;
  6968  0FD7  3008               	movlw	8
  6969  0FD8  0023               	movlb	3	; select bank3
  6970  0FD9  009F               	movwf	31	;volatile
  6971                           
  6972                           ;eusart.c: 87: RCSTA = 0x90;
  6973  0FDA  3090               	movlw	144
  6974  0FDB  009D               	movwf	29	;volatile
  6975                           
  6976                           ;eusart.c: 90: TXSTA = 0x24;
  6977  0FDC  3024               	movlw	36
  6978  0FDD  009E               	movwf	30	;volatile
  6979                           
  6980                           ;eusart.c: 93: SPBRGL = 0x67;
  6981  0FDE  3067               	movlw	103
  6982  0FDF  009B               	movwf	27	;volatile
  6983                           
  6984                           ;eusart.c: 96: SPBRGH = 0x00;
  6985  0FE0  019C               	clrf	28	;volatile
  6986                           
  6987                           ;eusart.c: 100: eusartTxHead = 0;
  6988  0FE1  0020               	movlb	0	; select bank0
  6989  0FE2  3008               	movlw	8
  6990  0FE3  01C8               	clrf	_eusartTxHead
  6991                           
  6992                           ;eusart.c: 101: eusartTxTail = 0;
  6993  0FE4  01C9               	clrf	_eusartTxTail
  6994                           
  6995                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  6996  0FE5  00E9               	movwf	_eusartTxBufferRemaining	;volatile
  6997                           
  6998                           ;eusart.c: 104: eusartRxHead = 0;
  6999  0FE6  01C6               	clrf	_eusartRxHead
  7000                           
  7001                           ;eusart.c: 105: eusartRxTail = 0;
  7002  0FE7  01C7               	clrf	_eusartRxTail
  7003                           
  7004                           ;eusart.c: 106: eusartRxCount = 0;
  7005  0FE8  01C5               	clrf	_eusartRxCount	;volatile
  7006                           
  7007                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  7008  0FE9  0021               	movlb	1	; select bank1
  7009  0FEA  1691               	bsf	17,5	;volatile
  7010  0FEB  0008               	return
  7011  0FEC                     __end_of_EUSART_Initialize:	
  7012  0FEC                     __ptext11:	
  7013 ;; *************** function _TMR0_Initialize *****************
  7014 ;; Defined at:
  7015 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;		None
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;		None
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      void 
  7022 ;; Registers used:
  7023 ;;		wreg, status,2, status,0, pclath, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : B1F/1
  7026 ;;		On exit  : 1F/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7029 ;;      Params:         0       0       0       0
  7030 ;;      Locals:         0       0       0       0
  7031 ;;      Temps:          0       0       0       0
  7032 ;;      Totals:         0       0       0       0
  7033 ;;Total ram usage:        0 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    4
  7036 ;; This function calls:
  7037 ;;		_TMR0_SetInterruptHandler
  7038 ;; This function is called by:
  7039 ;;		_SYSTEM_Initialize
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           
  7044                           ;psect for function _TMR0_Initialize
  7045  0FEC                     _TMR0_Initialize:	
  7046                           
  7047                           ;tmr0.c: 69: OPTION_REG = (OPTION_REG & 0xC0) | 0xD3 & 0x3F;
  7048                           
  7049                           ;incstack = 0
  7050                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7051  0FEC  0815               	movf	21,w	;volatile
  7052  0FED  39C0               	andlw	192
  7053  0FEE  3813               	iorlw	19
  7054  0FEF  0095               	movwf	21	;volatile
  7055                           
  7056                           ;tmr0.c: 72: TMR0 = 0xCE;
  7057  0FF0  30CE               	movlw	206
  7058  0FF1  0020               	movlb	0	; select bank0
  7059  0FF2  0095               	movwf	21	;volatile
  7060                           
  7061                           ;tmr0.c: 75: timer0ReloadVal= 206;
  7062  0FF3  00EA               	movwf	_timer0ReloadVal	;volatile
  7063                           
  7064                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  7065  0FF4  110B               	bcf	11,2	;volatile
  7066                           
  7067                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
  7068  0FF5  168B               	bsf	11,5	;volatile
  7069                           
  7070                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7071  0FF6  30AC               	movlw	low _TMR0_DefaultInterruptHandler
  7072  0FF7  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7073  0FF8  3002               	movlw	high _TMR0_DefaultInterruptHandler
  7074  0FF9  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7075  0FFA  2B2B               	ljmp	l2280
  7076  0FFB                     __end_of_TMR0_Initialize:	
  7077  0FFB                     __ptext8:	
  7078 ;; *************** function _UartSend *****************
  7079 ;; Defined at:
  7080 ;;		line 477 in file "main.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;  SendNum         1    wreg     unsigned char 
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;  SendNum         1    0[COMMON] unsigned char 
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  1    wreg      void 
  7087 ;; Registers used:
  7088 ;;		wreg, status,2
  7089 ;; Tracked objects:
  7090 ;;		On entry : 1F/1
  7091 ;;		On exit  : 1F/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7094 ;;      Params:         0       0       0       0
  7095 ;;      Locals:         1       0       0       0
  7096 ;;      Temps:          0       0       0       0
  7097 ;;      Totals:         1       0       0       0
  7098 ;;Total ram usage:        1 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; Hardware stack levels required when called:    3
  7101 ;; This function calls:
  7102 ;;		Nothing
  7103 ;; This function is called by:
  7104 ;;		_SendDataToMainBoardProcess
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           
  7109                           ;psect for function _UartSend
  7110  0FFB                     _UartSend:	
  7111                           
  7112                           ;incstack = 0
  7113                           ; Regs used in _UartSend: [wreg+status,2]
  7114                           ;UartSend@SendNum stored from wreg
  7115  0FFB  00F0               	movwf	UartSend@SendNum
  7116                           
  7117                           ;main.c: 479: UartByteToBeSendCnt = SendNum;
  7118  0FFC  0020               	movlb	0	; select bank0
  7119  0FFD  00C2               	movwf	_UartByteToBeSendCnt
  7120                           
  7121                           ;main.c: 480: UartSendCnt=0;
  7122  0FFE  01C4               	clrf	_UartSendCnt
  7123  0FFF  0008               	return
  7124  1000                     __end_of_UartSend:	
  7125                           
  7126                           	psect	intentry
  7127  0004                     __pintentry:	
  7128 ;; *************** function _INTERRUPT_InterruptManager *****************
  7129 ;; Defined at:
  7130 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;		None
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;		None
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  1    wreg      void 
  7137 ;; Registers used:
  7138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7144 ;;      Params:         0       0       0       0
  7145 ;;      Locals:         0       0       0       0
  7146 ;;      Temps:          0       0       0       0
  7147 ;;      Totals:         0       0       0       0
  7148 ;;Total ram usage:        0 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; Hardware stack levels required when called:    2
  7151 ;; This function calls:
  7152 ;;		_EUSART_Receive_ISR
  7153 ;;		_EUSART_Transmit_ISR
  7154 ;;		_TMR0_ISR
  7155 ;; This function is called by:
  7156 ;;		Interrupt level 1
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160  0004                     _INTERRUPT_InterruptManager:	
  7161                           
  7162                           ;incstack = 0
  7163                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7164  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7165  0005  3180               	pagesel	$
  7166                           
  7167                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  7168  0006  1A8B               	btfsc	11,5	;volatile
  7169  0007  1D0B               	btfss	11,2	;volatile
  7170  0008  280D               	goto	i1l58
  7171                           
  7172                           ;interrupt_manager.c: 55: {
  7173                           ;interrupt_manager.c: 56: TMR0_ISR();
  7174  0009  3182  228E  3180   	fcall	_TMR0_ISR
  7175                           
  7176                           ;interrupt_manager.c: 57: }
  7177  000C  2823               	goto	i1l64
  7178  000D                     i1l58:	
  7179                           
  7180                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
  7181  000D  1F0B               	btfss	11,6	;volatile
  7182  000E  2819               	goto	i1l60
  7183  000F  0021               	movlb	1	; select bank1
  7184  0010  1E11               	btfss	17,4	;volatile
  7185  0011  2819               	goto	i1l60
  7186  0012  0020               	movlb	0	; select bank0
  7187  0013  1E11               	btfss	17,4	;volatile
  7188  0014  2819               	goto	i1l60
  7189                           
  7190                           ;interrupt_manager.c: 59: {
  7191                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  7192  0015  3182  2262  3180   	fcall	_EUSART_Transmit_ISR
  7193                           
  7194                           ;interrupt_manager.c: 61: }
  7195  0018  2823               	goto	i1l64
  7196  0019                     i1l60:	
  7197                           
  7198                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  7199  0019  1F0B               	btfss	11,6	;volatile
  7200  001A  2823               	goto	i1l64
  7201  001B  0021               	movlb	1	; select bank1
  7202  001C  1E91               	btfss	17,5	;volatile
  7203  001D  2823               	goto	i1l64
  7204  001E  0020               	movlb	0	; select bank0
  7205  001F  1E91               	btfss	17,5	;volatile
  7206  0020  2823               	goto	i1l64
  7207                           
  7208                           ;interrupt_manager.c: 63: {
  7209                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  7210  0021  3182  2278         	fcall	_EUSART_Receive_ISR
  7211  0023                     i1l64:	
  7212                           ;interrupt_manager.c: 65: }
  7213                           
  7214  0023  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7215  0024  0009               	retfie
  7216  0025                     __end_of_INTERRUPT_InterruptManager:	
  7217                           
  7218                           	psect	text51
  7219  028E                     __ptext51:	
  7220 ;; *************** function _TMR0_ISR *****************
  7221 ;; Defined at:
  7222 ;;		line 109 in file "mcc_generated_files/tmr0.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      void 
  7229 ;; Registers used:
  7230 ;;		wreg, status,2, status,0, pclath, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7236 ;;      Params:         0       0       0       0
  7237 ;;      Locals:         0       0       0       0
  7238 ;;      Temps:          0       0       0       0
  7239 ;;      Totals:         0       0       0       0
  7240 ;;Total ram usage:        0 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    1
  7243 ;; This function calls:
  7244 ;;		Absolute function
  7245 ;;		_BaseTimeTickISR
  7246 ;;		_TMR0_DefaultInterruptHandler
  7247 ;; This function is called by:
  7248 ;;		_INTERRUPT_InterruptManager
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           
  7253                           ;psect for function _TMR0_ISR
  7254  028E                     _TMR0_ISR:	
  7255                           
  7256                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  7257                           
  7258                           ;incstack = 0
  7259                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  7260  028E  110B               	bcf	11,2	;volatile
  7261                           
  7262                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  7263  028F  0020               	movlb	0	; select bank0
  7264  0290  086A               	movf	_timer0ReloadVal,w	;volatile
  7265  0291  0095               	movwf	21	;volatile
  7266                           
  7267                           ;tmr0.c: 117: if(TMR0_InterruptHandler)
  7268  0292  0867               	movf	_TMR0_InterruptHandler,w
  7269  0293  0468               	iorwf	_TMR0_InterruptHandler+1,w
  7270  0294  1903               	btfsc	3,2
  7271  0295  0008               	return
  7272                           
  7273                           ;tmr0.c: 118: {
  7274                           ;tmr0.c: 119: TMR0_InterruptHandler();
  7275  0296  0868               	movf	_TMR0_InterruptHandler+1,w
  7276  0297  008A               	movwf	10
  7277  0298  0867               	movf	_TMR0_InterruptHandler,w
  7278  0299  000A               	callw
  7279  029A  3182               	pagesel	$
  7280  029B  0008               	return
  7281  029C                     __end_of_TMR0_ISR:	
  7282                           
  7283                           	psect	text52
  7284  029C                     __ptext52:	
  7285 ;; *************** function _BaseTimeTickISR *****************
  7286 ;; Defined at:
  7287 ;;		line 627 in file "main.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;		None
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;		None
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		status,2, status,0
  7296 ;; Tracked objects:
  7297 ;;		On entry : 1F/0
  7298 ;;		On exit  : 1F/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7301 ;;      Params:         0       0       0       0
  7302 ;;      Locals:         0       0       0       0
  7303 ;;      Temps:          0       0       0       0
  7304 ;;      Totals:         0       0       0       0
  7305 ;;Total ram usage:        0 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; This function calls:
  7308 ;;		Nothing
  7309 ;; This function is called by:
  7310 ;;		_main
  7311 ;;		_TMR0_ISR
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           
  7316                           ;psect for function _BaseTimeTickISR
  7317  029C                     _BaseTimeTickISR:	
  7318                           
  7319                           ;main.c: 629: LedTimerCnt++;
  7320                           
  7321                           ;incstack = 0
  7322                           ; Regs used in _BaseTimeTickISR: [status]
  7323  029C  0AB0               	incf	_LedTimerCnt,f
  7324  029D  1903               	skipnz
  7325  029E  0AB1               	incf	_LedTimerCnt+1,f
  7326                           
  7327                           ;main.c: 630: ADCDelayCnt++;
  7328  029F  0AA8               	incf	_ADCDelayCnt,f
  7329  02A0  1903               	skipnz
  7330  02A1  0AA9               	incf	_ADCDelayCnt+1,f
  7331                           
  7332                           ;main.c: 631: SendTmr++;
  7333  02A2  0AB4               	incf	_SendTmr,f
  7334  02A3  1903               	skipnz
  7335  02A4  0AB5               	incf	_SendTmr+1,f
  7336  02A5  0008               	return
  7337  02A6                     __end_of_BaseTimeTickISR:	
  7338                           
  7339                           	psect	text53
  7340  02AC                     __ptext53:	
  7341 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  7342 ;; Defined at:
  7343 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  1    wreg      void 
  7350 ;; Registers used:
  7351 ;;		None
  7352 ;; Tracked objects:
  7353 ;;		On entry : 1F/0
  7354 ;;		On exit  : 1F/0
  7355 ;;		Unchanged: 1F/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7357 ;;      Params:         0       0       0       0
  7358 ;;      Locals:         0       0       0       0
  7359 ;;      Temps:          0       0       0       0
  7360 ;;      Totals:         0       0       0       0
  7361 ;;Total ram usage:        0 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_TMR0_Initialize
  7367 ;;		_TMR0_ISR
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           
  7372                           ;psect for function _TMR0_DefaultInterruptHandler
  7373  02AC                     _TMR0_DefaultInterruptHandler:	
  7374                           
  7375                           ;incstack = 0
  7376                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  7377  02AC  0008               	return
  7378  02AD                     __end_of_TMR0_DefaultInterruptHandler:	
  7379                           
  7380                           	psect	text54
  7381  0262                     __ptext54:	
  7382 ;; *************** function _EUSART_Transmit_ISR *****************
  7383 ;; Defined at:
  7384 ;;		line 165 in file "mcc_generated_files/eusart.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;		None
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;		None
  7389 ;; Return value:  Size  Location     Type
  7390 ;;                  1    wreg      void 
  7391 ;; Registers used:
  7392 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7393 ;; Tracked objects:
  7394 ;;		On entry : 1F/0
  7395 ;;		On exit  : 1E/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7398 ;;      Params:         0       0       0       0
  7399 ;;      Locals:         0       0       0       0
  7400 ;;      Temps:          0       0       0       0
  7401 ;;      Totals:         0       0       0       0
  7402 ;;Total ram usage:        0 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; This function calls:
  7405 ;;		Nothing
  7406 ;; This function is called by:
  7407 ;;		_INTERRUPT_InterruptManager
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           
  7412                           ;psect for function _EUSART_Transmit_ISR
  7413  0262                     _EUSART_Transmit_ISR:	
  7414                           
  7415                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  7416                           
  7417                           ;incstack = 0
  7418                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7419  0262  3008               	movlw	8
  7420  0263  0269               	subwf	_eusartTxBufferRemaining,w
  7421  0264  1803               	skipnc
  7422  0265  2A75               	goto	i1l162
  7423                           
  7424                           ;eusart.c: 170: {
  7425                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
  7426  0266  0849               	movf	_eusartTxTail,w
  7427  0267  3EE8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  7428  0268  0086               	movwf	6
  7429  0269  0187               	clrf	7
  7430  026A  0801               	movf	1,w
  7431  026B  0023               	movlb	3	; select bank3
  7432  026C  009A               	movwf	26	;volatile
  7433  026D  0020               	movlb	0	; select bank0
  7434  026E  3008               	movlw	8
  7435  026F  0AC9               	incf	_eusartTxTail,f
  7436                           
  7437                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  7438  0270  0249               	subwf	_eusartTxTail,w
  7439  0271  1803               	btfsc	3,0
  7440                           
  7441                           ;eusart.c: 173: {
  7442                           ;eusart.c: 174: eusartTxTail = 0;
  7443  0272  01C9               	clrf	_eusartTxTail
  7444                           
  7445                           ;eusart.c: 175: }
  7446                           ;eusart.c: 176: eusartTxBufferRemaining++;
  7447  0273  0AE9               	incf	_eusartTxBufferRemaining,f	;volatile
  7448                           
  7449                           ;eusart.c: 177: }
  7450  0274  0008               	return
  7451  0275                     i1l162:	
  7452                           
  7453                           ;eusart.c: 178: else
  7454                           ;eusart.c: 179: {
  7455                           ;eusart.c: 180: PIE1bits.TXIE = 0;
  7456  0275  0021               	movlb	1	; select bank1
  7457  0276  1211               	bcf	17,4	;volatile
  7458  0277  0008               	return
  7459  0278                     __end_of_EUSART_Transmit_ISR:	
  7460                           
  7461                           	psect	text55
  7462  0278                     __ptext55:	
  7463 ;; *************** function _EUSART_Receive_ISR *****************
  7464 ;; Defined at:
  7465 ;;		line 184 in file "mcc_generated_files/eusart.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;		None
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      void 
  7472 ;; Registers used:
  7473 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7474 ;; Tracked objects:
  7475 ;;		On entry : 1F/0
  7476 ;;		On exit  : 1F/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7479 ;;      Params:         0       0       0       0
  7480 ;;      Locals:         0       0       0       0
  7481 ;;      Temps:          0       0       0       0
  7482 ;;      Totals:         0       0       0       0
  7483 ;;Total ram usage:        0 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; This function calls:
  7486 ;;		Nothing
  7487 ;; This function is called by:
  7488 ;;		_INTERRUPT_InterruptManager
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           
  7493                           ;psect for function _EUSART_Receive_ISR
  7494  0278                     _EUSART_Receive_ISR:	
  7495                           
  7496                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
  7497                           
  7498                           ;incstack = 0
  7499                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7500  0278  0023               	movlb	3	; select bank3
  7501  0279  1C9D               	btfss	29,1	;volatile
  7502  027A  2A7D               	goto	i1l2892
  7503                           
  7504                           ;eusart.c: 188: {
  7505                           ;eusart.c: 191: RCSTAbits.CREN = 0;
  7506  027B  121D               	bcf	29,4	;volatile
  7507                           
  7508                           ;eusart.c: 192: RCSTAbits.CREN = 1;
  7509  027C  161D               	bsf	29,4	;volatile
  7510  027D                     i1l2892:	
  7511                           
  7512                           ;eusart.c: 193: }
  7513                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
  7514  027D  0020               	movlb	0	; select bank0
  7515  027E  0846               	movf	_eusartRxHead,w
  7516  027F  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  7517  0280  0086               	movwf	6
  7518  0281  3001               	movlw	1	; select bank2/3
  7519  0282  0087               	movwf	7
  7520  0283  0023               	movlb	3	; select bank3
  7521  0284  0819               	movf	25,w	;volatile
  7522  0285  0081               	movwf	1
  7523  0286  0020               	movlb	0	; select bank0
  7524  0287  3008               	movlw	8
  7525  0288  0AC6               	incf	_eusartRxHead,f
  7526                           
  7527                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7528  0289  0246               	subwf	_eusartRxHead,w
  7529  028A  1803               	btfsc	3,0
  7530                           
  7531                           ;eusart.c: 198: {
  7532                           ;eusart.c: 199: eusartRxHead = 0;
  7533  028B  01C6               	clrf	_eusartRxHead
  7534                           
  7535                           ;eusart.c: 200: }
  7536                           ;eusart.c: 201: eusartRxCount++;
  7537  028C  0AC5               	incf	_eusartRxCount,f	;volatile
  7538  028D  0008               	return
  7539  028E                     __end_of_EUSART_Receive_ISR:	
  7540  007E                     btemp	set	126	;btemp
  7541  007E                     int$flags	set	126
  7542  007E                     wtemp	set	126
  7543  007E                     wtemp0	set	126
  7544  0080                     wtemp1	set	128
  7545  0082                     wtemp2	set	130
  7546  0084                     wtemp3	set	132
  7547  0086                     wtemp4	set	134
  7548  0088                     wtemp5	set	136
  7549  007F                     wtemp6	set	127
  7550  007E                     ttemp	set	126
  7551  007E                     ttemp0	set	126
  7552  0081                     ttemp1	set	129
  7553  0084                     ttemp2	set	132
  7554  0087                     ttemp3	set	135
  7555  007F                     ttemp4	set	127
  7556  007E                     ltemp	set	126
  7557  007E                     ltemp0	set	126
  7558  0082                     ltemp1	set	130
  7559  0086                     ltemp2	set	134
  7560  0080                     ltemp3	set	128


Data Sizes:
    Strings     137
    Constant    10
    Data        0
    BSS         198
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      75
    BANK1            80      0      80
    BANK2            80      0      76

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 37
		 -> STR_4(CODE[36]), STR_3(CODE[27]), STR_2(CODE[37]), STR_1(CODE[37]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    LinearLookUpTab@Tab	PTR struct . size(1) Largest target is 68
		 -> CaliTab(BANK2[68]), 

    EEpromBuffeWirte@pBuffer	PTR unsigned char  size(1) Largest target is 4
		 -> Update2CaliDatabase@tmp(BANK0[4]), 

    EEpromBufferRead@pBuffer	PTR unsigned char  size(1) Largest target is 4
		 -> UpdateCaliBuf@tmp1(COMMON[4]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> BaseTimeTickISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> BaseTimeTickISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_UartRecProcess
    _UartSendProcess->_EUSART_Write
    _UartDriverRecBufferClr->_EUSART_Read
    _ConstructCaliTab->_UpdateCaliBuf
    ___aldiv->___lmul
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _CaliTabSendProcess->_UpdateCaliBuf
    _printf->___lwmod
    _putch->_EUSART_Write
    _ADCProcess->_Cali
    _ADCProcess->_ChangeADS1115ValueToResitor
    _ADCProcess->_readADC_Differential_0_1_part1
    _readADC_Differential_0_1_part2->_readRegister
    _readRegister->_ReceiveFromRom
    _readRegister->_SendToRom
    _ReceiveFromRom->_IsCharOne
    _readADC_Differential_0_1_part1->_writeRegister
    _writeRegister->_SendToRom
    _SendToRom->_IsCharOne
    _Update2CaliDatabase->_UpdateCaliBuf
    ___lwmod->___lwdiv
    _UpdateCaliBuf->_EEpromBufferRead
    _EEpromBufferRead->_eeprom_read
    _EraseCaliDatabase->_eeprom_write
    _EEpromBuffeWirte->_eeprom_write
    _ChangeADS1115ValueToResitor->___lmul
    _Cali->___lmul
    _LinearLookUpTab->___lmul
    ___lldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_CaliTabSendProcess
    _UartRecProcess->_ConstructCaliTab
    _ConstructCaliTab->___aldiv
    _SendDataToMainBoardProcess->_printf
    _CaliTabSendProcess->_printf
    _readADC_Differential_0_1_part2->_readRegister
    _readADC_Differential_0_1_part1->_writeRegister
    _ChangeADS1115ValueToResitor->___lldiv
    _Cali->_LinearLookUpTab
    _LinearLookUpTab->___lldiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   21698
                         _ADCProcess
                 _CaliTabSendProcess
                   _ConstructCaliTab
                  _SYSTEM_Initialize
         _SendDataToMainBoardProcess
           _TMR0_SetInterruptHandler
                     _UartRecProcess
                    _UartSendProcess
 ---------------------------------------------------------------------------------
 (1) _UartSendProcess                                      0     0      0      44
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (1) _UartRecProcess                                       1     1      0    4435
                                             13 COMMON     1     1      0
                   _ConstructCaliTab
                        _EUSART_Read
                  _EraseCaliDatabase
             _UartDriverRecBufferClr
                             _printf
 ---------------------------------------------------------------------------------
 (2) _UartDriverRecBufferClr                               0     0      0      24
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          1     1      0      24
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ConstructCaliTab                                    14    14      0    2032
                                             14 BANK0     14    14      0
                      _UpdateCaliBuf
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     406
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SendDataToMainBoardProcess                           0     0      0    2159
                           _UartSend
                             _printf
 ---------------------------------------------------------------------------------
 (2) _UartSend                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     128
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     128
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     128
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CaliTabSendProcess                                   5     5      0    3266
                                             24 BANK0      5     5      0
                      _UpdateCaliBuf
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              32    20     12    2137
                                              0 BANK0     24    12     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     410
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _ADCProcess                                           0     0      0    9506
                               _Cali
        _ChangeADS1115ValueToResitor
                _Update2CaliDatabase
                       _ads1015_init
     _readADC_Differential_0_1_part1
     _readADC_Differential_0_1_part2
 ---------------------------------------------------------------------------------
 (2) _readADC_Differential_0_1_part2                       4     2      2     871
                                              4 BANK0      4     2      2
                       _readRegister
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         8     4      4     803
                                             10 COMMON     4     0      4
                                              0 BANK0      4     4      0
                          _IIC_Delay
                     _ReceiveFromRom
                          _SendToRom
                           _StartRom
                            _StopRom
                               _mack
 ---------------------------------------------------------------------------------
 (4) _mack                                                 0     0      0       0
                          _IIC_Delay
 ---------------------------------------------------------------------------------
 (4) _ReceiveFromRom                                       6     4      2      95
                                              4 COMMON     6     4      2
                          _IIC_Delay
                     _IIC_Delay_Half
                          _IsCharOne
 ---------------------------------------------------------------------------------
 (2) _readADC_Differential_0_1_part1                       2     2      0     807
                                             12 COMMON     2     2      0
                      _writeRegister
 ---------------------------------------------------------------------------------
 (3) _writeRegister                                        8     2      6     782
                                             10 COMMON     2     2      0
                                              0 BANK0      6     0      6
                          _IIC_Delay
                          _SendToRom
                           _StartRom
                            _StopRom
 ---------------------------------------------------------------------------------
 (4) _StopRom                                              0     0      0       0
                          _IIC_Delay
 ---------------------------------------------------------------------------------
 (4) _StartRom                                             0     0      0       0
                          _IIC_Delay
 ---------------------------------------------------------------------------------
 (4) _SendToRom                                            6     4      2     488
                                              4 COMMON     6     4      2
                          _IIC_Delay
                     _IIC_Delay_Half
                          _IsCharOne
 ---------------------------------------------------------------------------------
 (5) _IsCharOne                                            4     2      2      24
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) _IIC_Delay_Half                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _IIC_Delay                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ads1015_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Update2CaliDatabase                                 18    14      4    2945
                                              0 BANK0     18    14      4
                   _EEpromBuffeWirte
                  _EraseCaliDatabase
                      _UpdateCaliBuf
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     371
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     374
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) _UpdateCaliBuf                                        5     5      0     516
                                              8 COMMON     5     5      0
                   _EEpromBufferRead
 ---------------------------------------------------------------------------------
 (4) _EEpromBufferRead                                     7     4      3     289
                                              1 COMMON     7     4      3
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (5) _eeprom_read                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EraseCaliDatabase                                    1     1      0     218
                                              2 COMMON     1     1      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _EEpromBuffeWirte                                     7     4      3     417
                                              2 COMMON     7     4      3
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         2     1      1     150
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ChangeADS1115ValueToResitor                         10     8      2    1417
                                             12 COMMON     2     0      2
                                             13 BANK0      8     8      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _Cali                                                 2     0      2    3466
                                             12 COMMON     2     0      2
                    _LinearLookUpTab
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _LinearLookUpTab                                     14    11      3    2095
                                             13 BANK0     14    11      3
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     644
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     608
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0       0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
                    _BaseTimeTickISR *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _BaseTimeTickISR                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Receive_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCProcess
     _Cali
       _LinearLookUpTab
         ___lldiv
           ___lmul (ARG)
         ___lmul
       ___lldiv
         ___lmul (ARG)
       ___lmul
     _ChangeADS1115ValueToResitor
       ___lldiv
         ___lmul (ARG)
       ___lmul
     _Update2CaliDatabase
       _EEpromBuffeWirte
         _eeprom_write
       _EraseCaliDatabase
         _eeprom_write
       _UpdateCaliBuf
         _EEpromBufferRead
           _eeprom_read
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _ads1015_init
     _readADC_Differential_0_1_part1
       _writeRegister
         _IIC_Delay
         _SendToRom
           _IIC_Delay
           _IIC_Delay_Half
           _IsCharOne
         _StartRom
           _IIC_Delay
         _StopRom
           _IIC_Delay
     _readADC_Differential_0_1_part2
       _readRegister
         _IIC_Delay
         _ReceiveFromRom
           _IIC_Delay
           _IIC_Delay_Half
           _IsCharOne
         _SendToRom
           _IIC_Delay
           _IIC_Delay_Half
           _IsCharOne
         _StartRom
           _IIC_Delay
         _StopRom
           _IIC_Delay
         _mack
           _IIC_Delay
   _CaliTabSendProcess
     _UpdateCaliBuf
       _EEpromBufferRead
         _eeprom_read
     ___wmul
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _ConstructCaliTab
     _UpdateCaliBuf
       _EEpromBufferRead
         _eeprom_read
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _SendDataToMainBoardProcess
     _UartSend
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _TMR0_SetInterruptHandler
   _UartRecProcess
     _ConstructCaliTab
       _UpdateCaliBuf
         _EEpromBufferRead
           _eeprom_read
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _EUSART_Read
     _EraseCaliDatabase
       _eeprom_write
     _UartDriverRecBufferClr
       _EUSART_Read
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
   _UartSendProcess
     _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     Absolute function(Fake) *
     _BaseTimeTickISR *
     _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      F5       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1D      4B       6       93.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4C      10       95.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      F5      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue May 09 19:46:36 2017

                __size_of_UartSendProcess 0011                           ?_IIC_Delay_Half 0070  
                 writeRegister@i2cAddress 004A                               __CFG_CP$OFF 0000  
                                      PL2 0EFA                                        PL4 0F06  
                                      PL6 0F0F                                        PL8 0F19  
                                      _RD 0CA8                                        _WR 0CA9  
                     ___wmul@multiplicand 0072                           _timer0ReloadVal 006A  
                                     PL10 0F27                                       PL20 0F58  
                                     PL12 0F34                                       PL30 0F76  
                                     PL22 0F5E                                       PL14 0F40  
                                     PL40 01C3                                       PL32 0F7C  
                                     PL24 0F63                                       PL16 0F46  
                                     PL42 0F97                                       PL34 0F84  
                                     PL26 0F68                                       PL18 0F4C  
                                     PL44 01C9                                       PL36 0F8A  
                                     PL28 0F71                                       PL46 0F9D  
                                     PL38 0F90                                       l150 0FAE  
                                     l601 0D01                                       l442 0DFB  
                                     l702 0979                                       l448 0E00  
                                     l566 0C5E                                       l746 0167  
                                     l579 0CAA                                       _GIE 005F  
                            __CFG_CPD$OFF 0000                      Update2CaliDatabase@i 0059  
                    Update2CaliDatabase@j 005B                      Update2CaliDatabase@k 0058  
                    Update2CaliDatabase@m 005A       SendDataToMainBoardProcess@SendCount 003C  
                     __size_of_ADCProcess 0051                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            ?_EUSART_Read 0070                              __CFG_LVP$OFF 0000  
                             _CaliTabSize 003F                                      l2102 0E5F  
                                    l2130 0C92                                      l2122 0FBC  
                                    l2108 0FA4                                      l2214 0D45  
                                    l3030 0E91                                      l3014 005E  
                                    l3022 0071                                      l2312 0B07  
                                    l3008 0053                                      l2330 0830  
                                    l3034 0E98                                      l2332 089E  
                                    l2092 0E30                                      l2404 0D6A  
                                    l3052 0EB5                                      l2500 01BA  
                                    l2246 0983                                      l2318 082F  
                                    l2174 0E02                                      l2430 0DB0  
                                    l3038 0E9C                                      l3062 0ED1  
                                    l2272 0A1D                                      l2264 0A00  
                                    l2336 08B0                                      l2328 089C  
                                    l2280 0B2B                                      l2362 0B20  
                                    l2346 0C70                                      l2522 0CD7  
                                    l2514 0CC8                                      l2610 0A5F  
                                    l2426 0DA5                                      l2450 0B79  
                                    l3058 0ECF                                      l3090 08DC  
                                    l2276 0A23                                      l2444 0C6D  
                                    l2284 007D                                      l2526 0CDB  
                                    l2542 0CF7                                      l2622 0A68  
                                    l2374 0DBB                                      l2454 0B7F  
                                    l2702 00DE                                      l3094 08E5  
                                    l2640 0AB4                                      l2624 0A6B  
                                    l2392 0DEC                                      l2368 0DB9  
                                    l2720 0B9B                                      l2704 00E1  
                                    l2538 0CEB                                      l2546 0CFB  
                                    l2714 0B8C                                      l2474 0176  
                                    l2820 09A8                                      l2396 0DF6  
                                    l2580 0FD4                                      l2492 01A6  
                                    l2484 0189                                      l2708 00E4  
                                    l2670 0ADC                                      l2646 0AB5  
                                    l2654 0AD2                                      l2726 0BA6  
                                    l2808 0968                                      l2736 0BC8  
                                    l2496 01AC                                      l2658 0AD4  
                                    l2842 0D2C                                      l2930 08F3  
                                    l2762 0BFA                                      l2754 0BE8  
                                    l2738 0BD4                                      l2932 08F6  
                                    l2780 0C34                                      l2772 0C21  
                                    l2748 0BE6                                      l2916 0B3F  
                                    l2950 0926                                      l2942 0907  
                                    l2790 0C59                                      l2774 0C24  
                                    l2678 0094                                      l2862 0076  
                                    l2848 0D31                                      l2928 08F2  
                                    l2784 0C3B                                      l2776 0C28  
                                    l2768 0C06                                      l2792 0B8E  
                                    l2696 00D6                                      l2688 009A  
                                    l2954 0931                                      l2938 08FD  
                                    l2786 0C3F                                      l2970 0EE0  
                                    l2958 0933                                      l2982 003B  
                                    l2994 0044                                      l2986 003D  
                                    STR_1 01FE                                      STR_2 01D9  
                                    STR_3 0247                                      STR_4 0223  
                                    u2125 0BF3                                      _LATA 010C  
                                    u2245 09A3                                      u2165 0C15  
                                    u1535 0B10                                      u1375 0C9B  
                                    u1545 0809                                      u1495 0A12  
                                    u1575 083D                                      u1835 0CD0  
                                    u1785 019B                                      u1875 0CF1  
                                    i1l60 0019                                      i1l64 0023  
                                    i1l58 000D                                      _TMR0 0015  
                                    _WREN 0CAA                                      _Cali 0942  
                                    _WPUA 020C                            ??_eeprom_write 0071  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                                    _mack 0E64                        __size_of_IIC_Delay 0003  
                                    _main 08D0                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      ltemp 007E  
                                    start 0025                                      ttemp 007E  
                                    wtemp 007E            EEpromBuffeWirte@NumByteToWrite 0073  
                           SendToRom@data 0074                   EEpromBuffeWirte@pBuffer 0077  
                 __end_of_TMR0_Initialize 0FFB            ??_TMR0_DefaultInterruptHandler 0070  
                                   ?_Cali 007C                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0005             __end_of_OSCILLATOR_Initialize 0E7D  
     __size_of_SendDataToMainBoardProcess 0050                           __end_of___aldiv 01C3  
                                   ?_mack 0070                                     ?_main 0070  
                         __end_of_StopRom 0E42                                     _EEADR 0191  
                           __CFG_WDTE$OFF 0000                                     _CARRY 0018  
                         __end_of___lldiv 0A2C                           __end_of___lwdiv 0CE0  
                                   i1l162 0275                           __end_of___lwmod 0D00  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TXREG 019A  
                                   _TXSTA 019E         __size_of_TMR0_SetInterruptHandler 0006  
                     ___lmul@multiplicand 0074                 ?_TMR0_SetInterruptHandler 0070  
                        IsCharOne@retcode 0072                   ?_UartDriverRecBufferClr 0070  
                        __end_of_TMR0_ISR 029C                           __end_of_dpowers 01D9  
                          _WDT_Initialize 0E8D                    Update2CaliDatabase@tmp 0052  
                         __end_of_isdigit 0C6F                           _CalibratingFlag 0040  
                                   _putch 0C5F                          ?_BaseTimeTickISR 0070  
                                   pclath 000A                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                __size_of_LinearLookUpTab 00B4                         UpdateCaliBuf@tmp1 0078  
            __size_of_Update2CaliDatabase 00D9                            __CFG_MCLRE$OFF 0000  
                            __end_of_Cali 0975                           __initialization 08B5  
                            __end_of_mack 0E6F                              __end_of_main 08F1  
                          SendToRom@count 0078          ??_readADC_Differential_0_1_part1 007C  
         ?_readADC_Differential_0_1_part1 0070           ?_readADC_Differential_0_1_part2 004E  
        ??_readADC_Differential_0_1_part2 007E                         EEpromBuffeWirte@i 0078  
                          ??_EUSART_Write 0070               ?_INTERRUPT_InterruptManager 0070  
                                  ??_Cali 007E                         ?_ConstructCaliTab 0070  
                       EEpromBufferRead@i 0077                                    ??_mack 0070  
                                  ??_main 007E                        __size_of_IsCharOne 000D  
                       __end_of_IIC_Delay 0E33                         ??_UartSendProcess 0071  
                      ??_ConstructCaliTab 0058                            __CFG_PLLEN$OFF 0000  
          __end_of_UartDriverRecBufferClr 007D                          __end_of_UartSend 1000  
                          _UartRecProcess 0027                    __end_of_WDT_Initialize 0E90  
                           ?_readRegister 007A                          __end_of_StartRom 0E54  
                                  _EEDATA 0193                                    _EECON1 0195  
                                  _EECON2 0196                                    _APFCON 011D  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  i1l2892 027D                               _LedTimerCnt 0030  
                 _SendDataToMainBoardStep 0041                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                                  _WDTCON 0097                           ReceiveFromRom@m 0076  
                            ??_ADCProcess 007E                  __end_of_EEpromBuffeWirte 0B1F  
    ChangeADS1115ValueToResitor@ADC_value 007C                  __end_of_EEpromBufferRead 0CA9  
                          __CFG_PWRTE$OFF 0000                                    _Length 0032  
                              _UartRecBuf 0020                                _UartRecCnt 0043  
                    __size_of_eeprom_read 0012                              _ActualLength 002E  
                                  ___lmul 0975                                 ??___aldiv 007C  
                                  ___wmul 0B77                        __size_of_SendToRom 0037  
                               ??_StopRom 0070                            __CFG_STVREN$ON 0000  
                               ??___lldiv 007C                                 ??___lwdiv 0074  
                               ??___lwmod 007B                                    _m_gain 0038  
                     _EUSART_Transmit_ISR 0262                          ?_TMR0_Initialize 0070  
                    __end_of_eeprom_write 0D1C                              _m_i2cAddress 003A  
                                  _printf 0B8C                    __end_of_UartRecProcess 0076  
                               ??_isdigit 0070                          LinearLookUpTab@i 0063  
     __end_of_ChangeADS1115ValueToResitor 09ED               _ChangeADS1115ValueToResitor 099A  
                      __end_of_ADCProcess 0942                           ?_WDT_Initialize 0070  
                          ??_readRegister 007E  TMR0_SetInterruptHandler@InterruptHandler 0070  
                    ?_EUSART_Transmit_ISR 0070                      __size_of_EUSART_Read 0017  
                       _SYSTEM_Initialize 0E6F                   __end_of__initialization 08CD  
                         eeprom_read@addr 0070                         __end_of_IsCharOne 0E64  
                      ?_SYSTEM_Initialize 0070            Update2CaliDatabase@ActualValue 004C  
                        ??_IIC_Delay_Half 0070            ChangeADS1115ValueToResitor@tmp 005B  
                  __size_of_writeRegister 0040                        EraseCaliDatabase@i 0072  
                          __pcstackCOMMON 0070                       ??_SYSTEM_Initialize 0072  
                       ??_LinearLookUpTab 005A                                 ?_TMR0_ISR 0070  
                      _CaliTabSendProcess 0B31                             __end_of_putch 0C61  
                              __end_ofPL2 0F06                                __end_ofPL4 0F0F  
                              __end_ofPL6 0F19                                __end_ofPL8 0F27  
                   LinearLookUpTab@TabSiz 0057                           readRegister@reg 007C  
                         readRegister@ret 004A                           ?_UartRecProcess 0070  
                     ?_CaliTabSendProcess 0070                            _OPTION_REGbits 0095  
                       eeprom_write@value 0070                 __end_of_SYSTEM_Initialize 0E78  
                   ??_EUSART_Transmit_ISR 0070                         __end_of_SendToRom 0E30  
                                 ??_putch 0071                                __pbssBANK0 0020  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                    __end_of_EUSART_Write 0FBF                      ??_CaliTabSendProcess 007D  
             __size_of_EUSART_Receive_ISR 0016                   __size_of_ReceiveFromRom 002B  
                               ?_UartSend 0070                                __pmaintext 08D0  
                   __end_of_UpdateCaliBuf 0C90          __end_of_TMR0_SetInterruptHandler 0B31  
                                 ?___lmul 0070                                   ?___wmul 0070  
                              ??_TMR0_ISR 0070                                __pintentry 0004  
                               ?_StartRom 0070                                   _BAUDCON 019F  
                          ___lmul@product 0078                                   _ADCStep 003D  
                                 ?_printf 004A                             ?_ads1015_init 0070  
                           _eusartRxCount 0045                             _writeRegister 0DB9  
                              _m_bitShift 0036                       _Update2CaliDatabase 0A2C  
                                 _OSCTUNE 0098                                   _CaliBuf 00A0  
                                 _CaliTab 0128                       CaliTabSendProcess@i 0066  
       readADC_Differential_0_1_part2@res 0050                                 _ADC_Value 002A  
                    ?_Update2CaliDatabase 004A                                   _SendTmr 0034  
                             _UartSendBuf 00E0                               _UartSendCnt 0044  
                              ??_UartSend 0070                           _UartSendProcess 0EE0  
                    __end_of_readRegister 0DB9                     __size_of_eeprom_write 001C  
                                 ___aldiv 0157                                   _StopRom 0E33  
                         __size_of___lmul 0025                                   ___lldiv 09ED  
                         __size_of___wmul 0015          Update2CaliDatabase@OriginalValue 0056  
                              ??_StartRom 0070                                   ___lwdiv 0CBB  
                                 ___lwmod 0CE0                                   __ptext1 0EE0  
                                 __ptext2 0027                                   __ptext3 0076  
                                 __ptext4 007D                                   __ptext5 0094  
                                 __ptext6 0157                                   __ptext7 0E90  
                                 __ptext8 0FFB                            ??_ads1015_init 0070  
                                 __ptext9 0E6F                           __size_of_printf 00D3  
                          ?_writeRegister 004A                                   _dpowers 01CF  
                   _OSCILLATOR_Initialize 0E78                                   _isdigit 0C61  
                        ___aldiv@dividend 004E                  ??_PIN_MANAGER_Initialize 0070  
                               _IIC_Delay 0E30                __size_of_SYSTEM_Initialize 0009  
                EEpromBufferRead@ReadAddr 0071                                   clrloop0 02A7  
                    end_of_initialization 08CD              ??_SendDataToMainBoardProcess 007C  
               __size_of_ConstructCaliTab 00C3                              _eeprom_write 0D00  
                       _EUSART_Initialize 0FD4                         ?_EEpromBuffeWirte 0072  
                   ??_Update2CaliDatabase 004E                           ___lldiv@divisor 004A  
                       ?_EEpromBufferRead 0071                  __size_of_BaseTimeTickISR 000A  
                         ___lldiv@counter 0056                        ?_EUSART_Initialize 0070  
                      ??_EEpromBuffeWirte 0075                                 _RCSTAbits 019D  
                                 printf@c 0061                                   printf@f 004A  
                      ??_EEpromBufferRead 0074                          ___aldiv@quotient 0054  
                            __pstringtext 01CF                       ??_EUSART_Initialize 0070  
                        ??_WDT_Initialize 0070                  _TMR0_SetInterruptHandler 0B2B  
                               _PORTAbits 000C                          __CFG_FOSC$INTOSC 0000  
                               _TRISAbits 008C                     __size_of_EUSART_Write 001C  
                              ?_IIC_Delay 0070                    readRegister@i2cAddress 007A  
                         _LinearLookUpTab 0801                 __end_of_EUSART_Initialize 0FEC  
                 __end_of_UartSendProcess 0EF1                             ??_eeprom_read 0070  
                             printf@width 005F      __size_of_ChangeADS1115ValueToResitor 0053  
                          _ReceiveFromRom 0D3D                                 _IsCharOne 0E57  
                             _ADCDelayCnt 0028                          ??_UartRecProcess 007D  
                          __end_of___lmul 099A                            __end_of___wmul 0B8C  
                            _EUSART_Write 0FA3                         __size_of_TMR0_ISR 000E  
                         ??_writeRegister 007A                    ?_OSCILLATOR_Initialize 0070  
                          __end_of_printf 0C5F                               __end_ofPL10 0F34  
                             __end_ofPL20 0F5E                               __end_ofPL12 0F40  
                             __end_ofPL30 0F7C                               __end_ofPL22 0F63  
                             __end_ofPL14 0F46                               __end_ofPL40 01C9  
                             __end_ofPL32 0F84                               __end_ofPL24 0F68  
                             __end_ofPL16 0F4C                               __end_ofPL42 0F9D  
                             __end_ofPL34 0F8A                               __end_ofPL26 0F71  
                             __end_ofPL18 0F58                               __end_ofPL44 01CF  
                             __end_ofPL36 0F90                               __end_ofPL28 0F76  
                             __end_ofPL46 0FA3                               __end_ofPL38 0F97  
                     start_initialization 08B5                          SendToRom@retcode 0076  
                __size_of_TMR0_Initialize 000F           __size_of_PIN_MANAGER_Initialize 0010  
                           ??_EUSART_Read 0070                               putch@txData 0071  
                  __end_of_ReceiveFromRom 0D68                                 _SendToRom 0DF9  
                   __size_of_readRegister 0051                      __end_of_ads1015_init 0EFA  
                              ?_IsCharOne 0070                                  ??___lmul 0078  
                                ??___wmul 0074                       __end_of_eeprom_read 0CBB  
                       __size_of_UartSend 0005                  ??_UartDriverRecBufferClr 0071  
                       ??_BaseTimeTickISR 0070                                  ??_printf 0056  
                       __size_of_StartRom 0012               __end_of_EUSART_Transmit_ISR 0278  
                               ___latbits 0001                             __pcstackBANK0 004A  
                             ??_IIC_Delay 0070                   __end_of_LinearLookUpTab 08B5  
                            _readRegister 0D68        __end_of_SendDataToMainBoardProcess 0EE0  
              _SendDataToMainBoardProcess 0E90                          _ConstructCaliTab 0094  
                        eeprom_write@addr 0071                __end_of_EUSART_Receive_ISR 028E  
              __size_of_EUSART_Initialize 0018      readADC_Differential_0_1_part1@config 007C  
                         ?_ReceiveFromRom 0074                          ?_UartSendProcess 0070  
                              ?_SendToRom 0074                       __end_of_EUSART_Read 0094  
                       _EraseCaliDatabase 0B1F                     _TMR0_InterruptHandler 0067  
                         _CaliTabSendFlag 003E                                 __pnvBANK0 0067  
             __size_of_CaliTabSendProcess 0046                               _ADLinearVal 002C  
                      ?_EraseCaliDatabase 0070                          ___lwdiv@dividend 0072  
                  _PIN_MANAGER_Initialize 0E7D                      EUSART_Read@readValue 0070  
                                ?___aldiv 004A                                  ?_StopRom 0070  
                                ?___lldiv 004A                                  ?___lwdiv 0070  
                                ?___lwmod 0077                              _eusartRxHead 0046  
                            _eusartTxHead 0048                              _eusartRxTail 0047  
                     ??_EraseCaliDatabase 0072                              _eusartTxTail 0049  
                 __size_of_IIC_Delay_Half 0003              ??_INTERRUPT_InterruptManager 0070  
                 _eusartTxBufferRemaining 0069                                  ?_isdigit 0070  
                        ___lwdiv@quotient 0074                    __size_of_UpdateCaliBuf 0021  
                          __size_of_putch 0002                            _eusartRxBuffer 0120  
               __end_of_EraseCaliDatabase 0B2B                           ___aldiv@divisor 004A  
                       ??_TMR0_Initialize 0072                            _eusartTxBuffer 00E8  
                         ___aldiv@counter 0052                            ___wmul@product 0074  
                                _LATAbits 010C                                 clear_ram0 02A6  
                             _eeprom_read 0CA9                                  _PIE1bits 0091  
     __size_of_INTERRUPT_InterruptManager 0021                        writeRegister@value 004E  
              ??_TMR0_SetInterruptHandler 0072                                  _PIR1bits 0011  
                             ??_IsCharOne 0072                                  _TMR0_ISR 028E  
                 EEpromBufferRead@pBuffer 0076           __size_of_UartDriverRecBufferClr 0007  
                       ___wmul@multiplier 0070                 __size_of_EEpromBuffeWirte 001A  
           EEpromBufferRead@NumByteToRead 0072                                printf@flag 005C  
               __size_of_EEpromBufferRead 0019                                printf@prec 005B  
            ?_ChangeADS1115ValueToResitor 007C                            UpdateCaliBuf@i 007C  
                        ?_LinearLookUpTab 0057                               _EUSART_Read 007D  
                       ___lmul@multiplier 0070                     __size_of_ads1015_init 0009  
             __end_of_Update2CaliDatabase 0B05                   _CaliTabSendProcess$1116 0062  
                 _CaliTabSendProcess$1117 0064                               ??_SendToRom 0076  
                              _ADCProcess 08F1                                Cali@InData 007C  
                     _UartByteToBeSendCnt 0042                                  _UartSend 0FFB  
                           _UpdateCaliBuf 0C6F                   ??_OSCILLATOR_Initialize 0070  
                                _StartRom 0E42                          __size_of___aldiv 006C  
                        __size_of_StopRom 000F                           UartSend@SendNum 0070  
                        __size_of___lldiv 003F                          __size_of___lwdiv 0025  
                        __size_of___lwmod 0020                               _isdigit$834 0070  
                           readRegister@i 004C                              _ads1015_init 0EF1  
                        __size_of_isdigit 000E                           ___lwdiv@divisor 0070  
                         ___lwdiv@counter 0076                                  __ptext10 0E8D  
                                __ptext11 0FEC                                  __ptext20 0C61  
                                __ptext12 0B2B                                  __ptext21 0B77  
                                __ptext13 0E7D                                  __ptext30 0E42  
                                __ptext22 08F1                                  __ptext14 0E78  
                                __ptext31 0DF9                                  __ptext23 0D1C  
                                __ptext15 0FD4                                  __ptext40 0C90  
                                __ptext32 0E57                                  __ptext24 0D68  
                                __ptext16 0B31                                  __ptext41 0CA9  
                                __ptext33 0E54                                  __ptext25 0E64  
                                __ptext17 0B8C                                  __ptext42 0B1F  
                                __ptext34 0E30                                  __ptext26 0D3D  
                                __ptext18 0C5F                                  __ptext51 028E  
                                __ptext43 0B05                                  __ptext35 0EF1  
                                __ptext27 0FBF                                  __ptext19 0FA3  
                                __ptext52 029C                                  __ptext44 0D00  
                                __ptext36 0A2C                                  __ptext28 0DB9  
                                __ptext53 02AC                                  __ptext45 099A  
                                __ptext37 0CE0                                  __ptext29 0E33  
                                __ptext54 0262                                  __ptext46 0942  
                                __ptext38 0CBB                                  __ptext55 0278  
                                __ptext47 0801                                  __ptext39 0C6F  
                                __ptext48 0975                                  __ptext49 09ED  
           ??_ChangeADS1115ValueToResitor 0057                    _UartDriverRecBufferClr 0076  
  __end_of_readADC_Differential_0_1_part1 0FD4   __size_of_readADC_Differential_0_1_part1 0015  
          _readADC_Differential_0_1_part1 0FBF    __end_of_readADC_Differential_0_1_part2 0D3D  
 __size_of_readADC_Differential_0_1_part2 0021            _readADC_Differential_0_1_part2 0D1C  
              __size_of_EraseCaliDatabase 000C                             __size_of_Cali 0033  
                           __size_of_mack 000B                             __size_of_main 0021  
                         _BaseTimeTickISR 029C      __end_of_TMR0_DefaultInterruptHandler 02AD  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 02AC  
                          ?_UpdateCaliBuf 0070                                  int$flags 007E  
      __end_of_INTERRUPT_InterruptManager 0025                _INTERRUPT_InterruptManager 0004  
                               printf@val 005D                            _IIC_Delay_Half 0E54  
                __end_of_ConstructCaliTab 0157                 EEpromBuffeWirte@WriteAddr 0072  
              Update2CaliDatabase@ori_val 004A                     __end_of_writeRegister 0DF9  
                              _INTCONbits 000B                                  isdigit@c 0071  
                        ??_ReceiveFromRom 0076                         ConstructCaliTab@i 0064  
                       ConstructCaliTab@j 0065                   __size_of_WDT_Initialize 0003  
             ?_SendDataToMainBoardProcess 0070                        LinearLookUpTab@Tab 0064  
                                intlevel1 0000                        LinearLookUpTab@ret 005F  
                      LinearLookUpTab@val 0058                          ___lwmod@dividend 0079  
                        ___lldiv@dividend 004E                   ?_PIN_MANAGER_Initialize 0070  
                             ?_ADCProcess 0070                         __CFG_CLKOUTEN$OFF 0000  
                        writeRegister@reg 004C             ?_TMR0_DefaultInterruptHandler 0070  
                  __end_of_IIC_Delay_Half 0E57                                  printf@ap 005A  
                      _EUSART_Receive_ISR 0278                          _EEpromBuffeWirte 0B05  
                              _OPTION_REG 0095                       ?_EUSART_Receive_ISR 0070  
                        _EEpromBufferRead 0C90                          ___lldiv@quotient 0052  
                         ___lwmod@divisor 0077                           _TMR0_Initialize 0FEC  
                         ___lwmod@counter 007B                              ___aldiv@sign 0053  
                 __size_of_UartRecProcess 004F                   __end_of_BaseTimeTickISR 02A6  
                      EUSART_Write@txData 0070              __size_of_EUSART_Transmit_ISR 0016  
          __end_of_PIN_MANAGER_Initialize 0E8D                __end_of_CaliTabSendProcess 0B77  
                          writeRegister@i 007A                             ?_eeprom_write 0070  
                    ??_EUSART_Receive_ISR 0070                              ?_eeprom_read 0070  
                     ReceiveFromRom@count 0078                           ??_UpdateCaliBuf 0078  
